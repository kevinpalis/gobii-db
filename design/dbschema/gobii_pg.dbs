<?xml version="1.0" encoding="UTF-8" ?>
<project name="gobii_rice" id="Project_f77a261" html="y" template="Default" database="PostgreSQL" >
	<schema name="public" catalogname="gobii_rice" schemaname="public" >
		<table name="analysis" >
			<column name="analysis_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="program" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="programversion" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="algorithm" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourcename" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourceversion" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourceuri" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="parameters" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<column name="timeexecuted" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_analysis" unique="PRIMARY_KEY" >
				<column name="analysis_id" />
			</index>
			<fk name="analysis_analysis_type_id_fkey" to_schema="public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="contact" >
			<column name="contact_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="lastname" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="firstname" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="email" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="roles" type="_int4" length="10" decimal="0" jt="2003" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="organization_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_contact" unique="PRIMARY_KEY" >
				<column name="contact_id" />
			</index>
			<fk name="fk_organization_contact" to_schema="public" to_table="organization" >
				<fk_column name="organization_id" pk="organization_id" />
			</fk>
		</table>
		<table name="cv" >
			<column name="cv_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="group" type="text" jt="12" mandatory="y" >
				<comment><![CDATA[Groups terms together, ex. map_type, analysis_type]]></comment>
			</column>
			<column name="term" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="definition" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="rank" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<index name="pk_cv" unique="PRIMARY_KEY" >
				<column name="cv_id" />
			</index>
			<index name="group_term_key" unique="UNIQUE" >
				<column name="group" />
				<column name="term" />
			</index>
		</table>
		<table name="dataset" >
			<column name="dataset_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="experiment_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="callinganalysis_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="analyses" type="_int4" length="10" decimal="0" jt="2003" />
			<column name="data_table" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="data_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="quality_table" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="quality_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="scores" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="pk_dataset" unique="PRIMARY_KEY" >
				<column name="dataset_id" />
			</index>
			<fk name="dataset_fk2" to_schema="public" to_table="analysis" >
				<fk_column name="callinganalysis_id" pk="analysis_id" />
			</fk>
			<fk name="dataset_fk1" to_schema="public" to_table="experiment" >
				<fk_column name="experiment_id" pk="experiment_id" />
			</fk>
		</table>
		<table name="dataset_dnarun" >
			<column name="dataset_dnarun_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dataset_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnarun_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnarun_idx" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_dataset_dnarun" unique="PRIMARY_KEY" >
				<column name="dataset_dnarun_id" />
			</index>
			<fk name="dataset_dnarun_fk1" to_schema="public" to_table="dataset" >
				<fk_column name="dataset_id" pk="dataset_id" />
			</fk>
			<fk name="dataset_dnarun_fk2" to_schema="public" to_table="dnarun" >
				<fk_column name="dnarun_id" pk="dnarun_id" />
			</fk>
		</table>
		<table name="dataset_marker" >
			<column name="dataset_marker_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dataset_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="marker_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="call_rate" type="real" length="8" decimal="8" jt="7" />
			<column name="maf" type="real" length="8" decimal="8" jt="7" />
			<column name="reproducibility" type="real" length="8" decimal="8" jt="7" />
			<column name="scores" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<column name="marker_idx" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_dataset_marker" unique="PRIMARY_KEY" >
				<column name="dataset_marker_id" />
			</index>
			<fk name="dataset_marker_dataset_id_fkey" to_schema="public" to_table="dataset" >
				<fk_column name="dataset_id" pk="dataset_id" />
			</fk>
			<fk name="dataset_marker_marker_id_fkey" to_schema="public" to_table="marker" >
				<fk_column name="marker_id" pk="marker_id" />
			</fk>
		</table>
		<table name="display" >
			<column name="display_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="table_name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="column_name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="display_name" type="text" length="100" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<column name="rank" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_table_display" unique="PRIMARY_KEY" >
				<column name="display_id" />
			</index>
		</table>
		<table name="dnarun" >
			<column name="dnarun_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="experiment_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnasample_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="pk_dnarun" unique="PRIMARY_KEY" >
				<column name="dnarun_id" />
			</index>
			<fk name="dnarun_fk2" to_schema="public" to_table="dnasample" >
				<fk_column name="dnasample_id" pk="dnasample_id" />
			</fk>
			<fk name="dnarun_fk1" to_schema="public" to_table="experiment" >
				<fk_column name="experiment_id" pk="experiment_id" />
			</fk>
		</table>
		<table name="dnarun_prop" >
			<column name="dnarun_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnarun_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" mandatory="y" />
			<index name="pk_dnarun_prop" unique="PRIMARY_KEY" >
				<column name="dnarun_prop_id" />
			</index>
			<index name="idx_dnarun_prop" unique="UNIQUE" >
				<column name="dnarun_id" />
			</index>
			<fk name="dnarun_prop_dnarun_id_fkey" to_schema="public" to_table="dnarun" >
				<fk_column name="dnarun_id" pk="dnarun_id" />
			</fk>
		</table>
		<table name="dnasample" >
			<column name="dnasample_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="platename" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="num" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="well_row" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="well_col" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="project_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="germplasm_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_dnasample" unique="PRIMARY_KEY" >
				<column name="dnasample_id" />
			</index>
			<fk name="dnasample_fk2" to_schema="public" to_table="germplasm" >
				<fk_column name="germplasm_id" pk="germplasm_id" />
			</fk>
			<fk name="dnasample_fk1" to_schema="public" to_table="project" >
				<fk_column name="project_id" pk="project_id" />
			</fk>
		</table>
		<table name="dnasample_prop" >
			<column name="dnasample_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnasample_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_dnasample_prop" unique="PRIMARY_KEY" >
				<column name="dnasample_prop_id" />
			</index>
			<index name="idx_dnasample_prop" unique="UNIQUE" >
				<column name="dnasample_id" />
			</index>
			<fk name="dnasample_prop_fk1" to_schema="public" to_table="dnasample" >
				<fk_column name="dnasample_id" pk="dnasample_id" />
			</fk>
		</table>
		<table name="experiment" >
			<column name="experiment_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="project_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="platform_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="manifest_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="data_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_experiment" unique="PRIMARY_KEY" >
				<column name="experiment_id" />
			</index>
			<index name="name_project_id_platform_id_key" unique="UNIQUE" >
				<column name="name" />
				<column name="project_id" />
				<column name="platform_id" />
			</index>
			<fk name="experiment_fk3" to_schema="public" to_table="manifest" >
				<fk_column name="manifest_id" pk="manifest_id" />
			</fk>
			<fk name="experiment_fk2" to_schema="public" to_table="platform" >
				<fk_column name="platform_id" pk="platform_id" />
			</fk>
			<fk name="experiment_fk1" to_schema="public" to_table="project" >
				<fk_column name="project_id" pk="project_id" />
			</fk>
		</table>
		<table name="germplasm" >
			<column name="germplasm_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="external_code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="species_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" >
				<defo>0</defo>
			</column>
			<index name="pk_germplasm" unique="PRIMARY_KEY" >
				<column name="germplasm_id" />
			</index>
			<index name="idx_germplasm" unique="NORMAL" >
				<column name="status" />
			</index>
			<index name="idx_germplasm_0" unique="NORMAL" >
				<column name="species_id" />
			</index>
			<fk name="germplasm_germplasm_type_id_fkey" to_schema="public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
			<fk name="fk_germplasm_species_id_cv" to_schema="public" to_table="cv" >
				<fk_column name="species_id" pk="cv_id" />
			</fk>
		</table>
		<table name="germplasm_prop" >
			<column name="germplasm_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="germplasm_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_germplasm_prop" unique="PRIMARY_KEY" >
				<column name="germplasm_prop_id" />
			</index>
			<index name="idx_germplasm_prop" unique="UNIQUE" >
				<column name="germplasm_id" />
			</index>
			<fk name="germplasm_prop_fk1" to_schema="public" to_table="germplasm" >
				<fk_column name="germplasm_id" pk="germplasm_id" />
			</fk>
		</table>
		<table name="linkage_group" >
			<comment><![CDATA[This table will contain different linkage groups, ie. Chromosome 1, Chromosome 2, etc. along with their respective start and stop boundaries.]]></comment>
			<column name="linkage_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[ex. Chromosome 1, Chromosome 2, ..., ChromosomeN, LG01, LG02, etc.]]></comment>
			</column>
			<column name="start" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>0</defo>
				<comment><![CDATA[Start of the linkage group. 0-based, interbased coordinates.]]></comment>
			</column>
			<column name="stop" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>0</defo>
				<comment><![CDATA[The maximum position in the linkage group, ex. 200, 200000000
]]></comment>
			</column>
			<column name="map_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<comment><![CDATA[Foreign key to the Map table. This defines which map the linkage group belongs to.]]></comment>
			</column>
			<index name="pk_linkage_group" unique="PRIMARY_KEY" >
				<column name="linkage_group_id" />
			</index>
			<index name="idx_linkage_group" unique="NORMAL" >
				<column name="map_id" />
			</index>
			<fk name="fk_linkage_group_map" to_schema="public" to_table="mapset" >
				<fk_column name="map_id" pk="mapset_id" />
			</fk>
		</table>
		<table name="manifest" >
			<column name="manifest_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="file_path" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<index name="pk_manifest" unique="PRIMARY_KEY" >
				<column name="manifest_id" />
			</index>
		</table>
		<table name="map_prop" >
			<column name="map_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="map_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_map_prop" unique="PRIMARY_KEY" >
				<column name="map_prop_id" />
			</index>
			<index name="idx_map_prop" unique="UNIQUE" >
				<column name="map_id" />
			</index>
			<fk name="map_prop_map_id_fkey" to_schema="public" to_table="mapset" >
				<fk_column name="map_id" pk="mapset_id" />
			</fk>
		</table>
		<table name="mapset" >
			<column name="mapset_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_map" unique="PRIMARY_KEY" >
				<column name="mapset_id" />
			</index>
			<fk name="map_map_type_fkey" to_schema="public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
			<fk name="map_reference_id_fkey" to_schema="public" to_table="reference" >
				<fk_column name="reference_id" pk="reference_id" />
			</fk>
		</table>
		<table name="marker" >
			<column name="marker_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="platform_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="variant_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="ref" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="alts" type="_text" length="2147483647" decimal="0" jt="2003" mandatory="y" />
			<column name="sequence" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="primers" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<column name="probsets" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<column name="strand_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_marker" unique="PRIMARY_KEY" >
				<column name="marker_id" />
			</index>
			<index name="idx_marker" unique="NORMAL" >
				<column name="strand_id" />
			</index>
			<index name="idx_marker_0" unique="NORMAL" >
				<column name="reference_id" />
			</index>
			<fk name="marker_fk1" to_schema="public" to_table="platform" >
				<fk_column name="platform_id" pk="platform_id" />
			</fk>
			<fk name="marker_fk2" to_schema="public" to_table="variant" >
				<fk_column name="variant_id" pk="variant_id" />
			</fk>
			<fk name="fk_marker_cv" to_schema="public" to_table="cv" >
				<fk_column name="strand_id" pk="cv_id" />
			</fk>
			<fk name="fk_marker_reference" to_schema="public" to_table="reference" >
				<fk_column name="reference_id" pk="reference_id" />
			</fk>
		</table>
		<table name="marker_group" >
			<column name="marker_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="markers" type="jsonb" length="2147483647" decimal="0" jt="1111" mandatory="y" />
			<column name="germplasm_group" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<index name="pk_marker_group" unique="PRIMARY_KEY" >
				<column name="marker_group_id" />
			</index>
		</table>
		<table name="marker_linkage_group" >
			<column name="marker_linkage_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="marker_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="start" type="numeric" length="13" decimal="3" jt="2" />
			<column name="stop" type="numeric" length="13" decimal="3" jt="2" />
			<column name="linkage_group_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_marker_map" unique="PRIMARY_KEY" >
				<column name="marker_linkage_group_id" />
			</index>
			<index name="idx_marker_map" unique="NORMAL" >
				<column name="linkage_group_id" />
			</index>
			<fk name="fk_marker_linkage_group" to_schema="public" to_table="linkage_group" >
				<fk_column name="linkage_group_id" pk="linkage_group_id" />
			</fk>
			<fk name="marker_map_marker_id_fkey" to_schema="public" to_table="marker" >
				<fk_column name="marker_id" pk="marker_id" />
			</fk>
		</table>
		<table name="marker_prop" >
			<column name="marker_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="marker_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_marker_prop" unique="PRIMARY_KEY" >
				<column name="marker_prop_id" />
			</index>
			<index name="idx_marker_prop" unique="UNIQUE" >
				<column name="marker_id" />
			</index>
			<fk name="marker_prop_marker_id_fkey" to_schema="public" to_table="marker" >
				<fk_column name="marker_id" pk="marker_id" />
			</fk>
		</table>
		<table name="organization" >
			<column name="organization_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="address" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="website" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>1</defo>
			</column>
			<index name="organization_pkey" unique="PRIMARY_KEY" >
				<column name="organization_id" />
			</index>
			<index name="organization_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<table name="platform" >
			<column name="platform_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="vendor_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="type_id" type="integer" jt="4" mandatory="y" />
			<index name="pk_platform" unique="PRIMARY_KEY" >
				<column name="platform_id" />
			</index>
			<index name="idx_platform" unique="NORMAL" >
				<column name="vendor_id" />
			</index>
			<index name="idx_platform_0" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<fk name="fk_platform_contact" to_schema="public" to_table="contact" >
				<fk_column name="vendor_id" pk="contact_id" />
			</fk>
			<fk name="fk_platform_cv" to_schema="public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="platform_prop" >
			<column name="platform_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="platform_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_platform_prop" unique="PRIMARY_KEY" >
				<column name="platform_prop_id" />
			</index>
			<index name="idx_platform_prop" unique="UNIQUE" >
				<column name="platform_id" />
			</index>
			<fk name="platform_prop_platform_id_fkey" to_schema="public" to_table="platform" >
				<fk_column name="platform_id" pk="platform_id" />
			</fk>
		</table>
		<table name="project" >
			<column name="project_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="pi_contact" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo>(&#039;now&#039;::text)::date</defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_project" unique="PRIMARY_KEY" >
				<column name="project_id" />
			</index>
			<index name="idx_project" unique="NORMAL" >
				<column name="pi_contact" />
			</index>
			<index name="pi_project_name_key" unique="UNIQUE" >
				<column name="pi_contact" />
				<column name="name" />
			</index>
			<fk name="fk_project_contact" to_schema="public" to_table="contact" >
				<fk_column name="pi_contact" pk="contact_id" />
			</fk>
		</table>
		<table name="project_prop" >
			<column name="project_prop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="project_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_project_prop" unique="PRIMARY_KEY" >
				<column name="project_prop_id" />
			</index>
			<index name="idx_project_prop" unique="UNIQUE" >
				<column name="project_id" />
			</index>
			<fk name="project_prop_fk1" to_schema="public" to_table="project" >
				<fk_column name="project_id" pk="project_id" />
			</fk>
		</table>
		<table name="reference" >
			<column name="reference_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="version" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="link" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="file_path" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="pk_reference" unique="PRIMARY_KEY" >
				<column name="reference_id" />
			</index>
		</table>
		<table name="role" >
			<column name="role_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="role_name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="role_code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="read_tables" type="_int4" length="10" decimal="0" jt="2003" />
			<column name="write_tables" type="_int4" length="10" decimal="0" jt="2003" />
			<index name="pk_role" unique="PRIMARY_KEY" >
				<column name="role_id" />
			</index>
		</table>
		<table name="variant" >
			<column name="variant_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<index name="pk_variant" unique="PRIMARY_KEY" >
				<column name="variant_id" />
			</index>
		</table>
		<view name="v_all_projects_full_details" >
			<view_script><![CDATA[ SELECT p.project_id,
    p.name,
    p.code,
    p.description,
    p.pi_contact AS pi_contact_id,
    c.firstname AS pi_first_name,
    c.lastname AS pi_last_name,
    p.created_by,
    p.created_date,
    p.modified_by,
    p.modified_date,
    p.status
   FROM (project p
     JOIN contact c ON ((p.pi_contact = c.contact_id)));]]></view_script>
			<column name="project_id" type="integer" />
			<column name="name" type="text" />
			<column name="code" type="text" />
			<column name="description" type="text" />
			<column name="pi_contact_id" type="integer" />
			<column name="pi_first_name" type="text" />
			<column name="pi_last_name" type="text" />
			<column name="created_by" type="integer" />
			<column name="created_date" type="date" />
			<column name="modified_by" type="integer" />
			<column name="modified_date" type="date" />
			<column name="status" type="integer" />
		</view>
		<view name="v_marker_linkage_genetic" >
			<view_script><![CDATA[ SELECT mlg.marker_id,
    lg.name AS linkage_group_name,
    (mlg.start)::integer AS start,
    (mlg.stop)::integer AS stop,
    ms.name AS mapset_name
   FROM marker_linkage_group mlg,
    linkage_group lg,
    mapset ms
  WHERE ((mlg.linkage_group_id = lg.linkage_group_id) AND (lg.map_id = ms.mapset_id));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="linkage_group_name" type="varchar" />
			<column name="start" type="integer" />
			<column name="stop" type="integer" />
			<column name="mapset_name" type="text" />
		</view>
		<view name="v_marker_linkage_physical" >
			<view_script><![CDATA[ SELECT mlg.marker_id,
    lg.name AS linkage_group_name,
    mlg.start,
    mlg.stop,
    ms.name AS mapset_name
   FROM marker_linkage_group mlg,
    linkage_group lg,
    mapset ms
  WHERE ((mlg.linkage_group_id = lg.linkage_group_id) AND (lg.map_id = ms.mapset_id));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="linkage_group_name" type="varchar" />
			<column name="start" type="numeric" />
			<column name="stop" type="numeric" />
			<column name="mapset_name" type="text" />
		</view>
		<view name="v_marker_metadata_by_dataset" >
			<view_script><![CDATA[ SELECT m.marker_id,
    dm.dataset_id,
    p.name AS platform_name,
    m.variant_id,
    m.name,
    m.code,
    m.ref,
    m.alts,
    m.sequence,
    r.name AS reference_name,
    m.primers,
    m.probsets,
    cv.term AS strand_name,
    m.status
   FROM marker m,
    platform p,
    reference r,
    cv,
    dataset_marker dm
  WHERE ((m.marker_id = dm.marker_id) AND (m.platform_id = p.platform_id) AND (m.reference_id = r.reference_id) AND (m.strand_id = cv.cv_id));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="dataset_id" type="integer" />
			<column name="platform_name" type="text" />
			<column name="variant_id" type="integer" />
			<column name="name" type="text" />
			<column name="code" type="text" />
			<column name="ref" type="text" />
			<column name="alts" type="_text" />
			<column name="sequence" type="text" />
			<column name="reference_name" type="text" />
			<column name="primers" type="jsonb" />
			<column name="probsets" type="jsonb" />
			<column name="strand_name" type="text" />
			<column name="status" type="integer" />
		</view>
		<sequence name="analysis_analysis_id_seq" start="1" />
		<sequence name="contact_contact_id_seq" start="1" />
		<sequence name="cv_cv_id_seq" start="1" />
		<sequence name="dataset_dataset_id_seq" start="1" />
		<sequence name="dataset_dnarun_dataset_dnarun_id_seq" start="1" />
		<sequence name="dataset_marker_dataset_marker_id_seq" start="1" />
		<sequence name="display_display_id_seq" start="1" />
		<sequence name="dnarun_dnarun_id_seq" start="1" />
		<sequence name="dnarun_prop_dnarun_prop_id_seq" start="1" />
		<sequence name="dnasample_dnasample_id_seq" start="1" />
		<sequence name="dnasample_prop_dnasample_prop_id_seq" start="1" />
		<sequence name="experiment_experiment_id_seq" start="1" />
		<sequence name="germplasm_germplasm_id_seq" start="1" />
		<sequence name="germplasm_prop_germplasm_prop_id_seq" start="1" />
		<sequence name="linkage_group_linkage_group_id_seq" start="1" />
		<sequence name="manifest_manifest_id_seq" start="1" />
		<sequence name="map_map_id_seq" start="1" />
		<sequence name="map_prop_map_prop_id_seq" start="1" />
		<sequence name="marker_group_marker_group_id_seq" start="1" />
		<sequence name="marker_map_marker_map_id_seq" start="1" />
		<sequence name="marker_marker_id_seq" start="1" />
		<sequence name="marker_prop_marker_prop_id_seq" start="1" />
		<sequence name="organization_organization_id_seq" start="1" />
		<sequence name="platform_platform_id_seq" start="1" />
		<sequence name="platform_prop_platform_prop_id_seq" start="1" />
		<sequence name="project_project_id_seq" start="1" />
		<sequence name="project_prop_project_prop_id_seq" start="1" />
		<sequence name="reference_reference_id_seq" start="1" />
		<sequence name="role_role_id_seq" start="1" />
		<sequence name="variant_variant_id_seq" start="1" />
		<function name="addanalysistodataset" id="Function_3b7978c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addanalysistodataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_append(analyses, analysisId)
     where dataset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="appendanalysistodataset" id="Function_1c22d6a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendanalysistodataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_append(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
		</function>
		<function name="appendreadtabletorole" id="Function_77a03ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendreadtabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_append(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="appendroletocontact" id="Function_ada7d0d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendroletocontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_append(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="appendwritetabletorole" id="Function_2b996ebf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendwritetabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_append(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="createanalysis" id="Function_366ad665" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status)
      values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, '{}'::jsonb, analysisTimeexecuted, analysisStatus); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status)
      values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, analysisParameters, analysisTimeexecuted, analysisStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createanalysis" id="Function_321ce063" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status)
      values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, '{}'::jsonb, analysisTimeexecuted, analysisStatus); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status)
      values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, analysisParameters, analysisTimeexecuted, analysisStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createcontact" id="Function_c4528e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcontact(lastname text, firstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into contact (lastname, firstname, code, email, roles, created_by, created_date, modified_by, modified_date, organization_id)
      values (lastName, firstName, contactCode, contactEmail, contactRoles, createdBy, createdDate, modifiedBy, modifiedDate, organizationId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createcv" id="Function_24cf0155" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcv(cvgroup text, cvterm text, cvdefinition text, cvrank integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into cv ("group", term, definition, rank)
      values (cvGroup, cvTerm, cvDefinition, cvRank); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdataset" id="Function_ad278b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdataset(datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset (experiment_id, callinganalysis_id, analyses, data_table, data_file, quality_table, quality_file, scores, created_by, created_date, modified_by, modified_date, status, type_id, name)
      values (experimentId, callinganalysisId, datasetAnalyses, dataTable, dataFile, qualityTable, qualityFile, '{}'::jsonb, createdBy, createdDate, modifiedBy, modifiedDate, datasetStatus, typeId, datasetName); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdataset" id="Function_f92f286" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdataset(datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset (experiment_id, callinganalysis_id, analyses, data_table, data_file, quality_table, quality_file, scores, created_by, created_date, modified_by, modified_date, status, type_id, name)
      values (experimentId, callinganalysisId, datasetAnalyses, dataTable, dataFile, qualityTable, qualityFile, '{}'::jsonb, createdBy, createdDate, modifiedBy, modifiedDate, datasetStatus, typeId, datasetName); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdatasetdnarun" id="Function_ef8eca4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdatasetdnarun(datasetid integer, dnarunid integer, dnarunidx integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_dnarun (dataset_id, dnarun_id, dnarun_idx)
      values (datasetId, dnarunId, dnarunIdx); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdatasetmarker" id="Function_2fbae617" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkeridx integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores, marker_idx)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, '{}'::jsonb, datasetMarkerIdx); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, datasetMarkerScores); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdatasetmarker" id="Function_3723ef10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkeridx integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores, marker_idx)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, '{}'::jsonb, datasetMarkerIdx); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, datasetMarkerScores); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdisplay" id="Function_12132a1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdisplay(tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into display (table_name, column_name, display_name, created_by, created_date, modified_by, modified_date, rank)
      values (tableName, columnName, displayName, createdBy, createdDate, modifiedBy, modifiedDate, displayRank); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="creatednarun" id="Function_24dfe2ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednarun(experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dnarun (experiment_id, dnasample_id, name, code)
      values (experimentId, dnasampleId, dnarunName, dnarunCode); 
    select lastval() into id;
    insert into dnarun_prop (dnarun_id, props) values (id, '{}'::jsonb);
  END;
$function$
]]></string>
		</function>
		<function name="creatednasample" id="Function_2608abc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednasample(dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dnasample (name, code, platename, num, well_row, well_col, project_id, germplasm_id, created_by, created_date, modified_by, modified_date, status)
      values (dnaSampleName, dnaSampleCode, dnaSamplePlateName, dnaSampleNum, wellRow, wellCol, projectId, germplasmId, createdBy, createdDate, modifiedBy, modifiedDate, dnaSampleStatus); 
    select lastval() into id;
    insert into dnasample_prop (dnasample_id, props) values (id, '{}'::jsonb);
  END;
$function$
]]></string>
		</function>
		<function name="createexperiment" id="Function_2cb34b71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createexperiment(expname text, expcode text, projectid integer, platformid integer, manifestid integer, datafile text, createdby integer, createddate date, modifiedby integer, modifieddate date, expstatus integer, OUT expid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into experiment (name, code, project_id, platform_id, manifest_id, data_file, created_by, created_date, modified_by, modified_date, status)
      values (expName, expCode, projectId, platformId, manifestId, dataFile, createdBy, createdDate, modifiedBy, modifiedDate, expStatus); 
    select lastval() into expId;
    END;
$function$
]]></string>
		</function>
		<function name="creategermplasm" id="Function_33d6d58e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creategermplasm(germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into germplasm (name, external_code, species_id, type_id, created_by, created_date, modified_by, modified_date, status, code)
      values (germplasmName, externalCode, speciesId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, germplasmStatus, germplasmCode); 
    select lastval() into id;
    insert into germplasm_prop (germplasm_id, props) values (id, '{}'::jsonb);
  END;
$function$
]]></string>
		</function>
		<function name="createlinkagegroup" id="Function_1f9a4685" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createlinkagegroup(linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into linkage_group (name, start, stop, map_id)
      values (linkageGroupName, linkageGroupStart, linkageGroupStop, mapId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmanifest" id="Function_384af29a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmanifest(manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT mid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into manifest (name, code, file_path, created_by, created_date, modified_by, modified_date)
      values (manifestName, manifestCode, filePath, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into mId;
  END;
$function$
]]></string>
		</function>
		<function name="createmapset" id="Function_1849f23c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmapset(mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into mapset (name, code, description, reference_id, type_id, created_by, created_date, modified_by, modified_date, status)
      values (mapsetName, mapsetCode, mapsetDescription, referenceId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, mapsetStatus); 
    select lastval() into id;
    insert into map_prop (map_id, props) values (id, '{}'::jsonb);
  END;
$function$
]]></string>
		</function>
		<function name="createmarker" id="Function_22d079df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (marker_id, platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (markerId, platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, '{}'::jsonb, '{}'::jsonb, strandId, markerStatus); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, markerprimers jsonb, markerprobsets text[], strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (marker_id, platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (markerId, platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, markerPrimers, markerProbsets, strandId, markerStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarker" id="Function_2a807050" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (marker_id, platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (markerId, platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, '{}'::jsonb, '{}'::jsonb, strandId, markerStatus); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, markerprimers jsonb, markerprobsets text[], strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (marker_id, platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (markerId, platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, markerPrimers, markerProbsets, strandId, markerStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkergroup" id="Function_c03cafb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkergroup(markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_group (name, code, markers, germplasm_group, created_by, created_date, modified_by, modified_date, status)
      values (markerGroupName, markerGroupCode, '{}'::jsonb, germplasmGroup, createdBy, createdDate, modifiedBy, modifiedDate, markerGroupStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkergroup" id="Function_1405edf3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkergroup(markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_group (name, code, markers, germplasm_group, created_by, created_date, modified_by, modified_date, status)
      values (markerGroupName, markerGroupCode, '{}'::jsonb, germplasmGroup, createdBy, createdDate, modifiedBy, modifiedDate, markerGroupStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkerlinkagegroup" id="Function_cbc92b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createorganization" id="Function_21364ffc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createorganization(orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into organization (name, address, website, created_by, created_date, modified_by, modified_date, status)
      values (orgName, orgAddress, orgWebsite, createdBy, createdDate, modifiedBy, modifiedDate, orgStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createplatform" id="Function_1eab8556" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createplatform(platformname text, platformcode text, vendorid integer, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into platform (name, code, vendor_id, description, created_by, created_date, modified_by, modified_date, status, type_id)
      values (platformName, platformCode, vendorId, platformDescription, createdBy, createdDate, modifiedBy, modifiedDate, platformStatus, typeId); 
    select lastval() into id;
    insert into platform_prop (platform_id, props) values (id, '{}'::jsonb);
  END;
$function$
]]></string>
		</function>
		<function name="createproject" id="Function_14642ab3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createproject(projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer, OUT projectid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into project (name, code, description, pi_contact, created_by, created_date, modified_by, modified_date, status)
      values (projectName, projectCode, projectDescription, piContact, createdBy, createdDate, modifiedBy, modifiedDate, projectStatus); 
          
    select lastval() into projectId;
    insert into project_prop (project_id, props) values (projectId, '{}'::jsonb);
    END;
$function$
]]></string>
		</function>
		<function name="createreference" id="Function_f106812" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createreference(referencename text, referenceversion text, referencelink text, filepath text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into reference (name, version, link, file_path)
      values (referenceName, referenceVersion, referenceLink, filePath); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createrole" id="Function_15cc3797" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createrole(rolename text, rolecode text, readtables integer[], writetables integer[], OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into role (role_name, role_code, read_tables, write_tables)
      values (roleName, roleCode, readTables, writeTables); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createvariant" id="Function_1a62366f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvariant(variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into variant (code, created_by, created_date, modified_by, modified_date)
      values (variantCode, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="deleteanalysis" id="Function_12cc2a1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysis(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from analysis where analysis_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteanalysisparameter" id="Function_1e578c0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysisparameter(id integer, parametername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update analysis set parameters = parameters - parameterName
      where analysis_id=id;
    return parameterName;
  END;
$function$
]]></string>
		</function>
		<function name="deletecontact" id="Function_11222ca8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecontact(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from contact where contact_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletecv" id="Function_107b08e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecv(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from cv where cv_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletedataset" id="Function_3531ec8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedataset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dataset where dataset_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletedatasetdnarun" id="Function_2ffeafc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedatasetdnarun(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dataset where dataset_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletedatasetmarker" id="Function_32d66f11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedatasetmarker(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dataset_marker where dataset_marker_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletedisplay" id="Function_873c0a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedisplay(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from display where display_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednarun" id="Function_18e11309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarun(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnarun where dnarun_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednarunpropertybyid" id="Function_1119edb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun_prop 
    set props = props - propertyId::text
    where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletednarunpropertybyname" id="Function_4092a9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun_prop 
      set props = props - property.cv_id::text
      from property
      where dnarun_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletednasample" id="Function_ba2be63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasample(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnasample where dnasample_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednasamplepropertybyid" id="Function_1b80111c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample_prop 
    set props = props - propertyId::text
    where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletednasamplepropertybyname" id="Function_1160b56b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample_prop 
      set props = props - property.cv_id::text
      from property
      where dnasample_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteexperiment" id="Function_28332dce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteexperiment(eid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from experiment where experiment_id = eId;
    return eId;
    END;
$function$
]]></string>
		</function>
		<function name="deletegermplasm" id="Function_306e9287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasm(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from germplasm where germplasm_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletegermplasmpropertybyid" id="Function_22ffdcbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm_prop 
    set props = props - propertyId::text
    where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletegermplasmpropertybyname" id="Function_fc2d6d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm_prop 
      set props = props - property.cv_id::text
      from property
      where germplasm_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletelinkagegroup" id="Function_2927fa8f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletelinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from linkage_group where linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemanifest" id="Function_1958c591" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemanifest(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from manifest where manifest_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemapset" id="Function_2895ec94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from mapset where mapset_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemapsetpropertybyid" id="Function_249a69ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update map_prop 
    set props = props - propertyId::text
    where map_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletemapsetpropertybyname" id="Function_393bfa15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update map_prop 
      set props = props - property.cv_id::text
      from property
      where map_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarker" id="Function_17d101a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarker(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker where marker_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkergroup" id="Function_213e462a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkergroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_group where marker_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkerinmarkergroupbyid" id="Function_1f631f93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group 
    set markers = markers - markerId::text
    where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerinmarkergroupbyname" id="Function_3358d37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyname(id integer, markername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with markerInfo as (select marker_id from marker where name=markerName)
    update marker_group 
      set markers = markers - markerInfo.marker_id::text
      from markerInfo
      where marker_group_id=id;
    return markerName;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerlinkagegroup" id="Function_23f3f874" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerlinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_linkage_group where marker_linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkerpropertybyid" id="Function_2fa11eff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_prop 
    set props = props - propertyId::text
    where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerpropertybyname" id="Function_78ce87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker_prop 
      set props = props - property.cv_id::text
      from property
      where marker_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteorganization" id="Function_17a09287" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteorganization(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from organization where organization_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteplatform" id="Function_5a23681" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatform(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from platform where platform_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteplatformpropertybyid" id="Function_20fe86e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform_prop 
    set props = props - propertyId::text
    where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deleteplatformpropertybyname" id="Function_1ad28db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform_prop 
      set props = props - property.cv_id::text
      from property
      where platform_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteproject" id="Function_2833ea6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteproject(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from project where project_id = pId;
    return pId;
    END;
$function$
]]></string>
		</function>
		<function name="deleteprojectpropertybyid" id="Function_14a4b7ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project_prop 
    set props = props - propertyId::text
    where project_id=projectId;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deleteprojectpropertybyname" id="Function_1171ba26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyname(projectid integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project_prop 
      set props = props - property.cv_id::text
      from property
      where project_id=projectId;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletereference" id="Function_4caf64a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletereference(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from reference where reference_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleterole" id="Function_3a14886" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleterole(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from role where role_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletevariant" id="Function_266d3378" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletevariant(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from variant where variant_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="file_fdw_handler" id="Function_323e8bed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_handler()
 RETURNS fdw_handler
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_handler$function$
]]></string>
		</function>
		<function name="file_fdw_validator" id="Function_3cf46a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_validator(text[], oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_validator$function$
]]></string>
		</function>
		<function name="getallanalysisparameters" id="Function_16d0fe85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallanalysisparameters(id integer)
 RETURNS TABLE(property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select (jsonb_each_text(parameters)).* from analysis where analysis_id=id;
    END;
$function$
]]></string>
		</function>
		<function name="getallcontacts" id="Function_2601f301" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallcontacts()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      contacts refcursor;           -- Declare cursor variables                         
    BEGIN
      OPEN contacts FOR 
      SELECT c.contact_id,
					c.lastname ,
					c.firstname ,
					c.code ,
					c.email, 
					null as "roles", 
					c.created_by,
					c.created_date, 
					c.modified_by, 
					c.modified_date 
			from contact c;
      RETURN contacts;
    END;
$function$
]]></string>
		</function>
		<function name="getallcontactsbyrole" id="Function_2e50ea70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallcontactsbyrole(roleid integer)
 RETURNS SETOF contact
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select c.* from contact c, role r where r.role_id = roleId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
		</function>
		<function name="getallmarkermetadatabydataset" id="Function_c58ad7d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, linkage_group_name character varying, start numeric, stop numeric, mapset_name text, platform_name text, variant_id integer, code text, ref text, alts text, sequence text, reference_name text, primers jsonb, probsets jsonb, strand_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dm as (select dm.marker_id, dm.marker_idx from dataset_marker dm where dm.dataset_id=datasetId)
    select m.name as marker_name, mlp.linkage_group_name, mlp.start, mlp.stop, mlp.mapset_name, p.name as platform_name, m.variant_id, m.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, r.name as reference_name, m.primers, m.probsets, cv.term as strand_name
      from marker m, platform p, reference r, cv, v_marker_linkage_physical mlp, dm
      where m.marker_id = dm.marker_id 
      and m.platform_id = p.platform_id
      and m.reference_id = r.reference_id
      and m.strand_id = cv.cv_id
      and m.marker_id = mlp.marker_id
      order by dm.marker_idx;
  END;
$function$
]]></string>
		</function>
		<function name="getallmarkersinmarkergroup" id="Function_1bb1c71d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroup(id integer)
 RETURNS TABLE(marker_id integer, marker_name text, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as marker_id, marker.name as marker_name, p1.value as favorable_allele
    from marker, (select (jsonb_each_text(markers)).* from marker_group where marker_group_id=id) as p1
    where marker.marker_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallprojectmetadatabydataset" id="Function_680dcbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallprojectmetadatabydataset(datasetid integer)
 RETURNS TABLE(project_name text, description text, pi text, experiment_name text, platform_name text, dataset_name text, analysis_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p.name as project_name, p.description, c.firstname || ' ' || c.lastname as PI, e.name as experiment_name, pf.name as platform_name, d.name as dataset_name, a.name as analysis_name
      from dataset d, experiment e, project p, contact c, platform pf, analysis a
      where d.dataset_id = datasetId
      and d.callinganalysis_id = a.analysis_id
      and d.experiment_id = e.experiment_id
      and e.project_id = p.project_id
      and p.pi_contact = c.contact_id
      and e.platform_id = pf.platform_id;
  END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofdnarun" id="Function_13dd28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnarun(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnarun_prop where dnarun_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofdnasample" id="Function_27ca7142" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnasample(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnasample_prop where dnasample_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofgermplasm" id="Function_f54ac71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofgermplasm(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from germplasm_prop where germplasm_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofmapset" id="Function_239952c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmapset(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from map_prop where map_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofmarker" id="Function_39933a3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmarker(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from marker_prop where marker_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofplatform" id="Function_29506055" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofplatform(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from platform_prop where platform_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofproject" id="Function_49661f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofproject(projectid integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from project_prop where project_id=projectId) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallsamplemetadatabydataset" id="Function_11cad818" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, dnasample_name text, platename text, num text, well_row text, well_col text, germplasm_name text, external_code text, germplasm_type text, species text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dd as (select dd.dnarun_id, dd.dnarun_idx from dataset_dnarun dd where dd.dataset_id=datasetId)
    select dr.name as dnarun_name, ds.name as dnasample_name, ds.platename, ds.num, ds.well_row, ds.well_col, g.name as germplasm_name, g.external_code, c1.term as germplasm_type, c2.term as species
      from dnarun dr, dnasample ds, germplasm g, cv as c1, cv as c2, dd
      where dr.dnarun_id = dd.dnarun_id
      and dr.dnasample_id = ds.dnasample_id
      and ds.germplasm_id = g.germplasm_id
      and g.type_id = c1.cv_id
      and g.species_id = c2.cv_id
      order by dd.dnarun_idx;
  END;
$function$
]]></string>
		</function>
		<function name="getcontactnamesbyrole" id="Function_3afc4360" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcontactnamesbyrole(_role_name character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
  DECLARE
    contacts refcursor;           -- Declare cursor variables                         
  BEGIN
    OPEN contacts FOR 
    SELECT c.contact_id,
				c.lastname,
				c.firstname
		from contact c
		join role r on (r.role_id=ANY(c.roles))
		where r.role_name=_role_name;
    RETURN contacts;
  END;
$function$
]]></string>
		</function>
		<function name="getcontactsbyrole" id="Function_2bcc64f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcontactsbyrole(_role_name character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      contacts refcursor;           -- Declare cursor variables                         
    BEGIN
      OPEN contacts FOR 
      SELECT c.contact_id,
					c.lastname,
					c.firstname,
					c.code,
					c.email,
					r.role_id,
					r.role_name,
					r.role_code
			from contact c
			join role r on (r.role_id=ANY(c.roles))
			where r.role_name=_role_name;
      RETURN contacts;
    END;
$function$
]]></string>
		</function>
		<function name="getdnarunpropertybyid" id="Function_21785eff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnarun_prop where dnarun_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getdnarunpropertybyname" id="Function_2261ef6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnarun_prop, property
      where dnarun_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getdnasamplepropertybyid" id="Function_37a68df3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnasample_prop where dnasample_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getdnasamplepropertybyname" id="Function_1fb196cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnasample_prop, property
      where dnasample_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getexperimentnamesbyprojectid" id="Function_37162716" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentnamesbyprojectid(projectid integer)
 RETURNS TABLE(id integer, experiment_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select experiment_id, name from experiment where project_id = projectId;
  END;
$function$
]]></string>
		</function>
		<function name="getexperimentsbyprojectid" id="Function_3a83dade" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentsbyprojectid(projectid integer)
 RETURNS SETOF experiment
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from experiment where project_id = projectId;
  END;
$function$
]]></string>
		</function>
		<function name="getgermplasmpropertybyid" id="Function_ce1571d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from germplasm_prop where germplasm_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getgermplasmpropertybyname" id="Function_362f5153" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from germplasm_prop, property
      where germplasm_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getmanifestbyexperimentid" id="Function_35dbb166" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmanifestbyexperimentid(experimentid integer)
 RETURNS SETOF manifest
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from manifest where manifest_id in (select manifest_id from experiment where experiment_id = experimentId);
  END;
$function$
]]></string>
		</function>
		<function name="getmapsetpropertybyid" id="Function_3ad4f3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from map_prop where map_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmapsetpropertybyname" id="Function_3ae82e3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from map_prop, property
      where map_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerinmarkergroupbyid" id="Function_257e81f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select markers->markerId::text into value from marker_group where marker_group_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerinmarkergroupbyname" id="Function_38263d1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyname(id integer, markername text)
 RETURNS TABLE(marker_id integer, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with markerInfo as (select marker_id from marker where name=markerName)
    select markerInfo.marker_id, (props->markerInfo.marker_id::text)::text as favAllele
      from marker_group, markerInfo
      where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerpropertybyid" id="Function_2623830d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from marker_prop where marker_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerpropertybyname" id="Function_1364bd8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from marker_prop, property
      where marker_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getminimalmarkermetadatabydataset" id="Function_206edcdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, alleles text, chrom character varying, pos integer, strand text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dm as (select dm.marker_id, dm.marker_idx from dataset_marker dm where dm.dataset_id=datasetId)
    select m.name as marker_name, m.ref || '/' || array_to_string(m.alts, ',', '?') as alleles, mlp.linkage_group_name as chrom, mlp.stop as pos, cv.term as strand
      from marker m, cv, v_marker_linkage_genetic mlp, dm
      where m.marker_id = dm.marker_id 
      and m.strand_id = cv.cv_id
      and m.marker_id = mlp.marker_id
      order by dm.marker_idx;
  END;
$function$
]]></string>
		</function>
		<function name="getminimalsamplemetadatabydataset" id="Function_16af34b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(sample_name text, platename text, num text, well_row text, well_col text, germplasm_name text, germplasm_type text, species text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dd as (select dd.dnarun_id, dd.dnarun_idx from dataset_dnarun dd where dd.dataset_id=datasetId)
    select ds.name as sample_name, ds.platename, ds.num, ds.well_row, ds.well_col, g.name as germplasm_name, c1.term as germplasm_type, c2.term as species
      from dnarun dr, dnasample ds, germplasm g, cv as c1, cv as c2, dd
      where dr.dnarun_id = dd.dnarun_id
      and dr.dnasample_id = ds.dnasample_id
      and ds.germplasm_id = g.germplasm_id
      and g.type_id = c1.cv_id
      and g.species_id = c2.cv_id
      order by dd.dnarun_idx;
  END;
$function$
]]></string>
		</function>
		<function name="getplatformpropertybyid" id="Function_1c8f11dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from platform_prop where platform_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getplatformpropertybyname" id="Function_adca29f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from platform_prop, property
      where platform_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getprojectnamesbypi" id="Function_1f5d5600" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectnamesbypi(_contact_id integer)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      projects refcursor;
    BEGIN
      OPEN projects FOR 
      select p.project_id, 
					p.name 
			from project p
			where p.pi_contact=_contact_id;
      RETURN projects;
    END;
$function$
]]></string>
		</function>
		<function name="getprojectpropertybyid" id="Function_65d386b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from project_prop where project_id=projectId;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getprojectpropertybyname" id="Function_30cae0bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyname(projectid integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from project_prop, property
      where project_id=projectId);
    END;
$function$
]]></string>
		</function>
		<function name="getrolesofcontact" id="Function_17e22658" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getrolesofcontact(contactid integer)
 RETURNS SETOF role
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select r.* from contact c, role r where c.contact_id = contactId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
		</function>
		<function name="gettotalprojects" id="Function_24cc71fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettotalprojects()
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    total integer; 
  BEGIN
    select count(*) into total from projects;
    return total;
  END;
$function$
]]></string>
		</function>
		<function name="removeanalysisfromdataset" id="Function_2076dff3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removeanalysisfromdataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_remove(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
		</function>
		<function name="removereadtablefromrole" id="Function_2c333083" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removereadtablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_remove(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="removerolefromcontact" id="Function_1fd4c5ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removerolefromcontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_remove(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="removewritetablefromrole" id="Function_37b16ad3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removewritetablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_remove(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="updateanalysis" id="Function_28afd5a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters='{}'::jsonb, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updateanalysis" id="Function_8374a5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters='{}'::jsonb, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatecontact" id="Function_1c8f4435" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecontact(contactid integer, contactlastname text, contactfirstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set lastname=contactLastName, firstname=contactFirstName, code=contactCode, email=contactEmail, roles=contactRoles, created_by=createdBy, created_date=createdDate, 
      modified_by=modifiedBy, modified_date=modifiedDate, organization_id=organizationId
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="updatecv" id="Function_130fcef4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecv(id integer, cvgroup text, cvterm text, cvdefinition text, cvrank integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update cv set "group"=cvGroup, term=cvTerm, definition=cvDefinition, rank=cvRank
     where cv_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedataset" id="Function_fc57b8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedataset(id integer, datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set experiment_id=experimentId, callinganalysis_id=callinganalysisId, analyses=datasetAnalyses, data_table=dataTable, data_file=dataFile, quality_table=qualityTable, quality_file=qualityFile, scores='{}'::jsonb, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=datasetStatus, type_id=typeId, name=datasetName
     where dataset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedataset" id="Function_2b392710" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedataset(id integer, datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set experiment_id=experimentId, callinganalysis_id=callinganalysisId, analyses=datasetAnalyses, data_table=dataTable, data_file=dataFile, quality_table=qualityTable, quality_file=qualityFile, scores='{}'::jsonb, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=datasetStatus, type_id=typeId, name=datasetName
     where dataset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedatasetdnarun" id="Function_3a5baf08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetdnarun(id integer, datasetid integer, dnarunid integer, dnarunidx integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_dnarun set dataset_id=datasetId, dnarun_id=dnarunId, dnarun_idx=dnarunIdx
     where dataset_dnarun_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedatasetmarker" id="Function_2c9781cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkeridx integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores='{}'::jsonb, marker_idx=datasetMarkerIdx
     where dataset_marker_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores=datasetMarkerScores
     where dataset_marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedatasetmarker" id="Function_277c926c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkeridx integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores='{}'::jsonb, marker_idx=datasetMarkerIdx
     where dataset_marker_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores=datasetMarkerScores
     where dataset_marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedisplay" id="Function_2d4da68f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedisplay(id integer, tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update display set table_name=tableName, column_name=columnName, display_name=displayName, created_by=createdBy, created_date=createdDate, 
      modified_by=modifiedBy, modified_date=modifiedDate, rank=displayRank
     where display_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednarun" id="Function_1ccaa10f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarun(id integer, experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnarun set experiment_id=experimentId, dnasample_id=dnasampleId, name=dnarunName, code=dnarunCode
     where dnarun_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednarunpropertybyid" id="Function_1f17c266" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednarunpropertybyname" id="Function_30a1b7fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednasample" id="Function_f603ba7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasample(id integer, dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnasample set name=dnaSampleName, code=dnaSampleCode, platename=dnaSamplePlateName, num=dnaSampleNum, well_row=wellRow, well_col=wellCol, project_id=projectId, germplasm_id=germplasmId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=dnaSampleStatus
     where dnasample_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednasamplepropertybyid" id="Function_11a73634" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednasamplepropertybyname" id="Function_4e0189f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateexperiment" id="Function_318ce99e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateexperiment(eid integer, expname text, expcode text, projectid integer, platformid integer, manifestid integer, datafile text, createdby integer, createddate date, modifiedby integer, modifieddate date, expstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update experiment set name=expName, code=expCode, project_id=projectId, platform_id=platformId, manifest_id=manifestId, data_file=dataFile, 
      created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=expStatus where experiment_id = eId;
    END;
$function$
]]></string>
		</function>
		<function name="updategermplasm" id="Function_cb30fd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasm(id integer, germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update germplasm set name=germplasmName, external_code=externalCode, species_id=speciesId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=germplasmStatus, code=germplasmCode
     where germplasm_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updategermplasmpropertybyid" id="Function_10484150" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updategermplasmpropertybyname" id="Function_158764ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatelinkagegroup" id="Function_30fcdf17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatelinkagegroup(id integer, linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update linkage_group set name=linkageGroupName, start=linkageGroupStart, stop=linkageGroupStop, map_id=mapId
     where linkage_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemanifest" id="Function_2a783eb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemanifest(manifestid integer, manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update manifest set name=manifestName, code=manifestCode, file_path=filePath, created_by=createdBy, 
      created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where manifest_id = manifestId;
    END;
$function$
]]></string>
		</function>
		<function name="updatemapset" id="Function_fa7a73d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapset(id integer, mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update mapset set name=mapsetName, code=mapsetCode, description=mapsetDescription, reference_id=referenceId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=mapsetStatus
     where mapset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemapsetpropertybyid" id="Function_bb138a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update map_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where map_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemapsetpropertybyname" id="Function_30e7faf2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update map_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where map_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemarker" id="Function_5571bcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers='{}'::jsonb, probsets='{}'::jsonb, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, markerprimers jsonb, markerprobsets text[], strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers=markerPrimers, probsets=markerProbsets, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarker" id="Function_2d42179c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers='{}'::jsonb, probsets='{}'::jsonb, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, markerprimers jsonb, markerprobsets text[], strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers=markerPrimers, probsets=markerProbsets, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkergroup" id="Function_21eb206b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers='{}'::jsonb, germplasm_group=germplasmGroup, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, markergroupmarkers jsonb, germplasmgroup text, createdby integer, createdate date, modifiedby text, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers=markerGroupMarkers, germplasm_group=germplasmGroup, created_by=createdBy, create_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkergroup" id="Function_328bb7fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers='{}'::jsonb, germplasm_group=germplasmGroup, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, markergroupmarkers jsonb, germplasmgroup text, createdby integer, createdate date, modifiedby text, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers=markerGroupMarkers, germplasm_group=germplasmGroup, created_by=createdBy, create_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkerlinkagegroup" id="Function_1e678748" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkerpropertybyid" id="Function_1c1334ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemarkerpropertybyname" id="Function_29ba0572" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateorganization" id="Function_35f5cf9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateorganization(orgid integer, orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update organization set name=orgName, address=orgAddress, website=orgWebsite, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=orgStatus
     where organization_id = orgId;
    END;
$function$
]]></string>
		</function>
		<function name="updateplatform" id="Function_1bea2fde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatform(id integer, platformname text, platformcode text, vendorid integer, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update platform set name=platformName, code=platformCode, vendor_id=vendorId, description=platformDescription, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=platformStatus, type_id=typeId
     where platform_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updateplatformpropertybyid" id="Function_25f64ca6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateplatformpropertybyname" id="Function_2d2a69a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform_prop 
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateproject" id="Function_f5f75bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateproject(pid integer, projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update project set name = projectName, code = projectCode, description = projectDescription, pi_contact = piContact, created_by = createdBy, created_date = createdDate, 
      modified_by = modifiedBy, modified_date = modifiedDate, status = projectStatus where project_id = pId;
    END;
$function$
]]></string>
		</function>
		<function name="updateprojectpropertybyid" id="Function_189c660f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyid(projectid integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project_prop set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where project_id=projectId;
  END;
$function$
]]></string>
		</function>
		<function name="updateprojectpropertybyname" id="Function_fe6f2ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyname(projectid integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project_prop set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where project_id=projectId;
  END;
$function$
]]></string>
		</function>
		<function name="updatereference" id="Function_8e80f52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatereference(id integer, referencename text, referenceversion text, referencelink text, filepath text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update reference set name=referenceName, version=referenceVersion, link=referenceLink, file_path=filePath
     where reference_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updaterole" id="Function_c77e687" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterole(roleid integer, rolename text, rolecode text, readtables integer[], writetables integer[])
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set role_name=roleName, role_code=roleCode, read_tables=readTables, write_tables=writeTables
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="updatevariant" id="Function_6559a52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatevariant(id integer, variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update variant set code=variantCode, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where variant_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="upsertanalysisparameter" id="Function_508f243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertanalysisparameter(id integer, parametername text, parametervalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  DECLARE
    paramCol jsonb;
  BEGIN
    select parameters into paramCol from analysis where analysis_id=id;
    if paramCol is null then
      update analysis set parameters = ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    else
      update analysis set parameters = parameters || ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    end if;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnarunpropertybyid" id="Function_17d33126" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnarunpropertybyname" id="Function_47fb3d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnarun_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnasamplepropertybyid" id="Function_a6c70fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnasamplepropertybyname" id="Function_374f8cd5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnasample_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertgermplasmpropertybyid" id="Function_2ea971c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertgermplasmpropertybyname" id="Function_24d9fc2c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update germplasm_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmapsetpropertybyid" id="Function_102870ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update map_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where map_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmapsetpropertybyname" id="Function_c86a96e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update map_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where map_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkerpropertybyid" id="Function_233131f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkerpropertybyname" id="Function_d289820" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update marker_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkertomarkergroupbyid" id="Function_2f5b3e10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyid(id integer, markerid integer, favallele text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkertomarkergroupbyname" id="Function_174d3a6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyname(id integer, markername text, favallele text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    markerId integer;
  BEGIN
    select marker_id into markerId from marker where name=markerName;
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertplatformpropertybyid" id="Function_21920a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertplatformpropertybyname" id="Function_1cfe7042" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update platform_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprojectpropertybyid" id="Function_146c4403" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprojectpropertybyname" id="Function_2669a9f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update project_prop set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
	</schema>
	<connector name="gobii_rice" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-9.4-1203.jdbc41.jar" host="cbsugobii07.tc.cornell.edu" port="5432" instance="gobii_rice" user="kpalis" passwd="a3BhbGlzQDFSUmk=" sshEnable="true" sshHost="cbsugobii05.tc.cornell.edu" sshPort="22" sshUser="kpalis" sshUseKey="false" sshPassword="kpalis@1RRi" sshPublicKey="" sshPassphrase="" />
	<layout id="Layout_2e681c40" name="Default" show_relation_columns="y" >
		<entity schema="public" name="analysis" color="d2bff5" x="450" y="300" />
		<entity schema="public" name="contact" color="bfd4f5" x="1290" y="150" />
		<entity schema="public" name="cv" color="d2bff5" x="450" y="45" />
		<entity schema="public" name="dataset" color="f5ddbf" x="1065" y="660" />
		<entity schema="public" name="dataset_marker" color="c8f5bf" x="690" y="1035" />
		<entity schema="public" name="dnarun" color="f5ddbf" x="885" y="660" />
		<entity schema="public" name="dnarun_prop" color="f5ddbf" x="885" y="840" />
		<entity schema="public" name="dnasample" color="bfbff5" x="270" y="1035" />
		<entity schema="public" name="dnasample_prop" color="bfbff5" x="465" y="1350" />
		<entity schema="public" name="experiment" color="bfd4f5" x="1290" y="660" />
		<entity schema="public" name="germplasm" color="d2bff5" x="255" y="45" />
		<entity schema="public" name="germplasm_prop" color="d2bff5" x="45" y="300" />
		<entity schema="public" name="manifest" color="bfd4f5" x="1485" y="660" />
		<entity schema="public" name="mapset" color="c8f5bf" x="690" y="195" />
		<entity schema="public" name="map_prop" color="c8f5bf" x="855" y="465" />
		<entity schema="public" name="marker" color="f5ddbf" x="1290" y="1035" />
		<entity schema="public" name="marker_group" color="bfd4f5" x="1455" y="150" />
		<entity schema="public" name="marker_prop" color="c8f5bf" x="885" y="1035" />
		<entity schema="public" name="platform" color="f5ddbf" x="1455" y="1035" />
		<entity schema="public" name="platform_prop" color="f5ddbf" x="1455" y="1335" />
		<entity schema="public" name="project" color="bfbff5" x="465" y="1035" />
		<entity schema="public" name="project_prop" color="bfbff5" x="270" y="1350" />
		<entity schema="public" name="reference" color="c8f5bf" x="885" y="1245" />
		<entity schema="public" name="role" color="bfd4f5" x="1455" y="405" />
		<entity schema="public" name="display" color="bfd4f5" x="1290" y="405" />
		<entity schema="public" name="variant" color="f5ddbf" x="1290" y="1335" />
		<entity schema="public" name="dataset_dnarun" color="f5ddbf" x="690" y="840" />
		<group name="dnarun" color="f7f4f0" >
			<entity schema="public" name="dnarun" />
			<entity schema="public" name="dataset" />
			<entity schema="public" name="dataset_dnarun" />
			<entity schema="public" name="dnarun_prop" />
		</group>
		<group name="experiment" color="f0f3f7" >
			<entity schema="public" name="experiment" />
			<entity schema="public" name="manifest" />
		</group>
		<group name="marker" color="f7f4f0" >
			<entity schema="public" name="marker" />
			<entity schema="public" name="platform" />
			<entity schema="public" name="platform_prop" />
			<entity schema="public" name="variant" />
		</group>
		<group name="dataset_marker" color="f1f7f0" >
			<entity schema="public" name="dataset_marker" />
			<entity schema="public" name="marker_prop" />
			<entity schema="public" name="reference" />
		</group>
		<group name="dnasample" color="f0f0f7" >
			<entity schema="public" name="dnasample" />
			<entity schema="public" name="project" />
			<entity schema="public" name="dnasample_prop" />
			<entity schema="public" name="project_prop" />
		</group>
		<group name="germplasm" color="f3f0f7" >
			<entity schema="public" name="germplasm" />
			<entity schema="public" name="cv" />
			<entity schema="public" name="analysis" />
			<entity schema="public" name="germplasm_prop" />
		</group>
		<group name="map" color="f1f7f0" >
			<entity schema="public" name="mapset" />
			<entity schema="public" name="map_prop" />
		</group>
		<group name="contact" color="f0f3f7" >
			<entity schema="public" name="contact" />
			<entity schema="public" name="marker_group" />
			<entity schema="public" name="role" />
			<entity schema="public" name="display" />
		</group>
		<script name="dataset_dnarun" id="Query_29377b8f" language="SQL" >
			<string><![CDATA[SELECT * 
FROM
	"public".dataset_dnarun n;]]></string>
		</script>
		<browser id="Browse_30968be2" name="experiment" confirmed="y" >
			<browse_table schema="public" entity="experiment" x="10" y="10" width="400" height="300" >
				<browse_table schema="public" entity="manifest" fk="experiment_fk3" x="420" y="10" width="400" height="300" record_view="y" />
			</browse_table>
		</browser>
		<query id="Query_5774716" name="dataset_dnarun_001" >
			<query_table schema="public" name="dataset_dnarun" alias="dd" x="45" y="45" >
				<column name="dataset_dnarun_id" />
				<column name="dataset_id" />
				<column name="dnarun_id" />
			</query_table>
		</query>
		<form id="Form_3ab46508" name="Form" template="Centered Page" view="frame" >
			<header name="Header" template="Navbar" place="0, 0, 0, 0, full, full" layout="{{-2.0,-2.0},{-2.0,-2.0}}" columnar="y" scroll="n" html="n" />
			<body name="Body" template="Grid" css="gutter-10" place="0, 0, 0, 0, full, full" layout="{{-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-1.0},{-2.0,-2.0}}" columnar="y" scroll="n" html="n" />
		</form>
	</layout>
	<layout id="Layout_20b3d84a" name="Default With Groups" show_relation_columns="y" >
		<entity schema="public" name="analysis" color="d2bff5" x="450" y="300" />
		<entity schema="public" name="contact" color="bfd4f5" x="1290" y="150" />
		<entity schema="public" name="cv" color="d2bff5" x="450" y="45" />
		<entity schema="public" name="dataset" color="f5ddbf" x="1065" y="660" />
		<entity schema="public" name="dataset_dnarun" color="f5ddbf" x="690" y="840" />
		<entity schema="public" name="dataset_marker" color="c8f5bf" x="690" y="1035" />
		<entity schema="public" name="dnarun" color="f5ddbf" x="885" y="660" />
		<entity schema="public" name="dnarun_prop" color="f5ddbf" x="885" y="840" />
		<entity schema="public" name="dnasample" color="bfbff5" x="270" y="1035" />
		<entity schema="public" name="dnasample_prop" color="bfbff5" x="465" y="1350" />
		<entity schema="public" name="experiment" color="bfd4f5" x="1290" y="660" />
		<entity schema="public" name="germplasm" color="d2bff5" x="255" y="45" />
		<entity schema="public" name="germplasm_prop" color="d2bff5" x="45" y="300" />
		<entity schema="public" name="manifest" color="bfd4f5" x="1485" y="660" />
		<entity schema="public" name="mapset" color="c8f5bf" x="690" y="195" />
		<entity schema="public" name="map_prop" color="c8f5bf" x="855" y="465" />
		<entity schema="public" name="marker" color="f5ddbf" x="1290" y="1035" />
		<entity schema="public" name="marker_group" color="bfd4f5" x="1455" y="150" />
		<entity schema="public" name="marker_prop" color="c8f5bf" x="885" y="1035" />
		<entity schema="public" name="platform" color="f5ddbf" x="1455" y="1035" />
		<entity schema="public" name="platform_prop" color="f5ddbf" x="1455" y="1335" />
		<entity schema="public" name="project" color="bfbff5" x="465" y="1035" />
		<entity schema="public" name="project_prop" color="bfbff5" x="270" y="1350" />
		<entity schema="public" name="reference" color="c8f5bf" x="885" y="1245" />
		<entity schema="public" name="role" color="bfd4f5" x="1455" y="405" />
		<entity schema="public" name="display" color="bfd4f5" x="1290" y="405" />
		<entity schema="public" name="variant" color="f5ddbf" x="1290" y="1335" />
		<group name="dnarun" color="f7f4f0" >
			<entity schema="public" name="dnarun" />
			<entity schema="public" name="dataset" />
			<entity schema="public" name="dataset_dnarun" />
			<entity schema="public" name="dnarun_prop" />
		</group>
		<group name="experiment" color="f0f3f7" >
			<entity schema="public" name="experiment" />
			<entity schema="public" name="manifest" />
		</group>
		<group name="marker" color="f7f4f0" >
			<entity schema="public" name="marker" />
			<entity schema="public" name="platform" />
			<entity schema="public" name="platform_prop" />
			<entity schema="public" name="variant" />
		</group>
		<group name="dataset_marker" color="f1f7f0" >
			<entity schema="public" name="dataset_marker" />
			<entity schema="public" name="marker_prop" />
			<entity schema="public" name="reference" />
		</group>
		<group name="dnasample" color="f0f0f7" >
			<entity schema="public" name="dnasample" />
			<entity schema="public" name="project" />
			<entity schema="public" name="dnasample_prop" />
			<entity schema="public" name="project_prop" />
		</group>
		<group name="germplasm" color="f3f0f7" >
			<entity schema="public" name="germplasm" />
			<entity schema="public" name="cv" />
			<entity schema="public" name="analysis" />
			<entity schema="public" name="germplasm_prop" />
		</group>
		<group name="map" color="f1f7f0" >
			<entity schema="public" name="mapset" />
			<entity schema="public" name="map_prop" />
		</group>
		<group name="contact" color="f0f3f7" >
			<entity schema="public" name="contact" />
			<entity schema="public" name="marker_group" />
			<entity schema="public" name="role" />
			<entity schema="public" name="display" />
		</group>
	</layout>
	<layout id="Layout_2de8caa3" name="gobii_rice" show_relation_columns="y" >
		<comment><![CDATA[gobii_pg_erd]]></comment>
		<entity schema="public" name="dataset" color="f5ddbf" x="420" y="660" />
		<entity schema="public" name="dnarun" color="f5ddbf" x="600" y="675" />
		<entity schema="public" name="dataset_dnarun" color="f5ddbf" x="600" y="825" />
		<entity schema="public" name="role" color="bfd4f5" x="570" y="1050" />
		<entity schema="public" name="display" color="bfd4f5" x="705" y="1035" />
		<entity schema="public" name="analysis" color="d2bff5" x="225" y="255" />
		<entity schema="public" name="experiment" color="bfd4f5" x="960" y="660" />
		<entity schema="public" name="manifest" color="bfd4f5" x="1155" y="660" />
		<entity schema="public" name="dnasample" color="bfbff5" x="45" y="645" />
		<entity schema="public" name="project" color="bfbff5" x="45" y="990" />
		<entity schema="public" name="dataset_marker" color="f3e1a9" x="825" y="435" />
		<entity schema="public" name="variant" color="f5ddbf" x="1020" y="375" />
		<entity schema="public" name="marker" color="f5ddbf" x="1020" y="75" />
		<entity schema="public" name="germplasm_prop" color="d2bff5" x="45" y="330" />
		<entity schema="public" name="map_prop" color="c8f5bf" x="450" y="480" />
		<entity schema="public" name="marker_prop" color="ffcc99" x="840" y="120" />
		<entity schema="public" name="platform_prop" color="00cbff" x="1200" y="465" />
		<entity schema="public" name="dnasample_prop" color="bfbff5" x="225" y="690" />
		<entity schema="public" name="dnarun_prop" color="f5ddbf" x="750" y="765" />
		<entity schema="public" name="project_prop" color="bfbff5" x="195" y="1020" />
		<entity schema="public" name="linkage_group" color="b7c8e3" x="660" y="390" />
		<entity schema="public" name="marker_linkage_group" color="b7c8e3" x="630" y="225" />
		<entity schema="public" name="reference" color="ffcccc" x="375" y="45" />
		<entity schema="public" name="mapset" color="c8f5bf" x="450" y="225" />
		<entity schema="public" name="cv" color="ccccff" x="495" y="45" />
		<entity schema="public" name="platform" color="00cbff" x="1185" y="240" />
		<entity schema="public" name="germplasm" color="d2bff5" x="60" y="75" />
		<entity schema="public" name="marker_group" color="ffe2c6" x="825" y="225" />
		<entity schema="public" name="contact" color="bfd4f5" x="420" y="990" />
		<entity schema="public" name="organization" color="b7c8e3" x="840" y="1035" />
		<group name="dataset/dnarun" color="f7f4f0" >
			<entity schema="public" name="dnarun" />
			<entity schema="public" name="dataset" />
			<entity schema="public" name="dataset_dnarun" />
			<entity schema="public" name="dnarun_prop" />
		</group>
		<group name="experiment" color="f0f3f7" >
			<entity schema="public" name="experiment" />
			<entity schema="public" name="manifest" />
		</group>
		<group name="marker" color="f7f4f0" >
			<entity schema="public" name="marker" />
			<entity schema="public" name="variant" />
			<entity schema="public" name="marker_group" />
			<entity schema="public" name="marker_prop" />
			<entity schema="public" name="dataset_marker" />
			<entity schema="public" name="marker_linkage_group" />
			<entity schema="public" name="linkage_group" />
		</group>
		<group name="dnasample" color="f0f0f7" >
			<entity schema="public" name="dnasample" />
			<entity schema="public" name="dnasample_prop" />
		</group>
		<group name="germplasm" color="f3f0f7" >
			<entity schema="public" name="germplasm" />
			<entity schema="public" name="analysis" />
			<entity schema="public" name="germplasm_prop" />
		</group>
		<group name="map" color="f1f7f0" >
			<entity schema="public" name="mapset" />
			<entity schema="public" name="map_prop" />
		</group>
		<group name="contact" color="f0f3f7" >
			<entity schema="public" name="contact" />
			<entity schema="public" name="role" />
			<entity schema="public" name="display" />
			<entity schema="public" name="organization" />
		</group>
		<group name="project" color="c4e0f9" >
			<entity schema="public" name="project" />
			<entity schema="public" name="project_prop" />
		</group>
		<group name="platform" color="c4e0f9" >
			<entity schema="public" name="platform" />
			<entity schema="public" name="platform_prop" />
		</group>
		<browser id="Browse_34447fbd" name="cv" >
			<browse_table schema="public" entity="cv" x="10" y="10" width="645" height="346" />
		</browser>
		<browser id="Browse_34fbf0b6" name="germplasm" >
			<browse_table schema="public" entity="germplasm" x="10" y="10" width="451" height="347" />
		</browser>
		<browser id="Browse_e08c457" name="platform" >
			<browse_table schema="public" entity="platform" x="10" y="10" width="655" height="341" />
		</browser>
	</layout>
</project>