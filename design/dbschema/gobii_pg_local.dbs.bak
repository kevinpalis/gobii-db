<?xml version="1.0" encoding="UTF-8" ?>
<project name="PostgreSQL" id="Project_9eb9ac6" database="PostgreSQL" >
	<schema name="information_schema" catalogname="gobii_erd" >
		<procedure name="_pg_char_max_length" id="Procedure_15850f2" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_char_max_length SELECT
  CASE WHEN $2 = -1 /* default typmod */
       THEN null
       WHEN $1 IN (1042, 1043) /* char, varchar */
       THEN $2 - 4
       WHEN $1 IN (1560, 1562) /* bit, varbit */
       THEN $2
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_char_octet_length" id="Procedure_1714313" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_char_octet_length SELECT
  CASE WHEN $1 IN (25, 1042, 1043) /* text, char, varchar */
       THEN CASE WHEN $2 = -1 /* default typmod */
                 THEN CAST(2^30 AS integer)
                 ELSE information_schema._pg_char_max_length($1, $2) *
                      pg_catalog.pg_encoding_max_length((SELECT encoding FROM pg_catalog.pg_database WHERE datname = pg_catalog.current_database()))
            END
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_datetime_precision" id="Procedure_4b7dd2b" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_datetime_precision SELECT
  CASE WHEN $1 IN (1082) /* date */
           THEN 0
       WHEN $1 IN (1083, 1114, 1184, 1266) /* time, timestamp, same + tz */
           THEN CASE WHEN $2 < 0 THEN 6 ELSE $2 END
       WHEN $1 IN (1186) /* interval */
           THEN CASE WHEN $2 < 0 OR $2 & 65535 = 65535 THEN 6 ELSE $2 & 65535 END
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_expandarray" id="Procedure_44f36c7" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_expandarray select $1[s], s - pg_catalog.array_lower($1,1) + 1
        from pg_catalog.generate_series(pg_catalog.array_lower($1,1),
                                        pg_catalog.array_upper($1,1),
                                        1) as g(s)]]></string>
		</procedure>
		<procedure name="_pg_index_position" id="Procedure_31e01b9" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_index_position 
SELECT (ss.a).n FROM
  (SELECT information_schema._pg_expandarray(indkey) AS a
   FROM pg_catalog.pg_index WHERE indexrelid = $1) ss
  WHERE (ss.a).x = $2;
]]></string>
		</procedure>
		<procedure name="_pg_interval_type" id="Procedure_485d894" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_interval_type SELECT
  CASE WHEN $1 IN (1186) /* interval */
           THEN upper(substring(format_type($1, $2) from 'interval[()0-9]* #"%#"' for '#'))
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_keysequal" id="Procedure_567e8cd" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_keysequal select $1 operator(pg_catalog.<@) $2 and $2 operator(pg_catalog.<@) $1]]></string>
		</procedure>
		<procedure name="_pg_numeric_precision" id="Procedure_7268f8" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_numeric_precision SELECT
  CASE $1
         WHEN 21 /*int2*/ THEN 16
         WHEN 23 /*int4*/ THEN 32
         WHEN 20 /*int8*/ THEN 64
         WHEN 1700 /*numeric*/ THEN
              CASE WHEN $2 = -1
                   THEN null
                   ELSE (($2 - 4) >> 16) & 65535
                   END
         WHEN 700 /*float4*/ THEN 24 /*FLT_MANT_DIG*/
         WHEN 701 /*float8*/ THEN 53 /*DBL_MANT_DIG*/
         ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_numeric_precision_radix" id="Procedure_397ca2f" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_numeric_precision_radix SELECT
  CASE WHEN $1 IN (21, 23, 20, 700, 701) THEN 2
       WHEN $1 IN (1700) THEN 10
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_numeric_scale" id="Procedure_3ec6532" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_numeric_scale SELECT
  CASE WHEN $1 IN (21, 23, 20) THEN 0
       WHEN $1 IN (1700) THEN
            CASE WHEN $2 = -1
                 THEN null
                 ELSE ($2 - 4) & 65535
                 END
       ELSE null
  END]]></string>
		</procedure>
		<procedure name="_pg_truetypid" id="Procedure_81fb12" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_truetypid SELECT CASE WHEN $2.typtype = 'd' THEN $2.typbasetype ELSE $1.atttypid END]]></string>
		</procedure>
		<procedure name="_pg_truetypmod" id="Procedure_49cf65d" isSystem="false" params_known="n" >
			<string><![CDATA[create function _pg_truetypmod SELECT CASE WHEN $2.typtype = 'd' THEN $2.typtypmod ELSE $1.atttypmod END]]></string>
		</procedure>
	</schema>
	<schema name="pg_catalog" catalogname="gobii_erd" >
		<procedure name="RI_FKey_cascade_del" id="Procedure_3635e24" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_cascade_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE CASCADE]]></comment>
		</procedure>
		<procedure name="RI_FKey_cascade_upd" id="Procedure_21941c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_cascade_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE CASCADE]]></comment>
		</procedure>
		<procedure name="RI_FKey_check_ins" id="Procedure_b3b09f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_ins"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_check_ins$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</procedure>
		<procedure name="RI_FKey_check_upd" id="Procedure_2276385" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_check_upd$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</procedure>
		<procedure name="RI_FKey_noaction_del" id="Procedure_45c524b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_noaction_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE NO ACTION]]></comment>
		</procedure>
		<procedure name="RI_FKey_noaction_upd" id="Procedure_557f7b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_noaction_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE NO ACTION]]></comment>
		</procedure>
		<procedure name="RI_FKey_restrict_del" id="Procedure_47e1e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_restrict_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE RESTRICT]]></comment>
		</procedure>
		<procedure name="RI_FKey_restrict_upd" id="Procedure_4a83619" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_restrict_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE RESTRICT]]></comment>
		</procedure>
		<procedure name="RI_FKey_setdefault_del" id="Procedure_7ec44d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setdefault_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET DEFAULT]]></comment>
		</procedure>
		<procedure name="RI_FKey_setdefault_upd" id="Procedure_2680712" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setdefault_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET DEFAULT]]></comment>
		</procedure>
		<procedure name="RI_FKey_setnull_del" id="Procedure_1455cd3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setnull_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET NULL]]></comment>
		</procedure>
		<procedure name="RI_FKey_setnull_upd" id="Procedure_176da56" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setnull_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET NULL]]></comment>
		</procedure>
		<procedure name="abbrev" id="Procedure_45ee892" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abbrev(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_abbrev$function$
]]></string>
			<comment><![CDATA[abbreviated display of inet value]]></comment>
		</procedure>
		<procedure name="abbrev" id="Procedure_8915f7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abbrev(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_abbrev$function$
]]></string>
			<comment><![CDATA[abbreviated display of inet value]]></comment>
			<input_param name="$1" jt="1111" type="inet" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="abs" id="Procedure_2423735" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</procedure>
		<procedure name="abs" id="Procedure_415bf21" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
			<input_param name="$1" jt="7" type="float4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="abs" id="Procedure_188ffc8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
			<input_param name="$1" jt="7" type="float4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="abs" id="Procedure_1ba9e28" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
			<input_param name="$1" jt="7" type="float4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="abs" id="Procedure_398cc3c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
			<input_param name="$1" jt="7" type="float4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="abs" id="Procedure_189a769" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
			<input_param name="$1" jt="7" type="float4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="abstime" id="Procedure_28beffd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp with time zone)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_abstime$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to abstime]]></comment>
		</procedure>
		<procedure name="abstime" id="Procedure_157a8d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp with time zone)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_abstime$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to abstime]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="1111" type="abstime" />
		</procedure>
		<procedure name="abstimeeq" id="Procedure_5ae57c2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimeeq(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="abstimege" id="Procedure_2ed8692" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimege(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="abstimegt" id="Procedure_2b78959" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimegt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="abstimein" id="Procedure_244cc5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimein(cstring)
 RETURNS abstime
 LANGUAGE internal
 STABLE STRICT
AS $function$abstimein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="abstimele" id="Procedure_3f513ef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimele(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="abstimelt" id="Procedure_495f734" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimelt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="abstimene" id="Procedure_5b882e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimene(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="abstimeout" id="Procedure_3f2ec23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimeout(abstime)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$abstimeout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="abstimerecv" id="Procedure_5ddc6e5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimerecv(internal)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="abstimesend" id="Procedure_2b5a719" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimesend(abstime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="aclcontains" id="Procedure_fe9884" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclcontains(aclitem[], aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclcontains$function$
]]></string>
			<comment><![CDATA[contains]]></comment>
		</procedure>
		<procedure name="acldefault" id="Procedure_2341f76" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acldefault("char", oid)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$acldefault_sql$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</procedure>
		<procedure name="aclexplode" id="Procedure_3fea373" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclexplode(acl aclitem[], OUT grantor oid, OUT grantee oid, OUT privilege_type text, OUT is_grantable boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT ROWS 10
AS $function$aclexplode$function$
]]></string>
			<comment><![CDATA[convert ACL item array to table, for use by information schema]]></comment>
		</procedure>
		<procedure name="aclinsert" id="Procedure_c70842" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclinsert(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclinsert$function$
]]></string>
			<comment><![CDATA[add/update ACL item]]></comment>
		</procedure>
		<procedure name="aclitemeq" id="Procedure_cb8fb3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclitemeq(aclitem, aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclitem_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="aclitemin" id="Procedure_1b914be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclitemin(cstring)
 RETURNS aclitem
 LANGUAGE internal
 STABLE STRICT
AS $function$aclitemin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="aclitemout" id="Procedure_1f767a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclitemout(aclitem)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$aclitemout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="aclremove" id="Procedure_49b5277" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclremove(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclremove$function$
]]></string>
			<comment><![CDATA[remove ACL item]]></comment>
		</procedure>
		<procedure name="acos" id="Procedure_3a4b26c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dacos$function$
]]></string>
			<comment><![CDATA[arccosine]]></comment>
		</procedure>
		<procedure name="age" id="Procedure_57dfbf2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</procedure>
		<procedure name="age" id="Procedure_16186c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
			<input_param name="$1" jt="1111" type="xid" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="age" id="Procedure_5226cc3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
			<input_param name="$1" jt="1111" type="xid" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="age" id="Procedure_4c47136" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
			<input_param name="$1" jt="1111" type="xid" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="age" id="Procedure_5091fb9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
			<input_param name="$1" jt="1111" type="xid" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="any_in" id="Procedure_48fd126" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.any_in(cstring)
 RETURNS "any"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$any_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="any_out" id="Procedure_46d47b2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.any_out("any")
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$any_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyarray_in" id="Procedure_33542e2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_in(cstring)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anyarray_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyarray_out" id="Procedure_53bf9d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_out(anyarray)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$anyarray_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyarray_recv" id="Procedure_5cf90" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_recv(internal)
 RETURNS anyarray
 LANGUAGE internal
 STABLE STRICT
AS $function$anyarray_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyarray_send" id="Procedure_419e2a2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$anyarray_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyelement_in" id="Procedure_58fffdb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyelement_in(cstring)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anyelement_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyelement_out" id="Procedure_1ec10db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyelement_out(anyelement)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anyelement_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyenum_in" id="Procedure_53d7967" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyenum_in(cstring)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anyenum_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyenum_out" id="Procedure_20123b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyenum_out(anyenum)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$anyenum_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anynonarray_in" id="Procedure_41d2b11" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anynonarray_in(cstring)
 RETURNS anynonarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anynonarray_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anynonarray_out" id="Procedure_2ba7c90" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anynonarray_out(anynonarray)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$anynonarray_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyrange_in" id="Procedure_5c34b8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyrange_in(cstring, oid, integer)
 RETURNS anyrange
 LANGUAGE internal
 STABLE STRICT
AS $function$anyrange_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anyrange_out" id="Procedure_2c2fb5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyrange_out(anyrange)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$anyrange_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="anytextcat" id="Procedure_3cd130b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anytextcat(anynonarray, text)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $1::pg_catalog.text || $2$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="area" id="Procedure_19bbc20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
		</procedure>
		<procedure name="area" id="Procedure_597c4be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="area" id="Procedure_6e8d33" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="areajoinsel" id="Procedure_13cf095" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areajoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$areajoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for area-comparison operators]]></comment>
		</procedure>
		<procedure name="areasel" id="Procedure_2e6a74b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areasel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$areasel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for area-comparison operators]]></comment>
		</procedure>
		<procedure name="array_agg_array_finalfn" id="Procedure_7f6cea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_array_finalfn(internal, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_array_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="array_agg_array_transfn" id="Procedure_3bef9a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_array_transfn(internal, anyarray)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_array_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="array_agg_finalfn" id="Procedure_5334009" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_finalfn(internal, anynonarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="array_agg_transfn" id="Procedure_2322a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_transfn(internal, anynonarray)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="array_append" id="Procedure_99885a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_append(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_append$function$
]]></string>
			<comment><![CDATA[append element onto end of array]]></comment>
		</procedure>
		<procedure name="array_cat" id="Procedure_5da81d1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_cat(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_cat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="array_dims" id="Procedure_3054afa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_dims(anyarray)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_dims$function$
]]></string>
			<comment><![CDATA[array dimensions]]></comment>
		</procedure>
		<procedure name="array_eq" id="Procedure_4df1b48" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_eq(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="array_fill" id="Procedure_4f8b333" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_fill$function$
]]></string>
			<comment><![CDATA[array constructor with value]]></comment>
		</procedure>
		<procedure name="array_fill" id="Procedure_30bf5f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_fill$function$
]]></string>
			<comment><![CDATA[array constructor with value]]></comment>
			<input_param name="$1" jt="1111" type="anyelement" />
			<input_param name="$2" jt="2003" type="_int4" />
			<result_param name="returnValue" jt="1111" type="anyarray" />
		</procedure>
		<procedure name="array_ge" id="Procedure_40d2e2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ge(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="array_gt" id="Procedure_37ec68" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_gt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="array_in" id="Procedure_2d43e9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_in(cstring, oid, integer)
 RETURNS anyarray
 LANGUAGE internal
 STABLE STRICT
AS $function$array_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="array_larger" id="Procedure_22fadb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_larger(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="array_le" id="Procedure_c50f02" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_le(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="array_length" id="Procedure_4e3e484" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_length(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_length$function$
]]></string>
			<comment><![CDATA[array length]]></comment>
		</procedure>
		<procedure name="array_lower" id="Procedure_2a78913" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lower(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_lower$function$
]]></string>
			<comment><![CDATA[array lower dimension]]></comment>
		</procedure>
		<procedure name="array_lt" id="Procedure_151c3b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="array_ndims" id="Procedure_5814093" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ndims(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ndims$function$
]]></string>
			<comment><![CDATA[number of array dimensions]]></comment>
		</procedure>
		<procedure name="array_ne" id="Procedure_30bac3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ne(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="array_out" id="Procedure_3250b9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_out(anyarray)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$array_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="array_position" id="Procedure_631b62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE
AS $function$array_position$function$
]]></string>
			<comment><![CDATA[returns an offset of value in array]]></comment>
		</procedure>
		<procedure name="array_position" id="Procedure_219d015" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_position(anyarray, anyelement)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE
AS $function$array_position$function$
]]></string>
			<comment><![CDATA[returns an offset of value in array]]></comment>
			<input_param name="$1" jt="1111" type="anyarray" />
			<input_param name="$2" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="array_positions" id="Procedure_5e6c854" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_positions(anyarray, anyelement)
 RETURNS integer[]
 LANGUAGE internal
 IMMUTABLE
AS $function$array_positions$function$
]]></string>
			<comment><![CDATA[returns an array of offsets of some value in array]]></comment>
		</procedure>
		<procedure name="array_prepend" id="Procedure_1141f5d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_prepend(anyelement, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_prepend$function$
]]></string>
			<comment><![CDATA[prepend element onto front of array]]></comment>
		</procedure>
		<procedure name="array_recv" id="Procedure_525c444" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_recv(internal, oid, integer)
 RETURNS anyarray
 LANGUAGE internal
 STABLE STRICT
AS $function$array_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="array_remove" id="Procedure_3325f24" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_remove(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_remove$function$
]]></string>
			<comment><![CDATA[remove any occurrences of an element from an array]]></comment>
		</procedure>
		<procedure name="array_replace" id="Procedure_11f81f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_replace(anyarray, anyelement, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_replace$function$
]]></string>
			<comment><![CDATA[replace any occurrences of an element in an array]]></comment>
		</procedure>
		<procedure name="array_send" id="Procedure_207d866" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$array_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="array_smaller" id="Procedure_4c011d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_smaller(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="array_to_json" id="Procedure_7ec48d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$array_to_json$function$
]]></string>
			<comment><![CDATA[map array to json]]></comment>
		</procedure>
		<procedure name="array_to_json" id="Procedure_49a334" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$array_to_json$function$
]]></string>
			<comment><![CDATA[map array to json]]></comment>
			<input_param name="$1" jt="1111" type="anyarray" />
			<result_param name="returnValue" jt="1111" type="json" />
		</procedure>
		<procedure name="array_to_string" id="Procedure_52c2910" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text, text)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$array_to_text_null$function$
]]></string>
			<comment><![CDATA[concatenate array elements, using delimiter and null string, into text]]></comment>
		</procedure>
		<procedure name="array_to_string" id="Procedure_4181f9d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text, text)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$array_to_text_null$function$
]]></string>
			<comment><![CDATA[concatenate array elements, using delimiter and null string, into text]]></comment>
			<input_param name="$1" jt="1111" type="anyarray" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="array_typanalyze" id="Procedure_5e386a5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$array_typanalyze$function$
]]></string>
			<comment><![CDATA[array typanalyze]]></comment>
		</procedure>
		<procedure name="array_upper" id="Procedure_479f648" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_upper(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_upper$function$
]]></string>
			<comment><![CDATA[array upper dimension]]></comment>
		</procedure>
		<procedure name="arraycontained" id="Procedure_143c27e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontained(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arraycontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="arraycontains" id="Procedure_58eb40b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontains(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arraycontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="arraycontjoinsel" id="Procedure_1f014e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$arraycontjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for array-containment operators]]></comment>
		</procedure>
		<procedure name="arraycontsel" id="Procedure_1c03b70" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$arraycontsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for array-containment operators]]></comment>
		</procedure>
		<procedure name="arrayoverlap" id="Procedure_5c2b27e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arrayoverlap(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arrayoverlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="ascii" id="Procedure_3caed38" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ascii$function$
]]></string>
			<comment><![CDATA[convert first char to int4]]></comment>
		</procedure>
		<procedure name="ascii_to_mic" id="Procedure_2d95d83" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/ascii_and_mic', $function$ascii_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="ascii_to_utf8" id="Procedure_42c7802" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_ascii', $function$ascii_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to UTF8]]></comment>
		</procedure>
		<procedure name="asin" id="Procedure_a4f708" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.asin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dasin$function$
]]></string>
			<comment><![CDATA[arcsine]]></comment>
		</procedure>
		<procedure name="atan" id="Procedure_37ced77" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datan$function$
]]></string>
			<comment><![CDATA[arctangent]]></comment>
		</procedure>
		<procedure name="atan2" id="Procedure_259a4c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan2(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datan2$function$
]]></string>
			<comment><![CDATA[arctangent, two arguments]]></comment>
		</procedure>
		<procedure name="bernoulli" id="Procedure_5bf292e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bernoulli(internal)
 RETURNS tsm_handler
 LANGUAGE internal
 STRICT
AS $function$tsm_bernoulli_handler$function$
]]></string>
			<comment><![CDATA[BERNOULLI tablesample method handler]]></comment>
		</procedure>
		<procedure name="big5_to_euc_tw" id="Procedure_3d0da3d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to EUC_TW]]></comment>
		</procedure>
		<procedure name="big5_to_mic" id="Procedure_4b3a71b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="big5_to_utf8" id="Procedure_216139c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_big5', $function$big5_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to UTF8]]></comment>
		</procedure>
		<procedure name="binary_upgrade_create_empty_extension" id="Procedure_21b0de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_create_empty_extension(text, text, boolean, text, oid[], text[], text[])
 RETURNS void
 LANGUAGE internal
AS $function$binary_upgrade_create_empty_extension$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_array_pg_type_oid" id="Procedure_2beea3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_array_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_array_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_heap_pg_class_oid" id="Procedure_1ca4141" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_heap_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_heap_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_index_pg_class_oid" id="Procedure_150d15a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_index_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_index_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_pg_authid_oid" id="Procedure_1f60621" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_authid_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_pg_authid_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_pg_enum_oid" id="Procedure_39c1152" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_enum_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_pg_enum_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_pg_type_oid" id="Procedure_174fdbe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_toast_pg_class_oid" id="Procedure_15d65a8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_toast_pg_class_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_toast_pg_class_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="binary_upgrade_set_next_toast_pg_type_oid" id="Procedure_d19269" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.binary_upgrade_set_next_toast_pg_type_oid(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$binary_upgrade_set_next_toast_pg_type_oid$function$
]]></string>
			<comment><![CDATA[for use by pg_upgrade]]></comment>
		</procedure>
		<procedure name="bit" id="Procedure_2834cf8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitfromint4$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
		</procedure>
		<procedure name="bit" id="Procedure_28aefa7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitfromint4$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="bit" id="Procedure_4da5783" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitfromint4$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="bit_in" id="Procedure_4bee19a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_in(cstring, oid, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bit_length" id="Procedure_24586bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
		</procedure>
		<procedure name="bit_length" id="Procedure_5beb5b3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="bit_length" id="Procedure_4bc4935" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="bit_out" id="Procedure_3cbecb7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_out(bit)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bit_recv" id="Procedure_4e17ee5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_recv(internal, oid, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bit_send" id="Procedure_3c0502c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_send(bit)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bitand" id="Procedure_5835d3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitand(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="bitcat" id="Procedure_18fd37a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcat(bit varying, bit varying)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="bitcmp" id="Procedure_3259e75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcmp(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="biteq" id="Procedure_5139310" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.biteq(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="bitge" id="Procedure_4bf357d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitge(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="bitgt" id="Procedure_1cda61e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitgt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="bitle" id="Procedure_6e0c0f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitle(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="bitlt" id="Procedure_35715b1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitlt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="bitne" id="Procedure_3956207" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitne(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="bitnot" id="Procedure_5bbf445" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitnot(bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="bitor" id="Procedure_5c6d1f0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="bitshiftleft" id="Procedure_1e6f9e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftleft(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitshiftleft$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="bitshiftright" id="Procedure_2f1902c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftright(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitshiftright$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="bittypmodin" id="Procedure_56fc2aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="bittypmodout" id="Procedure_1d53aa9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bittypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="bitxor" id="Procedure_29c7b75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitxor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitxor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="bool" id="Procedure_23036ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool(integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_bool$function$
]]></string>
			<comment><![CDATA[convert int4 to boolean]]></comment>
		</procedure>
		<procedure name="bool_accum" id="Procedure_2202816" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bool_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="bool_accum_inv" id="Procedure_108ad5f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum_inv(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bool_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="bool_alltrue" id="Procedure_a06be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_alltrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bool_alltrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="bool_anytrue" id="Procedure_3463b98" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_anytrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bool_anytrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="booland_statefunc" id="Procedure_1f8ddbb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booland_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$booland_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="booleq" id="Procedure_2925e61" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booleq(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$booleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="boolge" id="Procedure_39893f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolge(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="boolgt" id="Procedure_19095d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolgt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="boolin" id="Procedure_34a5102" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolin(cstring)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="boolle" id="Procedure_168f6f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolle(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="boollt" id="Procedure_fdd9be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boollt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boollt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="boolne" id="Procedure_21021f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolne(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="boolor_statefunc" id="Procedure_24eff4b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolor_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolor_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="boolout" id="Procedure_568cf2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolout(boolean)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="boolrecv" id="Procedure_386e366" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolrecv(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="boolsend" id="Procedure_5f533e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolsend(boolean)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bound_box" id="Procedure_482355c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bound_box(box, box)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boxes_bound_box$function$
]]></string>
			<comment><![CDATA[bounding box of two boxes]]></comment>
		</procedure>
		<procedure name="box" id="Procedure_345f54" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$points_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</procedure>
		<procedure name="box" id="Procedure_3442773" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$points_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="box" id="Procedure_13a42ad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$points_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="box" id="Procedure_3d2961" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$points_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="1111" type="box" />
		</procedure>
		<procedure name="box_above" id="Procedure_5e43942" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</procedure>
		<procedure name="box_above_eq" id="Procedure_994d27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_above_eq$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</procedure>
		<procedure name="box_add" id="Procedure_2e3c1b3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_add(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="box_below" id="Procedure_19dc56b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</procedure>
		<procedure name="box_below_eq" id="Procedure_90baf0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_below_eq$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</procedure>
		<procedure name="box_center" id="Procedure_54f8093" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="box_contain" id="Procedure_1c257ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="box_contain_pt" id="Procedure_1c2e1eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain_pt(box, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="box_contained" id="Procedure_1c2ec55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contained(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="box_distance" id="Procedure_34b9fa6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_distance(box, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="box_div" id="Procedure_4d9ebd9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_div(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="box_eq" id="Procedure_31524ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="box_ge" id="Procedure_5da30ed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_ge(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="box_gt" id="Procedure_4391c6b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_gt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="box_in" id="Procedure_bb2805" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_in(cstring)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="box_intersect" id="Procedure_2f5c779" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_intersect(box, box)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_intersect$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="box_le" id="Procedure_177b573" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_le(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="box_left" id="Procedure_3526b5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_left(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="box_lt" id="Procedure_16c7396" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_lt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="box_mul" id="Procedure_38e237b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_mul(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="box_out" id="Procedure_54f5535" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_out(box)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="box_overabove" id="Procedure_54f1d4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overabove(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</procedure>
		<procedure name="box_overbelow" id="Procedure_9b13e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overbelow(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</procedure>
		<procedure name="box_overlap" id="Procedure_1aecfb2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overlap(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="box_overleft" id="Procedure_4f0cf37" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overleft(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</procedure>
		<procedure name="box_overright" id="Procedure_542ef2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overright(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</procedure>
		<procedure name="box_recv" id="Procedure_39fade3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_recv(internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="box_right" id="Procedure_54c60ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_right(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="box_same" id="Procedure_482861b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_same(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</procedure>
		<procedure name="box_send" id="Procedure_390d3b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_send(box)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="box_sub" id="Procedure_430aa8a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_sub(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="bpchar" id="Procedure_2711eeb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
		</procedure>
		<procedure name="bpchar" id="Procedure_157ffa8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<result_param name="returnValue" jt="1" type="bpchar" />
		</procedure>
		<procedure name="bpchar" id="Procedure_5789896" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<result_param name="returnValue" jt="1" type="bpchar" />
		</procedure>
		<procedure name="bpchar_larger" id="Procedure_4a3fb5d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_larger(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="bpchar_pattern_ge" id="Procedure_118e071" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_ge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</procedure>
		<procedure name="bpchar_pattern_gt" id="Procedure_2f02056" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_gt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</procedure>
		<procedure name="bpchar_pattern_le" id="Procedure_48dfe29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_le(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</procedure>
		<procedure name="bpchar_pattern_lt" id="Procedure_544b935" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_lt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</procedure>
		<procedure name="bpchar_smaller" id="Procedure_23de42f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_smaller(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="bpcharcmp" id="Procedure_4a87746" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharcmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="bpchareq" id="Procedure_5e97b7f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchareq(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bpchareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="bpcharge" id="Procedure_2fe416f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="bpchargt" id="Procedure_50e4a5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchargt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="bpchariclike" id="Procedure_4e9416c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchariclike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</procedure>
		<procedure name="bpcharicnlike" id="Procedure_954732" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</procedure>
		<procedure name="bpcharicregexeq" id="Procedure_558a891" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</procedure>
		<procedure name="bpcharicregexne" id="Procedure_43a8779" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</procedure>
		<procedure name="bpcharin" id="Procedure_4e9eced" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharin(cstring, oid, integer)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bpcharle" id="Procedure_456386e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharle(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="bpcharlike" id="Procedure_1af2677" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</procedure>
		<procedure name="bpcharlt" id="Procedure_32371f0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="bpcharne" id="Procedure_1462806" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharne(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bpcharne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="bpcharnlike" id="Procedure_476fd86" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</procedure>
		<procedure name="bpcharout" id="Procedure_1eb347b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharout(character)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bpcharrecv" id="Procedure_13c56eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharrecv(internal, oid, integer)
 RETURNS character
 LANGUAGE internal
 STABLE STRICT
AS $function$bpcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bpcharregexeq" id="Procedure_4f082cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="bpcharregexne" id="Procedure_d7b728" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</procedure>
		<procedure name="bpcharsend" id="Procedure_435a423" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharsend(character)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$bpcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bpchartypmodin" id="Procedure_53f73f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="bpchartypmodout" id="Procedure_2578fcb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchartypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchartypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="brin_inclusion_add_value" id="Procedure_c9df8c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_inclusion_add_value$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</procedure>
		<procedure name="brin_inclusion_consistent" id="Procedure_4e35746" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_consistent(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_inclusion_consistent$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</procedure>
		<procedure name="brin_inclusion_opcinfo" id="Procedure_4ff5f28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_opcinfo(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_inclusion_opcinfo$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</procedure>
		<procedure name="brin_inclusion_union" id="Procedure_28f4d39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_inclusion_union(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_inclusion_union$function$
]]></string>
			<comment><![CDATA[BRIN inclusion support]]></comment>
		</procedure>
		<procedure name="brin_minmax_add_value" id="Procedure_49fd392" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_add_value(internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_minmax_add_value$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</procedure>
		<procedure name="brin_minmax_consistent" id="Procedure_471ffc1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_consistent(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_minmax_consistent$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</procedure>
		<procedure name="brin_minmax_opcinfo" id="Procedure_5205960" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_opcinfo(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_minmax_opcinfo$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</procedure>
		<procedure name="brin_minmax_union" id="Procedure_5dc6537" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_minmax_union(internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$brin_minmax_union$function$
]]></string>
			<comment><![CDATA[BRIN minmax support]]></comment>
		</procedure>
		<procedure name="brin_summarize_new_values" id="Procedure_2732925" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brin_summarize_new_values(regclass)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$brin_summarize_new_values$function$
]]></string>
			<comment><![CDATA[brin: standalone scan new table pages]]></comment>
		</procedure>
		<procedure name="brinbeginscan" id="Procedure_aa0b20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$brinbeginscan$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinbuild" id="Procedure_2da1b69" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$brinbuild$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinbuildempty" id="Procedure_4aab99d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brinbuildempty$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinbulkdelete" id="Procedure_422766d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$brinbulkdelete$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brincostestimate" id="Procedure_3317dd8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brincostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brincostestimate$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinendscan" id="Procedure_122962" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brinendscan$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="bringetbitmap" id="Procedure_44ab2d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bringetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$bringetbitmap$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brininsert" id="Procedure_d930b2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brininsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$brininsert$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinmarkpos" id="Procedure_4050902" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brinmarkpos$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinoptions" id="Procedure_284f7f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$brinoptions$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinrescan" id="Procedure_49f3a3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brinrescan$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinrestrpos" id="Procedure_252caf4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$brinrestrpos$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="brinvacuumcleanup" id="Procedure_b8d89e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.brinvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$brinvacuumcleanup$function$
]]></string>
			<comment><![CDATA[brin(internal)]]></comment>
		</procedure>
		<procedure name="broadcast" id="Procedure_1eace8c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.broadcast(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_broadcast$function$
]]></string>
			<comment><![CDATA[broadcast address of network]]></comment>
		</procedure>
		<procedure name="btabstimecmp" id="Procedure_4995396" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btabstimecmp(abstime, abstime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btabstimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btarraycmp" id="Procedure_377a385" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btarraycmp(anyarray, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btarraycmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btbeginscan" id="Procedure_3fb74d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbeginscan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btboolcmp" id="Procedure_4137551" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btboolcmp(boolean, boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btboolcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btbpchar_pattern_cmp" id="Procedure_373940b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbpchar_pattern_cmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btbpchar_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btbuild" id="Procedure_3a8554b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbuild$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btbuildempty" id="Procedure_40bafd0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btbuildempty$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btbulkdelete" id="Procedure_8c991a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbulkdelete$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btcanreturn" id="Procedure_3ea906b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcanreturn(internal, integer)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$btcanreturn$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btcharcmp" id="Procedure_e19762" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcharcmp("char", "char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btcostestimate" id="Procedure_3716810" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btcostestimate$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btendscan" id="Procedure_36dcdb5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btendscan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btfloat48cmp" id="Procedure_555275" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat48cmp(real, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btfloat4cmp" id="Procedure_395e23a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4cmp(real, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btfloat4sortsupport" id="Procedure_43cda55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btfloat84cmp" id="Procedure_21fe286" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat84cmp(double precision, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btfloat8cmp" id="Procedure_18f0716" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8cmp(double precision, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btfloat8sortsupport" id="Procedure_343988f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btgetbitmap" id="Procedure_7c7186" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$btgetbitmap$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btgettuple" id="Procedure_78a7e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$btgettuple$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btinsert" id="Procedure_309591e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$btinsert$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btint24cmp" id="Procedure_14ee3aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint24cmp(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint24cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint28cmp" id="Procedure_43ef73d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint28cmp(smallint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint28cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint2cmp" id="Procedure_1f1ab14" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2cmp(smallint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint2cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint2sortsupport" id="Procedure_2acc24d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint2sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btint42cmp" id="Procedure_5dabe9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint42cmp(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint42cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint48cmp" id="Procedure_3d429c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint48cmp(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint4cmp" id="Procedure_2fa067d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4cmp(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint4sortsupport" id="Procedure_1b0ba90" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btint82cmp" id="Procedure_312e46e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint82cmp(bigint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint82cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint84cmp" id="Procedure_4d21eaa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint84cmp(bigint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint8cmp" id="Procedure_23bf3bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8cmp(bigint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btint8sortsupport" id="Procedure_499b1dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btmarkpos" id="Procedure_2e90f7d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btmarkpos$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btnamecmp" id="Procedure_1e77e7c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamecmp(name, name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btnamecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btnamesortsupport" id="Procedure_55edfae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamesortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btnamesortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btoidcmp" id="Procedure_43ad402" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidcmp(oid, oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btoidsortsupport" id="Procedure_11860d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidsortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidsortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="btoidvectorcmp" id="Procedure_52e8bf3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidvectorcmp(oidvector, oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidvectorcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btoptions" id="Procedure_565815" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$btoptions$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btrecordcmp" id="Procedure_4a7b94b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordcmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrecordcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btrecordimagecmp" id="Procedure_1800e35" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordimagecmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrecordimagecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater based on byte images]]></comment>
		</procedure>
		<procedure name="btreltimecmp" id="Procedure_1d158b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btreltimecmp(reltime, reltime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btreltimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btrescan" id="Procedure_4f7184a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btrescan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btrestrpos" id="Procedure_55e48ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btrestrpos$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="btrim" id="Procedure_3eec175" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteatrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
		</procedure>
		<procedure name="btrim" id="Procedure_3858ec1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteatrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="btrim" id="Procedure_2988093" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteatrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="bttext_pattern_cmp" id="Procedure_28fe06e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttext_pattern_cmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttext_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="bttextcmp" id="Procedure_fbb103" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttextcmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttextcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="bttextsortsupport" id="Procedure_41056d0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttextsortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttextsortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="bttidcmp" id="Procedure_4fde963" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttidcmp(tid, tid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="bttintervalcmp" id="Procedure_55381be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttintervalcmp(tinterval, tinterval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttintervalcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="btvacuumcleanup" id="Procedure_4acd043" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btvacuumcleanup$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</procedure>
		<procedure name="bytea_string_agg_finalfn" id="Procedure_53b369" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_finalfn(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE
AS $function$bytea_string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="bytea_string_agg_transfn" id="Procedure_4be9837" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bytea_string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="byteacat" id="Procedure_779676" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacat(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteacat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="byteacmp" id="Procedure_220e81c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacmp(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteacmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="byteaeq" id="Procedure_564ba66" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteaeq(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteaeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="byteage" id="Procedure_173c023" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteage(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteage$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="byteagt" id="Procedure_3cf3171" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteagt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteagt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="byteain" id="Procedure_16c397c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteain(cstring)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteain$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="byteale" id="Procedure_1893234" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteale(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteale$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="bytealike" id="Procedure_31f9246" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytealike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</procedure>
		<procedure name="bytealt" id="Procedure_38af804" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bytealt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="byteane" id="Procedure_51ea8b6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteane(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteane$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="byteanlike" id="Procedure_3021513" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteanlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteanlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</procedure>
		<procedure name="byteaout" id="Procedure_4739030" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteaout(bytea)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="bytearecv" id="Procedure_205372b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytearecv(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytearecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="byteasend" id="Procedure_26aa56b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteasend(bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteasend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cardinality" id="Procedure_ac11f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cardinality(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_cardinality$function$
]]></string>
			<comment><![CDATA[array cardinality]]></comment>
		</procedure>
		<procedure name="cash_cmp" id="Procedure_308c199" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_cmp(money, money)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="cash_div_cash" id="Procedure_4f84a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_cash(money, money)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_cash$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="cash_div_flt4" id="Procedure_214a9de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_flt4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="cash_div_flt8" id="Procedure_30fa4f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_flt8$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="cash_div_int2" id="Procedure_1a07967" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_int2$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="cash_div_int4" id="Procedure_3c30ab4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_int4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="cash_eq" id="Procedure_58fe4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_eq(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="cash_ge" id="Procedure_289b875" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ge(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="cash_gt" id="Procedure_4465716" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_gt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="cash_in" id="Procedure_326a13d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_in(cstring)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$cash_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cash_le" id="Procedure_356d7b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_le(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="cash_lt" id="Procedure_af0b3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_lt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="cash_mi" id="Procedure_3bde80e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mi(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="cash_mul_flt4" id="Procedure_bb0122" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_flt4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="cash_mul_flt8" id="Procedure_1b82e20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_flt8$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="cash_mul_int2" id="Procedure_20aaa48" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_int2$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="cash_mul_int4" id="Procedure_dceb69" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_int4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="cash_ne" id="Procedure_2f7df2b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ne(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="cash_out" id="Procedure_50a5df0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_out(money)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$cash_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cash_pl" id="Procedure_14f83d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_pl(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="cash_recv" id="Procedure_292a35c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_recv(internal)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cash_send" id="Procedure_4962437" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_send(money)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cash_words" id="Procedure_546a4cf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_words(money)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_words$function$
]]></string>
			<comment><![CDATA[output money amount as words]]></comment>
		</procedure>
		<procedure name="cashlarger" id="Procedure_495b864" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashlarger(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cashlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="cashsmaller" id="Procedure_7f0033" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashsmaller(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cashsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="cbrt" id="Procedure_1ecb300" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[cube root]]></comment>
		</procedure>
		<procedure name="ceil" id="Procedure_3250d1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceil(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</procedure>
		<procedure name="ceil" id="Procedure_26b2a97" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceil(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="ceiling" id="Procedure_39c17f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceiling(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
		</procedure>
		<procedure name="ceiling" id="Procedure_5007584" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceiling(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[nearest integer >= value]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="center" id="Procedure_1955d29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</procedure>
		<procedure name="center" id="Procedure_32d8bf8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="box" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="char" id="Procedure_20d1707" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."char"(integer)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4tochar$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</procedure>
		<procedure name="char" id="Procedure_27eff2b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."char"(integer)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4tochar$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="1" type="char" />
		</procedure>
		<procedure name="char_length" id="Procedure_28da610" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.char_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</procedure>
		<procedure name="char_length" id="Procedure_405d20f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.char_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
			<input_param name="$1" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="character_length" id="Procedure_1e4d90a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.character_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</procedure>
		<procedure name="character_length" id="Procedure_33e4602" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.character_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
			<input_param name="$1" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="chareq" id="Procedure_16f0e16" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chareq("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$chareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="charge" id="Procedure_56e2a2d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charge("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="chargt" id="Procedure_2c952ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chargt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$chargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="charin" id="Procedure_671196" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charin(cstring)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="charle" id="Procedure_231bc83" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charle("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="charlt" id="Procedure_28ec95b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charlt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="charne" id="Procedure_3652a8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charne("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="charout" id="Procedure_1022c30" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charout("char")
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="charrecv" id="Procedure_213aa09" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charrecv(internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="charsend" id="Procedure_3d41f75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charsend("char")
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="chr" id="Procedure_50a0423" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chr(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$chr$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</procedure>
		<procedure name="cideq" id="Procedure_5a7d1f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cideq(cid, cid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="cidin" id="Procedure_41a7e72" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidin(cstring)
 RETURNS cid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidout" id="Procedure_2fab2d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidout(cid)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidr" id="Procedure_20bac22" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_to_cidr$function$
]]></string>
			<comment><![CDATA[convert inet to cidr]]></comment>
		</procedure>
		<procedure name="cidr_in" id="Procedure_4981c99" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_in(cstring)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidr_out" id="Procedure_89047" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_out(cidr)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidr_recv" id="Procedure_35e786b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_recv(internal)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidr_send" id="Procedure_5358af5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_send(cidr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidrecv" id="Procedure_1a4e71a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidrecv(internal)
 RETURNS cid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cidsend" id="Procedure_127d7a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidsend(cid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="circle" id="Procedure_1307165" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
		</procedure>
		<procedure name="circle" id="Procedure_3525fd1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="circle" />
		</procedure>
		<procedure name="circle" id="Procedure_4eba30b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="1111" type="circle" />
		</procedure>
		<procedure name="circle_above" id="Procedure_34c6cde" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_above(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</procedure>
		<procedure name="circle_add_pt" id="Procedure_4662454" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_add_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="circle_below" id="Procedure_1ec433" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_below(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</procedure>
		<procedure name="circle_center" id="Procedure_3dd990d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="circle_contain" id="Procedure_4eabe67" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="circle_contain_pt" id="Procedure_317f441" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain_pt(circle, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="circle_contained" id="Procedure_1e0569b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contained(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="circle_distance" id="Procedure_5c077c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_distance(circle, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="circle_div_pt" id="Procedure_1e921ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_div_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="circle_eq" id="Procedure_587ea78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_eq(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="circle_ge" id="Procedure_53360d0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ge(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="circle_gt" id="Procedure_3519217" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_gt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="circle_in" id="Procedure_3876de7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_in(cstring)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="circle_le" id="Procedure_4e4dae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_le(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="circle_left" id="Procedure_5b000c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_left(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="circle_lt" id="Procedure_1ed578e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_lt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="circle_mul_pt" id="Procedure_1f514b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_mul_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="circle_ne" id="Procedure_501e4bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ne(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="circle_out" id="Procedure_e76cc0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_out(circle)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="circle_overabove" id="Procedure_34faa87" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overabove(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</procedure>
		<procedure name="circle_overbelow" id="Procedure_2862412" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overbelow(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</procedure>
		<procedure name="circle_overlap" id="Procedure_269027b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overlap(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="circle_overleft" id="Procedure_4b9a5f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overleft(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</procedure>
		<procedure name="circle_overright" id="Procedure_29d863a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overright(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</procedure>
		<procedure name="circle_recv" id="Procedure_26b8cec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_recv(internal)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="circle_right" id="Procedure_1e74116" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_right(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="circle_same" id="Procedure_186ff62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_same(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</procedure>
		<procedure name="circle_send" id="Procedure_334ce6d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_send(circle)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="circle_sub_pt" id="Procedure_40285a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_sub_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="clock_timestamp" id="Procedure_2a96dca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.clock_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STRICT
AS $function$clock_timestamp$function$
]]></string>
			<comment><![CDATA[current clock time]]></comment>
		</procedure>
		<procedure name="close_lb" id="Procedure_6f71c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lb(line, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_lb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_ls" id="Procedure_552e369" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ls(line, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_ls$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_lseg" id="Procedure_1495ded" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lseg(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_lseg$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_pb" id="Procedure_253a34" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pb(point, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_pb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_pl" id="Procedure_507fcff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pl(point, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_pl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_ps" id="Procedure_39c79bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ps(point, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_ps$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_sb" id="Procedure_4b10674" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sb(lseg, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_sb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="close_sl" id="Procedure_2f6351" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sl(lseg, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_sl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</procedure>
		<procedure name="col_description" id="Procedure_1cf1b2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.col_description(oid, integer)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = 'pg_catalog.pg_class'::pg_catalog.regclass and objsubid = $2$function$
]]></string>
			<comment><![CDATA[get description for table column]]></comment>
		</procedure>
		<procedure name="concat" id="Procedure_4148f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat(VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_concat$function$
]]></string>
			<comment><![CDATA[concatenate values]]></comment>
		</procedure>
		<procedure name="concat_ws" id="Procedure_41b6c13" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat_ws(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_concat_ws$function$
]]></string>
			<comment><![CDATA[concatenate values with separators]]></comment>
		</procedure>
		<procedure name="contjoinsel" id="Procedure_72953d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$contjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for containment comparison operators]]></comment>
		</procedure>
		<procedure name="contsel" id="Procedure_5a73795" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$contsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for containment comparison operators]]></comment>
		</procedure>
		<procedure name="convert" id="Procedure_3a757b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert(bytea, name, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert$function$
]]></string>
			<comment><![CDATA[convert string with specified encoding names]]></comment>
		</procedure>
		<procedure name="convert_from" id="Procedure_3c98415" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_from(bytea, name)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert_from$function$
]]></string>
			<comment><![CDATA[convert string with specified source encoding name]]></comment>
		</procedure>
		<procedure name="convert_to" id="Procedure_1e2bc1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_to(text, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert_to$function$
]]></string>
			<comment><![CDATA[convert string with specified destination encoding name]]></comment>
		</procedure>
		<procedure name="cos" id="Procedure_4c8b33d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcos$function$
]]></string>
			<comment><![CDATA[cosine]]></comment>
		</procedure>
		<procedure name="cot" id="Procedure_44f1a33" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cot(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcot$function$
]]></string>
			<comment><![CDATA[cotangent]]></comment>
		</procedure>
		<procedure name="cstring_in" id="Procedure_236b4c9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cstring_in(cstring)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cstring_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cstring_out" id="Procedure_10637b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cstring_out(cstring)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cstring_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cstring_recv" id="Procedure_c55381" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cstring_recv(internal)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$cstring_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cstring_send" id="Procedure_51c0c62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cstring_send(cstring)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$cstring_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="cume_dist" id="Procedure_4d40ed2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_cume_dist$function$
]]></string>
			<comment><![CDATA[fractional row number within partition]]></comment>
		</procedure>
		<procedure name="cume_dist" id="Procedure_5f060bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_cume_dist$function$
]]></string>
			<comment><![CDATA[fractional row number within partition]]></comment>
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="cume_dist_final" id="Procedure_f556d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_cume_dist_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="current_database" id="Procedure_4c52f23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_database()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_database$function$
]]></string>
			<comment><![CDATA[name of the current database]]></comment>
		</procedure>
		<procedure name="current_query" id="Procedure_11137fc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_query()
 RETURNS text
 LANGUAGE internal
AS $function$current_query$function$
]]></string>
			<comment><![CDATA[get the currently executing query]]></comment>
		</procedure>
		<procedure name="current_schema" id="Procedure_419e54a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_schema"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_schema$function$
]]></string>
			<comment><![CDATA[current schema name]]></comment>
		</procedure>
		<procedure name="current_schemas" id="Procedure_f441bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_schemas(boolean)
 RETURNS name[]
 LANGUAGE internal
 STABLE STRICT
AS $function$current_schemas$function$
]]></string>
			<comment><![CDATA[current schema search list]]></comment>
		</procedure>
		<procedure name="current_setting" id="Procedure_2ed9779" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$show_config_by_name$function$
]]></string>
			<comment><![CDATA[SHOW X as a function]]></comment>
		</procedure>
		<procedure name="current_user" id="Procedure_4376b7f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_user"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[current user name]]></comment>
		</procedure>
		<procedure name="currtid" id="Procedure_3c8ab38" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid(oid, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byreloid$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</procedure>
		<procedure name="currtid2" id="Procedure_246cf9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid2(text, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byrelname$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</procedure>
		<procedure name="currval" id="Procedure_6f4a97" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$currval_oid$function$
]]></string>
			<comment><![CDATA[sequence current value]]></comment>
		</procedure>
		<procedure name="cursor_to_xml" id="Procedure_62c266" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xml(cursor refcursor, count integer, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$cursor_to_xml$function$
]]></string>
			<comment><![CDATA[map rows from cursor to XML]]></comment>
		</procedure>
		<procedure name="cursor_to_xmlschema" id="Procedure_166b106" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$cursor_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map cursor structure to XML Schema]]></comment>
		</procedure>
		<procedure name="database_to_xml" id="Procedure_47718d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xml$function$
]]></string>
			<comment><![CDATA[map database contents to XML]]></comment>
		</procedure>
		<procedure name="database_to_xml_and_xmlschema" id="Procedure_382d1e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map database contents and structure to XML and XML Schema]]></comment>
		</procedure>
		<procedure name="database_to_xmlschema" id="Procedure_5cc50c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map database structure to XML Schema]]></comment>
		</procedure>
		<procedure name="date" id="Procedure_1af441" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
		</procedure>
		<procedure name="date" id="Procedure_1d9a74a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="91" type="date" />
		</procedure>
		<procedure name="date" id="Procedure_3154518" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="91" type="date" />
		</procedure>
		<procedure name="date_cmp" id="Procedure_8f151c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="date_cmp_timestamp" id="Procedure_130dc48" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamp(date, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="date_cmp_timestamptz" id="Procedure_4bfe872" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamptz(date, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$date_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="date_eq" id="Procedure_3adc723" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="date_eq_timestamp" id="Procedure_1fb91fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="date_eq_timestamptz" id="Procedure_5f4da7e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="date_ge" id="Procedure_505f369" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="date_ge_timestamp" id="Procedure_5472ae7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="date_ge_timestamptz" id="Procedure_29114ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="date_gt" id="Procedure_4800425" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="date_gt_timestamp" id="Procedure_41912a4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="date_gt_timestamptz" id="Procedure_2055c40" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="date_in" id="Procedure_4b889d3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_in(cstring)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$date_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="date_larger" id="Procedure_2386853" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_larger(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="date_le" id="Procedure_2887461" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="date_le_timestamp" id="Procedure_3d76359" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="date_le_timestamptz" id="Procedure_461f1f1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="date_lt" id="Procedure_505199b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="date_lt_timestamp" id="Procedure_b1d5bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="date_lt_timestamptz" id="Procedure_210e59e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="date_mi" id="Procedure_3a27360" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="date_mi_interval" id="Procedure_4f96640" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="date_mii" id="Procedure_1feab2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mii(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mii$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="date_ne" id="Procedure_19c4893" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="date_ne_timestamp" id="Procedure_2cd190d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="date_ne_timestamptz" id="Procedure_3bd5312" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="date_out" id="Procedure_5addfe6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_out(date)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$date_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="date_part" id="Procedure_3caae5e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</procedure>
		<procedure name="date_part" id="Procedure_589c1d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_3abdf91" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_544fea7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_17b421f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_232c30f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_17a3fcb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_part" id="Procedure_2d2acc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="date_pl_interval" id="Procedure_5eae299" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pl_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="date_pli" id="Procedure_5d8b54e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pli(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_pli$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="date_recv" id="Procedure_50bb030" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_recv(internal)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="date_send" id="Procedure_38bc96f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_send(date)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="date_smaller" id="Procedure_16cffd6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_smaller(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="date_sortsupport" id="Procedure_1cab2c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="date_trunc" id="Procedure_5bda5aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
		</procedure>
		<procedure name="date_trunc" id="Procedure_3a2c060" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="date_trunc" id="Procedure_b67bb5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="daterange" id="Procedure_5130ccf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[daterange constructor]]></comment>
		</procedure>
		<procedure name="daterange" id="Procedure_3f74c41" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[daterange constructor]]></comment>
			<input_param name="$1" jt="91" type="date" />
			<input_param name="$2" jt="91" type="date" />
		</procedure>
		<procedure name="daterange_canonical" id="Procedure_1242bd7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_canonical(daterange)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$daterange_canonical$function$
]]></string>
			<comment><![CDATA[convert a date range to canonical form]]></comment>
		</procedure>
		<procedure name="daterange_subdiff" id="Procedure_522f62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_subdiff(date, date)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$daterange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two date values]]></comment>
		</procedure>
		<procedure name="datetime_pl" id="Procedure_4f9478c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetime_pl(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetime_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="datetimetz_pl" id="Procedure_5f2d5c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetimetz_pl(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetimetz_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="dcbrt" id="Procedure_1b93094" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dcbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[implementation of ||/ operator]]></comment>
		</procedure>
		<procedure name="decode" id="Procedure_4058fb3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.decode(text, text)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$binary_decode$function$
]]></string>
			<comment><![CDATA[convert ascii-encoded text string into bytea value]]></comment>
		</procedure>
		<procedure name="degrees" id="Procedure_10327ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.degrees(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$degrees$function$
]]></string>
			<comment><![CDATA[radians to degrees]]></comment>
		</procedure>
		<procedure name="dense_rank" id="Procedure_3fb76e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_dense_rank$function$
]]></string>
			<comment><![CDATA[integer rank without gaps]]></comment>
		</procedure>
		<procedure name="dense_rank" id="Procedure_4551c0c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_dense_rank$function$
]]></string>
			<comment><![CDATA[integer rank without gaps]]></comment>
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="dense_rank_final" id="Procedure_420faa8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_dense_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="dexp" id="Procedure_3ecca2f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dexp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dexp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</procedure>
		<procedure name="diagonal" id="Procedure_d10431" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diagonal(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_diagonal$function$
]]></string>
			<comment><![CDATA[box diagonal]]></comment>
		</procedure>
		<procedure name="diameter" id="Procedure_5fdc6a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diameter(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_diameter$function$
]]></string>
			<comment><![CDATA[diameter of circle]]></comment>
		</procedure>
		<procedure name="dispell_init" id="Procedure_41eb25d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dispell_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dispell_lexize" id="Procedure_5bf8624" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dispell_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dist_cpoint" id="Procedure_210e2ca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_cpoint(circle, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_cpoint$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_cpoly" id="Procedure_10b1574" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_cpoly(circle, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_cpoly$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_lb" id="Procedure_42569d8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_lb(line, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_lb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_pb" id="Procedure_42eb0f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pb(point, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_pc" id="Procedure_1333804" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pc(point, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pc$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_pl" id="Procedure_4f69cd2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pl(point, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_polyp" id="Procedure_5e6971f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_polyp(polygon, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_polyp$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_ppath" id="Procedure_235e07d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ppath(point, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_ppoly" id="Procedure_a2e78e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ppoly(point, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_ppoly$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_ps" id="Procedure_53884d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ps(point, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_ps$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_sb" id="Procedure_3e63002" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sb(lseg, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_sb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="dist_sl" id="Procedure_3dd8ef8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sl(lseg, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_sl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="div" id="Procedure_4689e55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</procedure>
		<procedure name="dlog1" id="Procedure_37e80ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog1(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog1$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</procedure>
		<procedure name="dlog10" id="Procedure_42c3287" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog10(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</procedure>
		<procedure name="domain_in" id="Procedure_5ccb87a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.domain_in(cstring, oid, integer)
 RETURNS "any"
 LANGUAGE internal
 STABLE
AS $function$domain_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="domain_recv" id="Procedure_3d2e001" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.domain_recv(internal, oid, integer)
 RETURNS "any"
 LANGUAGE internal
 STABLE
AS $function$domain_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="dpow" id="Procedure_454170f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dpow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</procedure>
		<procedure name="dround" id="Procedure_593ffc3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dround(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</procedure>
		<procedure name="dsimple_init" id="Procedure_3ad24d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsimple_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dsimple_lexize" id="Procedure_5a73248" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsimple_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dsnowball_init" id="Procedure_3028703" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_init(internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_init$function$
]]></string>
		</procedure>
		<procedure name="dsnowball_lexize" id="Procedure_5967d84" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_lexize$function$
]]></string>
		</procedure>
		<procedure name="dsqrt" id="Procedure_418244e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsqrt$function$
]]></string>
			<comment><![CDATA[implementation of |/ operator]]></comment>
		</procedure>
		<procedure name="dsynonym_init" id="Procedure_4895b8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsynonym_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dsynonym_lexize" id="Procedure_3810db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsynonym_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="dtrunc" id="Procedure_4813c44" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dtrunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</procedure>
		<procedure name="elem_contained_by_range" id="Procedure_47198a2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.elem_contained_by_range(anyelement, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$elem_contained_by_range$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="encode" id="Procedure_56b0457" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.encode(bytea, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$binary_encode$function$
]]></string>
			<comment><![CDATA[convert bytea value into some ascii-only text string]]></comment>
		</procedure>
		<procedure name="enum_cmp" id="Procedure_a54f9d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_cmp(anyenum, anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="enum_eq" id="Procedure_16bfa1d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_eq(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="enum_first" id="Procedure_5e88d6b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_first(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE
AS $function$enum_first$function$
]]></string>
			<comment><![CDATA[first value of the input enum type]]></comment>
		</procedure>
		<procedure name="enum_ge" id="Procedure_aba188" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ge(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="enum_gt" id="Procedure_1ebdcbb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_gt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="enum_in" id="Procedure_92d7d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_in(cstring, oid)
 RETURNS anyenum
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="enum_larger" id="Procedure_126a5a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_larger(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="enum_last" id="Procedure_4c00683" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_last(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE
AS $function$enum_last$function$
]]></string>
			<comment><![CDATA[last value of the input enum type]]></comment>
		</procedure>
		<procedure name="enum_le" id="Procedure_58e6dcd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_le(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="enum_lt" id="Procedure_8a052d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_lt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="enum_ne" id="Procedure_4e091d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ne(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="enum_out" id="Procedure_5f8c7d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_out(anyenum)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="enum_range" id="Procedure_5cdccea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum, anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE
AS $function$enum_range_bounds$function$
]]></string>
			<comment><![CDATA[range between the two given enum values, as an ordered array]]></comment>
		</procedure>
		<procedure name="enum_range" id="Procedure_593a8c7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum, anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE
AS $function$enum_range_bounds$function$
]]></string>
			<comment><![CDATA[range between the two given enum values, as an ordered array]]></comment>
			<input_param name="$1" jt="1111" type="anyenum" />
			<input_param name="$2" jt="1111" type="anyenum" />
			<result_param name="returnValue" jt="1111" type="anyarray" />
		</procedure>
		<procedure name="enum_recv" id="Procedure_453955" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_recv(internal, oid)
 RETURNS anyenum
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="enum_send" id="Procedure_35d0fd7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_send(anyenum)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="enum_smaller" id="Procedure_1729288" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_smaller(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="eqjoinsel" id="Procedure_5b7092" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$eqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of = and related operators]]></comment>
		</procedure>
		<procedure name="eqsel" id="Procedure_39a1088" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$eqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of = and related operators]]></comment>
		</procedure>
		<procedure name="euc_cn_to_mic" id="Procedure_1d0b013" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_cn_and_mic', $function$euc_cn_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="euc_cn_to_utf8" id="Procedure_5e08696" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_cn', $function$euc_cn_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to UTF8]]></comment>
		</procedure>
		<procedure name="euc_jis_2004_to_shift_jis_2004" id="Procedure_34d1998" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc2004_sjis2004', $function$euc_jis_2004_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004]]></comment>
		</procedure>
		<procedure name="euc_jis_2004_to_utf8" id="Procedure_3c7a338" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc2004', $function$euc_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to UTF8]]></comment>
		</procedure>
		<procedure name="euc_jp_to_mic" id="Procedure_38b07d1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="euc_jp_to_sjis" id="Procedure_1b47c4d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to SJIS]]></comment>
		</procedure>
		<procedure name="euc_jp_to_utf8" id="Procedure_1d475d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_jp', $function$euc_jp_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to UTF8]]></comment>
		</procedure>
		<procedure name="euc_kr_to_mic" id="Procedure_16036" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_kr_and_mic', $function$euc_kr_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="euc_kr_to_utf8" id="Procedure_416a306" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_kr', $function$euc_kr_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to UTF8]]></comment>
		</procedure>
		<procedure name="euc_tw_to_big5" id="Procedure_42d6da" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to BIG5]]></comment>
		</procedure>
		<procedure name="euc_tw_to_mic" id="Procedure_3a84689" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="euc_tw_to_utf8" id="Procedure_4906fd7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_tw', $function$euc_tw_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to UTF8]]></comment>
		</procedure>
		<procedure name="event_trigger_in" id="Procedure_4f18714" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.event_trigger_in(cstring)
 RETURNS event_trigger
 LANGUAGE internal
 IMMUTABLE
AS $function$event_trigger_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="event_trigger_out" id="Procedure_3679aca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.event_trigger_out(event_trigger)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$event_trigger_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="exp" id="Procedure_4724c54" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.exp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dexp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</procedure>
		<procedure name="exp" id="Procedure_5c7c36a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.exp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dexp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="factorial" id="Procedure_48855bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.factorial(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[factorial]]></comment>
		</procedure>
		<procedure name="family" id="Procedure_c5b31a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.family(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_family$function$
]]></string>
			<comment><![CDATA[address family (4 for IPv4, 6 for IPv6)]]></comment>
		</procedure>
		<procedure name="fdw_handler_in" id="Procedure_5136873" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fdw_handler_in(cstring)
 RETURNS fdw_handler
 LANGUAGE internal
 IMMUTABLE
AS $function$fdw_handler_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="fdw_handler_out" id="Procedure_224bfcd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fdw_handler_out(fdw_handler)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$fdw_handler_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="first_value" id="Procedure_52f9ff6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.first_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_first_value$function$
]]></string>
			<comment><![CDATA[fetch the first row value]]></comment>
		</procedure>
		<procedure name="float4" id="Procedure_2e95d28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</procedure>
		<procedure name="float4" id="Procedure_35908fd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="float4" id="Procedure_1299983" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="float4" id="Procedure_5bee102" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="float4" id="Procedure_41e11e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="float48div" id="Procedure_340a4f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48div(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="float48eq" id="Procedure_5f1c5b9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48eq(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="float48ge" id="Procedure_345de6f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ge(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="float48gt" id="Procedure_10abe92" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48gt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="float48le" id="Procedure_3b7cef1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48le(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="float48lt" id="Procedure_131a0d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48lt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="float48mi" id="Procedure_983222" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mi(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float48mul" id="Procedure_3dfd3ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mul(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="float48ne" id="Procedure_59420f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ne(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="float48pl" id="Procedure_540d76a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48pl(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="float4_accum" id="Procedure_2d68ee1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4_accum(double precision[], real)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="float4abs" id="Procedure_53f9352" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="float4div" id="Procedure_484598e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4div(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="float4eq" id="Procedure_31ee4e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4eq(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="float4ge" id="Procedure_7aff8f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ge(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="float4gt" id="Procedure_19ff05c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4gt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="float4in" id="Procedure_41d6ecd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4in(cstring)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float4larger" id="Procedure_43312dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4larger(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="float4le" id="Procedure_559927" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4le(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="float4lt" id="Procedure_27cb058" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4lt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="float4mi" id="Procedure_36e494c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mi(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float4mul" id="Procedure_15852b3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mul(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="float4ne" id="Procedure_212e99b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ne(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="float4out" id="Procedure_1a1846b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4out(real)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float4pl" id="Procedure_24412dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4pl(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="float4recv" id="Procedure_589f377" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4recv(internal)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float4send" id="Procedure_2dc0795" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4send(real)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float4smaller" id="Procedure_a25f39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4smaller(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="float4um" id="Procedure_5f52927" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4um(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float4up" id="Procedure_5b9b184" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4up(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="float8" id="Procedure_11dbd49" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</procedure>
		<procedure name="float8" id="Procedure_5d29222" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="float8" id="Procedure_47dc412" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="float8" id="Procedure_46ffe92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="float8" id="Procedure_343c4a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="float84div" id="Procedure_5d22776" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84div(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="float84eq" id="Procedure_36cf8b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84eq(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="float84ge" id="Procedure_177ec51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ge(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="float84gt" id="Procedure_312a1ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84gt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="float84le" id="Procedure_e60f47" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84le(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="float84lt" id="Procedure_1cf8f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84lt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="float84mi" id="Procedure_4ee8091" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mi(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float84mul" id="Procedure_1d03d44" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mul(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="float84ne" id="Procedure_1c0788d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ne(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="float84pl" id="Procedure_2d6c9ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84pl(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="float8_accum" id="Procedure_19b9430" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_accum(double precision[], double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="float8_avg" id="Procedure_5486ea0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_avg(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_corr" id="Procedure_1e4bf9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_corr(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_corr$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_covar_pop" id="Procedure_1430433" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_covar_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_covar_samp" id="Procedure_327cb68" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_covar_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_accum" id="Procedure_347defb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_accum(double precision[], double precision, double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="float8_regr_avgx" id="Procedure_c284cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_avgx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_avgy" id="Procedure_ae8901" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_avgy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_intercept" id="Procedure_3a5986" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_intercept(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_intercept$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_r2" id="Procedure_28bc088" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_r2(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_r2$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_slope" id="Procedure_42cfa49" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_slope(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_slope$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_sxx" id="Procedure_1b24d20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_sxx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_sxy" id="Procedure_b6d5a2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_sxy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_regr_syy" id="Procedure_b8aea5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_syy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_syy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_stddev_pop" id="Procedure_2aea19e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_stddev_samp" id="Procedure_4fccdff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_var_pop" id="Procedure_12662cc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8_var_samp" id="Procedure_3878634" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="float8abs" id="Procedure_2a04962" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="float8div" id="Procedure_343ae2e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8div(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="float8eq" id="Procedure_2b4fdc0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8eq(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="float8ge" id="Procedure_3e65f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ge(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="float8gt" id="Procedure_1a154ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8gt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="float8in" id="Procedure_15dd967" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8in(cstring)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float8larger" id="Procedure_5d8dd4a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8larger(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="float8le" id="Procedure_4c59eb6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8le(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="float8lt" id="Procedure_434b12a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8lt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="float8mi" id="Procedure_5b01839" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mi(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float8mul" id="Procedure_2a9983e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mul(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="float8ne" id="Procedure_2ed469a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ne(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="float8out" id="Procedure_1e8d81e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8out(double precision)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float8pl" id="Procedure_30fe0a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8pl(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="float8recv" id="Procedure_54bdf65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8recv(internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float8send" id="Procedure_59656a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8send(double precision)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="float8smaller" id="Procedure_4dd719b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8smaller(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="float8um" id="Procedure_4629214" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8um(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="float8up" id="Procedure_15118e2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8up(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="floor" id="Procedure_458dccc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.floor(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_floor$function$
]]></string>
			<comment><![CDATA[nearest integer <= value]]></comment>
		</procedure>
		<procedure name="floor" id="Procedure_39fee36" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.floor(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_floor$function$
]]></string>
			<comment><![CDATA[nearest integer <= value]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="flt4_mul_cash" id="Procedure_33d5d7e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt4_mul_cash(real, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$flt4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="flt8_mul_cash" id="Procedure_29610f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt8_mul_cash(double precision, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$flt8_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="fmgr_c_validator" id="Procedure_36f10c1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_c_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_c_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="fmgr_internal_validator" id="Procedure_3ea2b1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_internal_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_internal_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="fmgr_sql_validator" id="Procedure_54365b8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_sql_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_sql_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="format" id="Procedure_1873308" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_format$function$
]]></string>
			<comment><![CDATA[format text message]]></comment>
		</procedure>
		<procedure name="format" id="Procedure_3fe9137" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_format$function$
]]></string>
			<comment><![CDATA[format text message]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="1111" type="any" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="format_type" id="Procedure_1c4c58c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format_type(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$format_type$function$
]]></string>
			<comment><![CDATA[format a type oid and atttypmod to canonical SQL]]></comment>
		</procedure>
		<procedure name="gb18030_to_utf8" id="Procedure_558cd3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gb18030', $function$gb18030_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GB18030 to UTF8]]></comment>
		</procedure>
		<procedure name="gbk_to_utf8" id="Procedure_3b25f3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gbk', $function$gbk_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GBK to UTF8]]></comment>
		</procedure>
		<procedure name="generate_series" id="Procedure_346309d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</procedure>
		<procedure name="generate_series" id="Procedure_3637a89" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_47cea5b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_19f760b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_58855ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_5d282bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_5326dbf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_series" id="Procedure_2887012" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="generate_subscripts" id="Procedure_212c2dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer, boolean)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_subscripts$function$
]]></string>
			<comment><![CDATA[array subscripts generator]]></comment>
		</procedure>
		<procedure name="generate_subscripts" id="Procedure_2f3ad0f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer, boolean)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_subscripts$function$
]]></string>
			<comment><![CDATA[array subscripts generator]]></comment>
			<input_param name="$1" jt="1111" type="anyarray" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="-7" type="bool" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="get_bit" id="Procedure_17e0176" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bit, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitgetbit$function$
]]></string>
			<comment><![CDATA[get bit]]></comment>
		</procedure>
		<procedure name="get_bit" id="Procedure_526d085" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bit, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitgetbit$function$
]]></string>
			<comment><![CDATA[get bit]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="get_byte" id="Procedure_41079ec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_byte(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaGetByte$function$
]]></string>
			<comment><![CDATA[get byte]]></comment>
		</procedure>
		<procedure name="get_current_ts_config" id="Procedure_36bc6d0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_current_ts_config()
 RETURNS regconfig
 LANGUAGE internal
 STABLE STRICT
AS $function$get_current_ts_config$function$
]]></string>
			<comment><![CDATA[get current tsearch configuration]]></comment>
		</procedure>
		<procedure name="getdatabaseencoding" id="Procedure_482711e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getdatabaseencoding()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$getdatabaseencoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</procedure>
		<procedure name="getpgusername" id="Procedure_4244f42" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getpgusername()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[deprecated, use current_user instead]]></comment>
		</procedure>
		<procedure name="gin_cmp_prefix" id="Procedure_2ef6c5b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_prefix(text, text, smallint, internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_cmp_prefix$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</procedure>
		<procedure name="gin_cmp_tslexeme" id="Procedure_2db0a2a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_tslexeme(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_cmp_tslexeme$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</procedure>
		<procedure name="gin_compare_jsonb" id="Procedure_41439ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_compare_jsonb(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_compare_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_consistent_jsonb" id="Procedure_4cb405f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_consistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_consistent_jsonb_path" id="Procedure_2545243" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_consistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_extract_jsonb" id="Procedure_4ef5934" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_extract_jsonb_path" id="Procedure_17e7bf9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_path(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_extract_jsonb_query" id="Procedure_200ee74" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_query$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_extract_jsonb_query_path" id="Procedure_58b44d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query_path(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_query_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_extract_tsquery" id="Procedure_4694214" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsquery_5args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</procedure>
		<procedure name="gin_extract_tsquery" id="Procedure_44b0b12" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsquery_5args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
			<input_param name="$1" jt="1111" type="tsquery" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="5" type="int2" />
			<input_param name="$4" jt="1111" type="internal" />
			<input_param name="$5" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="gin_extract_tsvector" id="Procedure_50c1dc2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsvector_2args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</procedure>
		<procedure name="gin_extract_tsvector" id="Procedure_531ad14" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsvector_2args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
			<input_param name="$1" jt="1111" type="tsvector" />
			<input_param name="$2" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="gin_triconsistent_jsonb" id="Procedure_3526c25" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_triconsistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_triconsistent_jsonb_path" id="Procedure_573f07e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_triconsistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</procedure>
		<procedure name="gin_tsquery_consistent" id="Procedure_2c780d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_consistent_6args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</procedure>
		<procedure name="gin_tsquery_consistent" id="Procedure_3e266b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_consistent_6args$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
			<input_param name="$1" jt="1111" type="internal" />
			<input_param name="$2" jt="5" type="int2" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<input_param name="$5" jt="1111" type="internal" />
			<input_param name="$6" jt="1111" type="internal" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="gin_tsquery_triconsistent" id="Procedure_58059a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsquery, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_triconsistent$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</procedure>
		<procedure name="ginarrayconsistent" id="Procedure_4493752" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</procedure>
		<procedure name="ginarrayextract" id="Procedure_10b2dac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</procedure>
		<procedure name="ginarrayextract" id="Procedure_5b60146" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
			<input_param name="$1" jt="1111" type="anyarray" />
			<input_param name="$2" jt="1111" type="internal" />
			<input_param name="$3" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="internal" />
		</procedure>
		<procedure name="ginarraytriconsistent" id="Procedure_12a8d14" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarraytriconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</procedure>
		<procedure name="ginbeginscan" id="Procedure_496002b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbeginscan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginbuild" id="Procedure_5cd2bb3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbuild$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginbuildempty" id="Procedure_5bcb61f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginbuildempty$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginbulkdelete" id="Procedure_5b5b5c2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbulkdelete$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="gincostestimate" id="Procedure_489adb1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gincostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gincostestimate$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginendscan" id="Procedure_1e456b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginendscan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="gingetbitmap" id="Procedure_1b4e11e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gingetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$gingetbitmap$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="gininsert" id="Procedure_319332a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gininsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gininsert$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginmarkpos" id="Procedure_1037a2b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginmarkpos$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginoptions" id="Procedure_42c7902" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$ginoptions$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginqueryarrayextract" id="Procedure_49090a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginqueryarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</procedure>
		<procedure name="ginrescan" id="Procedure_ba96f1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginrescan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginrestrpos" id="Procedure_536b682" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginrestrpos$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="ginvacuumcleanup" id="Procedure_24477bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginvacuumcleanup$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</procedure>
		<procedure name="gist_bbox_distance" id="Procedure_2b969d0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_bbox_distance(internal, point, integer, oid)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_bbox_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_compress" id="Procedure_3ccaa16" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_consistent" id="Procedure_37c7874" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_consistent(internal, box, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_decompress" id="Procedure_2397e98" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_fetch" id="Procedure_43fd925" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_penalty" id="Procedure_4f5593b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_picksplit" id="Procedure_12ea11b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_same" id="Procedure_3910121" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_same(box, box, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_box_union" id="Procedure_543a185" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_union(internal, internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_circle_compress" id="Procedure_309164d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_circle_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_circle_consistent" id="Procedure_2cb6cce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_consistent(internal, circle, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_circle_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_point_compress" id="Procedure_2703c08" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_point_consistent" id="Procedure_22170e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_consistent(internal, point, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_point_distance" id="Procedure_970ae4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_distance(internal, point, integer, oid)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_point_fetch" id="Procedure_3a7bb18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_poly_compress" id="Procedure_128b2a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_poly_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gist_poly_consistent" id="Procedure_434d0fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_consistent(internal, polygon, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_poly_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="gistbeginscan" id="Procedure_3057b27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbeginscan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistbuild" id="Procedure_4630a63" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbuild$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistbuildempty" id="Procedure_5ee9dae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistbuildempty$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistbulkdelete" id="Procedure_57b42cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbulkdelete$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistcanreturn" id="Procedure_1c20a17" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistcanreturn(internal, integer)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$gistcanreturn$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistcostestimate" id="Procedure_132d153" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistcostestimate$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistendscan" id="Procedure_1f1990d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistendscan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistgetbitmap" id="Procedure_e418e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$gistgetbitmap$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistgettuple" id="Procedure_303756a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gistgettuple$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistinsert" id="Procedure_1f6683d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gistinsert$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistmarkpos" id="Procedure_3d72967" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistmarkpos$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistoptions" id="Procedure_2bbebb8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$gistoptions$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistrescan" id="Procedure_4291c71" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistrescan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistrestrpos" id="Procedure_4c9904" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistrestrpos$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gistvacuumcleanup" id="Procedure_efdaa1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistvacuumcleanup$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</procedure>
		<procedure name="gtsquery_compress" id="Procedure_1c04460" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_compress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_consistent" id="Procedure_127bc4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_decompress" id="Procedure_2501f42" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_penalty" id="Procedure_56b5254" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_picksplit" id="Procedure_493bd7b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_same" id="Procedure_1f24e89" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_same(bigint, bigint, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_same$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsquery_union" id="Procedure_56bd9b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_union$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</procedure>
		<procedure name="gtsvector_compress" id="Procedure_2078448" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_compress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_consistent" id="Procedure_577fc34" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_decompress" id="Procedure_4ef76a5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_penalty" id="Procedure_30f6327" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_picksplit" id="Procedure_484732b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_same" id="Procedure_2ef32d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_same(gtsvector, gtsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_same$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvector_union" id="Procedure_3520036" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_union$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</procedure>
		<procedure name="gtsvectorin" id="Procedure_1221262" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvectorin(cstring)
 RETURNS gtsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvectorin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="gtsvectorout" id="Procedure_271f93b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvectorout(gtsvector)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvectorout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_2a05fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_5c69f20" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_a61287" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_3c273df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_4751405" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_any_column_privilege" id="Procedure_15e2b5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_2d8e7d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_50d03cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_2dd9576" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_2744b07" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_1f1a217" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_1bb10f3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_27f4c2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_5aa4ffa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_4b91d95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_247f986" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_37cc00a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_column_privilege" id="Procedure_4da354b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_1641a87" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_22e345a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_5bfefcd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_887086" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_72ebe6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_database_privilege" id="Procedure_322988f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_d1c13d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_344d111" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_2047d13" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_56bdd03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_3af7d9a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_foreign_data_wrapper_privilege" id="Procedure_38a736e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_3854401" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_26b106d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_fe2a73" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_5d1eab4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_32c8a77" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_function_privilege" id="Procedure_136b829" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_37ec180" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_1c3dddb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_62a6d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_4fd0542" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_48fff77" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_language_privilege" id="Procedure_c5f5d8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_52a9482" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_e3a754" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_1f0273c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_327fb37" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_cea7f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_schema_privilege" id="Procedure_2848dd0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_5bd76cd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_21c236e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_4c694de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_28083e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_190bf31" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_sequence_privilege" id="Procedure_5416d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_38fbbd4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_5b36bdc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_2a7ab65" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_113d515" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_8943f5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_server_privilege" id="Procedure_2919290" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_15e757f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_4506a7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_4037534" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_f79aa0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_25a958a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_table_privilege" id="Procedure_1c0d58" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_28d3f35" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_3d5a344" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_8a4994" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_23273e1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_32aa1c0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_tablespace_privilege" id="Procedure_1fd4c7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_173ed30" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_321cb7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_7f738c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_202e96d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_6a6dd3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="has_type_privilege" id="Procedure_3267c5f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="hash_aclitem" id="Procedure_5cbc025" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_aclitem(aclitem)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_aclitem$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hash_array" id="Procedure_3032f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_array(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_array$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hash_numeric" id="Procedure_23dff9e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_numeric(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_numeric$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hash_range" id="Procedure_1f67f18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_range(anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_range$function$
]]></string>
			<comment><![CDATA[hash a range]]></comment>
		</procedure>
		<procedure name="hashbeginscan" id="Procedure_37059c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbeginscan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashbpchar" id="Procedure_50b4334" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbpchar(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashbpchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashbuild" id="Procedure_2b1134d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbuild$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashbuildempty" id="Procedure_28664c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashbuildempty$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashbulkdelete" id="Procedure_531e777" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbulkdelete$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashchar" id="Procedure_292acc7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashchar("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashcostestimate" id="Procedure_9935d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashcostestimate$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashendscan" id="Procedure_22efd21" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashendscan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashenum" id="Procedure_57fa9b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashenum(anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashenum$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashfloat4" id="Procedure_4e1cca0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashfloat4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashfloat8" id="Procedure_46ac241" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat8(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashfloat8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashgetbitmap" id="Procedure_3c0edae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$hashgetbitmap$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashgettuple" id="Procedure_5207cb4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$hashgettuple$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashinet" id="Procedure_f60ea8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashinet(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashinet$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashinsert" id="Procedure_10c65bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$hashinsert$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashint2" id="Procedure_3e4bb97" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint2$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashint2vector" id="Procedure_337ebaf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2vector(int2vector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint2vector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashint4" id="Procedure_52a2750" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint4(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashint8" id="Procedure_c8c0ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint8(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashmacaddr" id="Procedure_381eb4a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashmacaddr(macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashmacaddr$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashmarkpos" id="Procedure_1a4a42c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashmarkpos$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashname" id="Procedure_5ffa94" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashname(name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashname$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashoid" id="Procedure_1aa377a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoid(oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashoid$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashoidvector" id="Procedure_2935515" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoidvector(oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashoidvector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashoptions" id="Procedure_22ef4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$hashoptions$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashrescan" id="Procedure_4fa1ea6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashrescan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashrestrpos" id="Procedure_16d4962" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashrestrpos$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashtext" id="Procedure_550c940" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashtext(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashtext$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="hashvacuumcleanup" id="Procedure_3d476c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashvacuumcleanup$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</procedure>
		<procedure name="hashvarlena" id="Procedure_5814eca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashvarlena(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashvarlena$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="height" id="Procedure_1ed0a3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.height(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_height$function$
]]></string>
			<comment><![CDATA[box height]]></comment>
		</procedure>
		<procedure name="host" id="Procedure_26a7c28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.host(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_host$function$
]]></string>
			<comment><![CDATA[show address octets only]]></comment>
		</procedure>
		<procedure name="hostmask" id="Procedure_bb680d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hostmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_hostmask$function$
]]></string>
			<comment><![CDATA[hostmask of address]]></comment>
		</procedure>
		<procedure name="iclikejoinsel" id="Procedure_4f35044" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$iclikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of ILIKE]]></comment>
		</procedure>
		<procedure name="iclikesel" id="Procedure_19cbc7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$iclikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of ILIKE]]></comment>
		</procedure>
		<procedure name="icnlikejoinsel" id="Procedure_2421a06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icnlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT ILIKE]]></comment>
		</procedure>
		<procedure name="icnlikesel" id="Procedure_54bb858" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icnlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT ILIKE]]></comment>
		</procedure>
		<procedure name="icregexeqjoinsel" id="Procedure_3191a5c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex match]]></comment>
		</procedure>
		<procedure name="icregexeqsel" id="Procedure_2c0afac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex match]]></comment>
		</procedure>
		<procedure name="icregexnejoinsel" id="Procedure_5ba7cc2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex non-match]]></comment>
		</procedure>
		<procedure name="icregexnesel" id="Procedure_37016b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex non-match]]></comment>
		</procedure>
		<procedure name="inet_client_addr" id="Procedure_edf8dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE
AS $function$inet_client_addr$function$
]]></string>
			<comment><![CDATA[inet address of the client]]></comment>
		</procedure>
		<procedure name="inet_client_port" id="Procedure_2945bca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_port()
 RETURNS integer
 LANGUAGE internal
 STABLE
AS $function$inet_client_port$function$
]]></string>
			<comment><![CDATA[client's port number for this connection]]></comment>
		</procedure>
		<procedure name="inet_gist_compress" id="Procedure_57ab539" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_consistent" id="Procedure_56a119a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_consistent(internal, inet, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_decompress" id="Procedure_3694479" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_fetch" id="Procedure_3677dce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_penalty" id="Procedure_296628f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_picksplit" id="Procedure_32cc756" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_same" id="Procedure_26fa61e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_same(inet, inet, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_gist_union" id="Procedure_536e4e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="inet_in" id="Procedure_53d659e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_in(cstring)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="inet_merge" id="Procedure_5d15048" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_merge(inet, inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_merge$function$
]]></string>
			<comment><![CDATA[the smallest network which includes both of the given networks]]></comment>
		</procedure>
		<procedure name="inet_out" id="Procedure_aabf0a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_out(inet)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="inet_recv" id="Procedure_42b88a8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_recv(internal)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="inet_same_family" id="Procedure_55fdbad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_same_family(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_same_family$function$
]]></string>
			<comment><![CDATA[are the addresses from the same family?]]></comment>
		</procedure>
		<procedure name="inet_send" id="Procedure_6e334f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_send(inet)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="inet_server_addr" id="Procedure_16c5122" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE
AS $function$inet_server_addr$function$
]]></string>
			<comment><![CDATA[inet address of the server]]></comment>
		</procedure>
		<procedure name="inet_server_port" id="Procedure_49f82a6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_port()
 RETURNS integer
 LANGUAGE internal
 STABLE
AS $function$inet_server_port$function$
]]></string>
			<comment><![CDATA[server's port number for this connection]]></comment>
		</procedure>
		<procedure name="inetand" id="Procedure_2374fc2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetand(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetand$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="inetmi" id="Procedure_30041e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi(inet, inet)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetmi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="inetmi_int8" id="Procedure_47f2e0b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi_int8(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetmi_int8$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="inetnot" id="Procedure_5eb323e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetnot(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="inetor" id="Procedure_167266" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetor(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetor$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="inetpl" id="Procedure_1fa14a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetpl(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetpl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="initcap" id="Procedure_196a3d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.initcap(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$initcap$function$
]]></string>
			<comment><![CDATA[capitalize each word]]></comment>
		</procedure>
		<procedure name="int2" id="Procedure_3862079" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</procedure>
		<procedure name="int2" id="Procedure_24ddc47" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="int2" id="Procedure_3dc9d22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="int2" id="Procedure_4bc2fbf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="int2" id="Procedure_5b9a782" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="5" type="int2" />
		</procedure>
		<procedure name="int24div" id="Procedure_22b4d2b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24div(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int24eq" id="Procedure_44a9984" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24eq(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int24ge" id="Procedure_3f08817" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ge(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int24gt" id="Procedure_14d9de1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24gt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int24le" id="Procedure_e33fc4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24le(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int24lt" id="Procedure_1963f51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24lt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int24mi" id="Procedure_489e6bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mi(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int24mul" id="Procedure_5f2ee59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mul(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int24ne" id="Procedure_540c19f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ne(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int24pl" id="Procedure_4614f07" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24pl(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int28div" id="Procedure_53bd996" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28div(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int28eq" id="Procedure_38dc09c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28eq(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int28ge" id="Procedure_3ddc79f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ge(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int28gt" id="Procedure_446ddcd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28gt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int28le" id="Procedure_3021261" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28le(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int28lt" id="Procedure_2863b06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28lt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int28mi" id="Procedure_4a108fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mi(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int28mul" id="Procedure_5392e23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mul(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int28ne" id="Procedure_5a698a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ne(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int28pl" id="Procedure_570e6bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28pl(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int2_accum" id="Procedure_a7c917" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int2_accum_inv" id="Procedure_138777" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum_inv(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int2_avg_accum" id="Procedure_2e16a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int2_avg_accum_inv" id="Procedure_3917c37" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum_inv(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int2_mul_cash" id="Procedure_308f649" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_mul_cash(smallint, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int2_sum" id="Procedure_f117f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_sum(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int2abs" id="Procedure_3840637" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="int2and" id="Procedure_67c2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2and(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="int2div" id="Procedure_3bfba55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2div(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int2eq" id="Procedure_4d7fef6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2eq(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int2ge" id="Procedure_52a7b53" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ge(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int2gt" id="Procedure_35baa78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2gt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int2in" id="Procedure_1c19f2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2in(cstring)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2int4_sum" id="Procedure_4447c06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2int4_sum(bigint[])
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="int2larger" id="Procedure_1e5481b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2larger(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="int2le" id="Procedure_f9dee1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2le(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int2lt" id="Procedure_427bfc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2lt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int2mi" id="Procedure_49abe2a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mi(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int2mod" id="Procedure_553db03" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</procedure>
		<procedure name="int2mul" id="Procedure_585eeba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mul(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int2ne" id="Procedure_3db6b7d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ne(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int2not" id="Procedure_17851c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2not(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="int2or" id="Procedure_590d018" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2or(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="int2out" id="Procedure_22ef320" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2out(smallint)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2pl" id="Procedure_40e5d6e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2pl(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int2recv" id="Procedure_462566a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2recv(internal)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2send" id="Procedure_5e4aa25" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2send(smallint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2shl" id="Procedure_978ed4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shl(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="int2shr" id="Procedure_2b81746" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shr(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="int2smaller" id="Procedure_ec39ee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2smaller(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="int2um" id="Procedure_be62b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2um(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int2up" id="Procedure_3c98957" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2up(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int2vectoreq" id="Procedure_54a5cbc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectoreq(int2vector, int2vector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int2vectorin" id="Procedure_1a0dedf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorin(cstring)
 RETURNS int2vector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2vectorout" id="Procedure_3793b93" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorout(int2vector)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2vectorrecv" id="Procedure_5f5db42" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorrecv(internal)
 RETURNS int2vector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2vectorsend" id="Procedure_97bebb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorsend(int2vector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int2xor" id="Procedure_493a064" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2xor(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="int4" id="Procedure_22ebbb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</procedure>
		<procedure name="int4" id="Procedure_891a95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_45e72d5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_3bec588" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_7014af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_512d1b6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_1257ed3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int4" id="Procedure_1236a22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="int42div" id="Procedure_7062f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42div(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int42eq" id="Procedure_4cb8824" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42eq(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int42ge" id="Procedure_12f3da9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ge(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int42gt" id="Procedure_4087259" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42gt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int42le" id="Procedure_2d60961" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42le(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int42lt" id="Procedure_46851a8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42lt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int42mi" id="Procedure_4854251" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mi(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int42mul" id="Procedure_1502236" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mul(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int42ne" id="Procedure_1391e0c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ne(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int42pl" id="Procedure_51ff56a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42pl(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int48div" id="Procedure_5489d4a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48div(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int48eq" id="Procedure_59f0ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48eq(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int48ge" id="Procedure_f539a3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ge(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int48gt" id="Procedure_57d1705" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48gt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int48le" id="Procedure_2d041dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48le(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int48lt" id="Procedure_2e758bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48lt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int48mi" id="Procedure_49cb712" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mi(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int48mul" id="Procedure_3f5e0d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mul(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int48ne" id="Procedure_532fe44" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ne(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int48pl" id="Procedure_35c2cb0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48pl(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int4_accum" id="Procedure_39506c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int4_accum_inv" id="Procedure_166c887" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum_inv(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int4_avg_accum" id="Procedure_5487b2b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int4_avg_accum_inv" id="Procedure_6aabf4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum_inv(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int4_mul_cash" id="Procedure_2a8e1e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_mul_cash(integer, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int4_sum" id="Procedure_2c204b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_sum(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int4abs" id="Procedure_70bdf1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="int4and" id="Procedure_40de76e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4and(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="int4div" id="Procedure_1380137" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4div(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int4eq" id="Procedure_1957f28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4eq(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int4ge" id="Procedure_460112f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ge(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int4gt" id="Procedure_4515b5e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4gt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int4in" id="Procedure_52c6b01" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4in(cstring)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int4inc" id="Procedure_40d128a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4inc(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</procedure>
		<procedure name="int4larger" id="Procedure_aaaeb7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4larger(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="int4le" id="Procedure_1037073" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4le(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int4lt" id="Procedure_24dcd74" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4lt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int4mi" id="Procedure_19162a8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mi(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int4mod" id="Procedure_3dca2ca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</procedure>
		<procedure name="int4mul" id="Procedure_431eed1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mul(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int4ne" id="Procedure_1ed6de5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ne(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int4not" id="Procedure_548f7d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4not(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="int4or" id="Procedure_203d69a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4or(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="int4out" id="Procedure_3f342a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4out(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int4pl" id="Procedure_2f785f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4pl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int4range" id="Procedure_3189310" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[int4range constructor]]></comment>
		</procedure>
		<procedure name="int4range" id="Procedure_f1f3c5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[int4range constructor]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<input_param name="$2" jt="4" type="int4" />
		</procedure>
		<procedure name="int4range_canonical" id="Procedure_507eb11" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_canonical(int4range)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int4 range to canonical form]]></comment>
		</procedure>
		<procedure name="int4range_subdiff" id="Procedure_556923" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_subdiff(integer, integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int4 values]]></comment>
		</procedure>
		<procedure name="int4recv" id="Procedure_5e5a3fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4recv(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int4send" id="Procedure_3de8174" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4send(integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int4shl" id="Procedure_5310428" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="int4shr" id="Procedure_3f20e38" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shr(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="int4smaller" id="Procedure_4f09cd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4smaller(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="int4um" id="Procedure_5517a8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4um(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int4up" id="Procedure_178cec1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4up(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int4xor" id="Procedure_476e961" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4xor(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="int8" id="Procedure_5d1a66" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</procedure>
		<procedure name="int8" id="Procedure_54fa9d3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8" id="Procedure_3fdf80d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8" id="Procedure_24da09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8" id="Procedure_5ccea1c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8" id="Procedure_37cec41" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8" id="Procedure_d2da8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="int82div" id="Procedure_3f866e2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82div(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int82eq" id="Procedure_52329ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82eq(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int82ge" id="Procedure_145df37" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ge(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int82gt" id="Procedure_577bbf7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82gt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int82le" id="Procedure_56ae36f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82le(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int82lt" id="Procedure_1c8669e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82lt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int82mi" id="Procedure_11ad523" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mi(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int82mul" id="Procedure_52024ca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mul(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int82ne" id="Procedure_5acab28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ne(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int82pl" id="Procedure_58124b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82pl(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int84div" id="Procedure_1c683eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84div(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int84eq" id="Procedure_55213c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84eq(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int84ge" id="Procedure_2510d0a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ge(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int84gt" id="Procedure_41e5af8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84gt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int84le" id="Procedure_2e97440" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84le(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int84lt" id="Procedure_b4f275" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84lt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int84mi" id="Procedure_389dd11" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mi(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int84mul" id="Procedure_260883c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mul(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int84ne" id="Procedure_180a631" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ne(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int84pl" id="Procedure_28184b0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84pl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int8_accum" id="Procedure_48b201d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8_accum_inv" id="Procedure_29d0af7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum_inv(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8_avg" id="Procedure_8ca060" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg(bigint[])
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="int8_avg_accum" id="Procedure_1b5ca83" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8_avg_accum_inv" id="Procedure_339d702" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_accum_inv(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8_sum" id="Procedure_2d92b29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_sum(numeric, bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8abs" id="Procedure_243960e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="int8and" id="Procedure_572fdf8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8and(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="int8dec" id="Procedure_2a50ffa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8dec$function$
]]></string>
			<comment><![CDATA[decrement]]></comment>
		</procedure>
		<procedure name="int8dec_any" id="Procedure_1f2829f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8dec_any$function$
]]></string>
			<comment><![CDATA[decrement, ignores second argument]]></comment>
		</procedure>
		<procedure name="int8div" id="Procedure_5931369" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8div(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="int8eq" id="Procedure_5babe88" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8eq(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="int8ge" id="Procedure_2eac69d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ge(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="int8gt" id="Procedure_2e9e800" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8gt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="int8in" id="Procedure_55b9372" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8in(cstring)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int8inc" id="Procedure_380a0e2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</procedure>
		<procedure name="int8inc_any" id="Procedure_489361f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc_any$function$
]]></string>
			<comment><![CDATA[increment, ignores second argument]]></comment>
		</procedure>
		<procedure name="int8inc_float8_float8" id="Procedure_ed9853" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_float8_float8(bigint, double precision, double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc_float8_float8$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="int8larger" id="Procedure_4399d28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8larger(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="int8le" id="Procedure_3e50edc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8le(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="int8lt" id="Procedure_4e19279" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8lt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="int8mi" id="Procedure_3d79cbf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mi(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int8mod" id="Procedure_17e7604" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</procedure>
		<procedure name="int8mul" id="Procedure_13fcc6e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mul(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="int8ne" id="Procedure_fbfaaf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ne(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="int8not" id="Procedure_3318cd3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8not(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="int8or" id="Procedure_2f45cdd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8or(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="int8out" id="Procedure_3eb53f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8out(bigint)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int8pl" id="Procedure_12e2c6f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int8pl_inet" id="Procedure_12847c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl_inet(bigint, inet)
 RETURNS inet
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int8range" id="Procedure_13cbb6b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[int8range constructor]]></comment>
		</procedure>
		<procedure name="int8range" id="Procedure_129a8a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[int8range constructor]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<input_param name="$2" jt="-5" type="int8" />
		</procedure>
		<procedure name="int8range_canonical" id="Procedure_214f1a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_canonical(int8range)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int8 range to canonical form]]></comment>
		</procedure>
		<procedure name="int8range_subdiff" id="Procedure_ed7d93" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_subdiff(bigint, bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int8 values]]></comment>
		</procedure>
		<procedure name="int8recv" id="Procedure_2a713bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8recv(internal)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int8send" id="Procedure_310b220" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8send(bigint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="int8shl" id="Procedure_20d6be2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="int8shr" id="Procedure_137a59b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shr(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="int8smaller" id="Procedure_12296fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8smaller(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="int8um" id="Procedure_3af5019" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8um(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="int8up" id="Procedure_4a34566" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8up(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="int8xor" id="Procedure_234501" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8xor(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="integer_pl_date" id="Procedure_5db71f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.integer_pl_date(integer, date)
 RETURNS date
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="inter_lb" id="Procedure_36a374a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_lb(line, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_lb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="inter_sb" id="Procedure_2a98e98" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_sb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="inter_sl" id="Procedure_1c11629" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_sl$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="internal_in" id="Procedure_35430e8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.internal_in(cstring)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$internal_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="internal_out" id="Procedure_24c7a1f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.internal_out(internal)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$internal_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="interval" id="Procedure_558443" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltime_interval$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
		</procedure>
		<procedure name="interval" id="Procedure_11089fb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltime_interval$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
			<input_param name="$1" jt="1111" type="reltime" />
			<result_param name="returnValue" jt="1111" type="interval" />
		</procedure>
		<procedure name="interval" id="Procedure_c230f4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltime_interval$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
			<input_param name="$1" jt="1111" type="reltime" />
			<result_param name="returnValue" jt="1111" type="interval" />
		</procedure>
		<procedure name="interval_accum" id="Procedure_e6c738" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="interval_accum_inv" id="Procedure_474039f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum_inv(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="interval_avg" id="Procedure_2b3f7b9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_avg(interval[])
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="interval_cmp" id="Procedure_59225e5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_cmp(interval, interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="interval_div" id="Procedure_306ab26" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_div(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="interval_eq" id="Procedure_cb1597" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_eq(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="interval_ge" id="Procedure_2459a4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ge(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="interval_gt" id="Procedure_5738178" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_gt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="interval_hash" id="Procedure_4b96fad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_hash(interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="interval_in" id="Procedure_4ab41b6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_in(cstring, oid, integer)
 RETURNS interval
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="interval_larger" id="Procedure_4d4cd76" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_larger(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="interval_le" id="Procedure_3000f27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_le(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="interval_lt" id="Procedure_3279fbf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_lt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="interval_mi" id="Procedure_219903f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mi(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="interval_mul" id="Procedure_1979b65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mul(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="interval_ne" id="Procedure_5838968" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ne(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="interval_out" id="Procedure_b8e62e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_out(interval)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="interval_pl" id="Procedure_4b6a1b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_pl_date" id="Procedure_34a0b8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_date(interval, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_pl_time" id="Procedure_31778e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_time(interval, time without time zone)
 RETURNS time without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_pl_timestamp" id="Procedure_544f8f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamp(interval, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_pl_timestamptz" id="Procedure_1fa8f16" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_pl_timetz" id="Procedure_2dee2ed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timetz(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="interval_recv" id="Procedure_57f8d8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_recv(internal, oid, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="interval_send" id="Procedure_4bc3785" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_send(interval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="interval_smaller" id="Procedure_48fe79f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_smaller(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="interval_transform" id="Procedure_d52ab8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_transform$function$
]]></string>
			<comment><![CDATA[transform an interval length coercion]]></comment>
		</procedure>
		<procedure name="interval_um" id="Procedure_3a2d25d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_um(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="intervaltypmodin" id="Procedure_379ec2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intervaltypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$intervaltypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="intervaltypmodout" id="Procedure_41c6f05" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intervaltypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$intervaltypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="intinterval" id="Procedure_1af02c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intinterval(abstime, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$intinterval$function$
]]></string>
			<comment><![CDATA[implementation of <?> operator]]></comment>
		</procedure>
		<procedure name="isclosed" id="Procedure_38c9080" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isclosed(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_isclosed$function$
]]></string>
			<comment><![CDATA[path closed?]]></comment>
		</procedure>
		<procedure name="isempty" id="Procedure_51d6f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isempty(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_empty$function$
]]></string>
			<comment><![CDATA[is the range empty?]]></comment>
		</procedure>
		<procedure name="isfinite" id="Procedure_3996e60" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</procedure>
		<procedure name="isfinite" id="Procedure_47bc389" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
			<input_param name="$1" jt="91" type="date" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isfinite" id="Procedure_238dfd3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
			<input_param name="$1" jt="91" type="date" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isfinite" id="Procedure_1521e7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
			<input_param name="$1" jt="91" type="date" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isfinite" id="Procedure_4170d8d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
			<input_param name="$1" jt="91" type="date" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="ishorizontal" id="Procedure_2372556" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
		</procedure>
		<procedure name="ishorizontal" id="Procedure_26dc0ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="ishorizontal" id="Procedure_b280c2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="iso8859_1_to_utf8" id="Procedure_25f7f4b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859_1', $function$iso8859_1_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to UTF8]]></comment>
		</procedure>
		<procedure name="iso8859_to_utf8" id="Procedure_100f14e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859', $function$iso8859_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-8 to UTF8]]></comment>
		</procedure>
		<procedure name="iso_to_koi8r" id="Procedure_4705968" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to KOI8R]]></comment>
		</procedure>
		<procedure name="iso_to_mic" id="Procedure_311d1db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="iso_to_win1251" id="Procedure_1466d73" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN1251]]></comment>
		</procedure>
		<procedure name="iso_to_win866" id="Procedure_40041e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN866]]></comment>
		</procedure>
		<procedure name="isopen" id="Procedure_34b95ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isopen(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_isopen$function$
]]></string>
			<comment><![CDATA[path open?]]></comment>
		</procedure>
		<procedure name="isparallel" id="Procedure_3e797f0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isparallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_parallel$function$
]]></string>
			<comment><![CDATA[parallel]]></comment>
		</procedure>
		<procedure name="isparallel" id="Procedure_42a577a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isparallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_parallel$function$
]]></string>
			<comment><![CDATA[parallel]]></comment>
			<input_param name="$1" jt="1111" type="lseg" />
			<input_param name="$2" jt="1111" type="lseg" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isperp" id="Procedure_3f94200" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isperp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_perp$function$
]]></string>
			<comment><![CDATA[perpendicular]]></comment>
		</procedure>
		<procedure name="isperp" id="Procedure_1431795" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isperp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_perp$function$
]]></string>
			<comment><![CDATA[perpendicular]]></comment>
			<input_param name="$1" jt="1111" type="lseg" />
			<input_param name="$2" jt="1111" type="lseg" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isvertical" id="Procedure_5515b39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
		</procedure>
		<procedure name="isvertical" id="Procedure_291e541" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="isvertical" id="Procedure_453f8fa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
			<input_param name="$1" jt="1111" type="point" />
			<input_param name="$2" jt="1111" type="point" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="johab_to_utf8" id="Procedure_2ab818f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_johab', $function$johab_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for JOHAB to UTF8]]></comment>
		</procedure>
		<procedure name="json_agg_finalfn" id="Procedure_4cdccec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE
AS $function$json_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json aggregate final function]]></comment>
		</procedure>
		<procedure name="json_agg_transfn" id="Procedure_4e7ecf4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$json_agg_transfn$function$
]]></string>
			<comment><![CDATA[json aggregate transition function]]></comment>
		</procedure>
		<procedure name="json_array_element" id="Procedure_33fc917" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element(from_json json, element_index integer)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</procedure>
		<procedure name="json_array_element_text" id="Procedure_32791e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element_text(from_json json, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</procedure>
		<procedure name="json_array_elements" id="Procedure_4ca38b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements(from_json json, OUT value json)
 RETURNS SETOF json
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_array_elements$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</procedure>
		<procedure name="json_array_elements_text" id="Procedure_3ee0523" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements_text(from_json json, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of json array]]></comment>
		</procedure>
		<procedure name="json_array_length" id="Procedure_2df9e55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_length(json)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_length$function$
]]></string>
			<comment><![CDATA[length of json array]]></comment>
		</procedure>
		<procedure name="json_build_array" id="Procedure_15813c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_array(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_array$function$
]]></string>
			<comment><![CDATA[build a json array from any inputs]]></comment>
		</procedure>
		<procedure name="json_build_array" id="Procedure_1890a9a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_array(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_array$function$
]]></string>
			<comment><![CDATA[build a json array from any inputs]]></comment>
			<input_param name="$1" jt="1111" type="any" />
			<result_param name="returnValue" jt="1111" type="json" />
		</procedure>
		<procedure name="json_build_object" id="Procedure_4a7bd9b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_object(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_object$function$
]]></string>
			<comment><![CDATA[build a json object from pairwise key/value inputs]]></comment>
		</procedure>
		<procedure name="json_build_object" id="Procedure_46e7e65" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_object(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_object$function$
]]></string>
			<comment><![CDATA[build a json object from pairwise key/value inputs]]></comment>
			<input_param name="$1" jt="1111" type="any" />
			<result_param name="returnValue" jt="1111" type="json" />
		</procedure>
		<procedure name="json_each" id="Procedure_563995e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each(from_json json, OUT key text, OUT value json)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</procedure>
		<procedure name="json_each_text" id="Procedure_54d1364" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each_text(from_json json, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</procedure>
		<procedure name="json_extract_path" id="Procedure_5842d9d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path(from_json json, VARIADIC path_elems text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_extract_path$function$
]]></string>
			<comment><![CDATA[get value from json with path elements]]></comment>
		</procedure>
		<procedure name="json_extract_path_text" id="Procedure_22eaa65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path_text(from_json json, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from json as text with path elements]]></comment>
		</procedure>
		<procedure name="json_in" id="Procedure_5b3b7b6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_in(cstring)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="json_object" id="Procedure_187958c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to json object]]></comment>
		</procedure>
		<procedure name="json_object" id="Procedure_1ba92bf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to json object]]></comment>
			<input_param name="$1" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="json" />
		</procedure>
		<procedure name="json_object_agg_finalfn" id="Procedure_24a7f1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE
AS $function$json_object_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json object aggregate final function]]></comment>
		</procedure>
		<procedure name="json_object_agg_transfn" id="Procedure_5caf5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_transfn(internal, "any", "any")
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$json_object_agg_transfn$function$
]]></string>
			<comment><![CDATA[json object aggregate transition function]]></comment>
		</procedure>
		<procedure name="json_object_field" id="Procedure_3ebfc3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field(from_json json, field_name text)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</procedure>
		<procedure name="json_object_field_text" id="Procedure_57db10e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field_text(from_json json, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</procedure>
		<procedure name="json_object_keys" id="Procedure_3c491c2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_keys(json)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_object_keys$function$
]]></string>
			<comment><![CDATA[get json object keys]]></comment>
		</procedure>
		<procedure name="json_out" id="Procedure_28b1dc3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_out(json)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="json_populate_record" id="Procedure_494e09b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_record(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS anyelement
 LANGUAGE internal
 STABLE
AS $function$json_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</procedure>
		<procedure name="json_populate_recordset" id="Procedure_546c6ae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_recordset(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE ROWS 100
AS $function$json_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</procedure>
		<procedure name="json_recv" id="Procedure_376824" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_recv(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="json_send" id="Procedure_493e5c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_send(json)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="json_strip_nulls" id="Procedure_5657af6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_strip_nulls(json)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_strip_nulls$function$
]]></string>
			<comment><![CDATA[remove object fields with null values from json]]></comment>
		</procedure>
		<procedure name="json_to_record" id="Procedure_2b44e98" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_record(json)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$json_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</procedure>
		<procedure name="json_to_recordset" id="Procedure_2a4885b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_recordset(json)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$json_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</procedure>
		<procedure name="json_typeof" id="Procedure_864c6f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_typeof(json)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a json value]]></comment>
		</procedure>
		<procedure name="jsonb_agg_finalfn" id="Procedure_394a295" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_agg_finalfn(internal)
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_agg_finalfn$function$
]]></string>
			<comment><![CDATA[jsonb aggregate final function]]></comment>
		</procedure>
		<procedure name="jsonb_agg_transfn" id="Procedure_1103c54" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$jsonb_agg_transfn$function$
]]></string>
			<comment><![CDATA[jsonb aggregate transition function]]></comment>
		</procedure>
		<procedure name="jsonb_array_element" id="Procedure_150be6a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element(from_json jsonb, element_index integer)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</procedure>
		<procedure name="jsonb_array_element_text" id="Procedure_540dacf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element_text(from_json jsonb, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</procedure>
		<procedure name="jsonb_array_elements" id="Procedure_4af7855" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements(from_json jsonb, OUT value jsonb)
 RETURNS SETOF jsonb
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_array_elements$function$
]]></string>
			<comment><![CDATA[elements of a jsonb array]]></comment>
		</procedure>
		<procedure name="jsonb_array_elements_text" id="Procedure_4cf76d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements_text(from_json jsonb, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of jsonb array]]></comment>
		</procedure>
		<procedure name="jsonb_array_length" id="Procedure_2868b5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_length(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_length$function$
]]></string>
			<comment><![CDATA[length of jsonb array]]></comment>
		</procedure>
		<procedure name="jsonb_build_array" id="Procedure_15b3f3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_build_array$function$
]]></string>
			<comment><![CDATA[build a jsonb array from any inputs]]></comment>
		</procedure>
		<procedure name="jsonb_build_array" id="Procedure_36034f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_array(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_build_array$function$
]]></string>
			<comment><![CDATA[build a jsonb array from any inputs]]></comment>
			<input_param name="$1" jt="1111" type="any" />
			<result_param name="returnValue" jt="1111" type="jsonb" />
		</procedure>
		<procedure name="jsonb_build_object" id="Procedure_32d7cc1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_build_object$function$
]]></string>
			<comment><![CDATA[build a jsonb object from pairwise key/value inputs]]></comment>
		</procedure>
		<procedure name="jsonb_build_object" id="Procedure_148b18e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_build_object(VARIADIC "any")
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_build_object$function$
]]></string>
			<comment><![CDATA[build a jsonb object from pairwise key/value inputs]]></comment>
			<input_param name="$1" jt="1111" type="any" />
			<result_param name="returnValue" jt="1111" type="jsonb" />
		</procedure>
		<procedure name="jsonb_cmp" id="Procedure_147b770" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_cmp(jsonb, jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="jsonb_concat" id="Procedure_240603a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_concat(jsonb, jsonb)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_concat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="jsonb_contained" id="Procedure_31023de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contained(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="jsonb_contains" id="Procedure_17ead0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contains(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="jsonb_delete" id="Procedure_211065" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_delete$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="jsonb_delete" id="Procedure_5564954" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete(jsonb, text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_delete$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
			<input_param name="$1" jt="1111" type="jsonb" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="jsonb" />
		</procedure>
		<procedure name="jsonb_delete_path" id="Procedure_496add3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_delete_path(jsonb, text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_delete_path$function$
]]></string>
			<comment><![CDATA[implementation of #- operator]]></comment>
		</procedure>
		<procedure name="jsonb_each" id="Procedure_144bd63" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each(from_json jsonb, OUT key text, OUT value jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</procedure>
		<procedure name="jsonb_each_text" id="Procedure_12e334e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each_text(from_json jsonb, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</procedure>
		<procedure name="jsonb_eq" id="Procedure_210d032" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_eq(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="jsonb_exists" id="Procedure_38831c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists(jsonb, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists$function$
]]></string>
			<comment><![CDATA[implementation of ? operator]]></comment>
		</procedure>
		<procedure name="jsonb_exists_all" id="Procedure_1da6f8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_all(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists_all$function$
]]></string>
			<comment><![CDATA[implementation of ?& operator]]></comment>
		</procedure>
		<procedure name="jsonb_exists_any" id="Procedure_47e634c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_any(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists_any$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</procedure>
		<procedure name="jsonb_extract_path" id="Procedure_1de6969" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_extract_path$function$
]]></string>
			<comment><![CDATA[get value from jsonb with path elements]]></comment>
		</procedure>
		<procedure name="jsonb_extract_path_text" id="Procedure_3c729d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from jsonb as text with path elements]]></comment>
		</procedure>
		<procedure name="jsonb_ge" id="Procedure_25db4ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ge(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="jsonb_gt" id="Procedure_4e212fc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_gt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="jsonb_hash" id="Procedure_2beefbc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_hash(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="jsonb_in" id="Procedure_5223249" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_in(cstring)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="jsonb_le" id="Procedure_51681f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_le(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="jsonb_lt" id="Procedure_16b9de2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_lt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="jsonb_ne" id="Procedure_313bf82" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ne(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="jsonb_object" id="Procedure_3902507" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to jsonb object]]></comment>
		</procedure>
		<procedure name="jsonb_object" id="Procedure_39766f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object(text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to jsonb object]]></comment>
			<input_param name="$1" jt="2003" type="_text" />
			<result_param name="returnValue" jt="1111" type="jsonb" />
		</procedure>
		<procedure name="jsonb_object_agg_finalfn" id="Procedure_21975e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_agg_finalfn(internal)
 RETURNS jsonb
 LANGUAGE internal
 STABLE
AS $function$jsonb_object_agg_finalfn$function$
]]></string>
			<comment><![CDATA[jsonb object aggregate final function]]></comment>
		</procedure>
		<procedure name="jsonb_object_agg_transfn" id="Procedure_2b005c2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_agg_transfn(internal, "any", "any")
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$jsonb_object_agg_transfn$function$
]]></string>
			<comment><![CDATA[jsonb object aggregate transition function]]></comment>
		</procedure>
		<procedure name="jsonb_object_field" id="Procedure_2f3e162" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field(from_json jsonb, field_name text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</procedure>
		<procedure name="jsonb_object_field_text" id="Procedure_5760c10" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field_text(from_json jsonb, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</procedure>
		<procedure name="jsonb_object_keys" id="Procedure_3feb4bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_keys(jsonb)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_object_keys$function$
]]></string>
			<comment><![CDATA[get jsonb object keys]]></comment>
		</procedure>
		<procedure name="jsonb_out" id="Procedure_50d8797" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_out(jsonb)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="jsonb_populate_record" id="Procedure_3afe1aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_record(anyelement, jsonb)
 RETURNS anyelement
 LANGUAGE internal
 STABLE
AS $function$jsonb_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a jsonb object]]></comment>
		</procedure>
		<procedure name="jsonb_populate_recordset" id="Procedure_560e75f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_recordset(anyelement, jsonb)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE ROWS 100
AS $function$jsonb_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a jsonb array of objects]]></comment>
		</procedure>
		<procedure name="jsonb_pretty" id="Procedure_233a64a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_pretty(jsonb)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_pretty$function$
]]></string>
			<comment><![CDATA[Indented text from jsonb]]></comment>
		</procedure>
		<procedure name="jsonb_recv" id="Procedure_44998ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_recv(internal)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="jsonb_send" id="Procedure_5453ab6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_send(jsonb)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="jsonb_set" id="Procedure_475a290" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_set(jsonb_in jsonb, path text[], replacement jsonb, create_if_missing boolean DEFAULT true)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_set$function$
]]></string>
			<comment><![CDATA[Set part of a jsonb]]></comment>
		</procedure>
		<procedure name="jsonb_strip_nulls" id="Procedure_59993fc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_strip_nulls(jsonb)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_strip_nulls$function$
]]></string>
			<comment><![CDATA[remove object fields with null values from jsonb]]></comment>
		</procedure>
		<procedure name="jsonb_to_record" id="Procedure_e592f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_record(jsonb)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$jsonb_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a jsonb object]]></comment>
		</procedure>
		<procedure name="jsonb_to_recordset" id="Procedure_370387e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_recordset(jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$jsonb_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a jsonb array of objects]]></comment>
		</procedure>
		<procedure name="jsonb_typeof" id="Procedure_25aaeb8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_typeof(jsonb)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a jsonb value]]></comment>
		</procedure>
		<procedure name="justify_days" id="Procedure_3374be9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_days(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_days$function$
]]></string>
			<comment><![CDATA[promote groups of 30 days to numbers of months]]></comment>
		</procedure>
		<procedure name="justify_hours" id="Procedure_25b677f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_hours(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_hours$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days]]></comment>
		</procedure>
		<procedure name="justify_interval" id="Procedure_45ba3e8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_interval(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_interval$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months]]></comment>
		</procedure>
		<procedure name="koi8r_to_iso" id="Procedure_1c54216" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to ISO-8859-5]]></comment>
		</procedure>
		<procedure name="koi8r_to_mic" id="Procedure_541b3de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="koi8r_to_utf8" id="Procedure_1d7a58f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8r_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to UTF8]]></comment>
		</procedure>
		<procedure name="koi8r_to_win1251" id="Procedure_1b99310" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN1251]]></comment>
		</procedure>
		<procedure name="koi8r_to_win866" id="Procedure_1ccff57" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN866]]></comment>
		</procedure>
		<procedure name="koi8u_to_utf8" id="Procedure_43ce2e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8u_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8U to UTF8]]></comment>
		</procedure>
		<procedure name="lag" id="Procedure_560f65e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
		</procedure>
		<procedure name="lag" id="Procedure_15f6416" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
			<input_param name="$1" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="lag" id="Procedure_16e50a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
			<input_param name="$1" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="language_handler_in" id="Procedure_125a4e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.language_handler_in(cstring)
 RETURNS language_handler
 LANGUAGE internal
 IMMUTABLE
AS $function$language_handler_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="language_handler_out" id="Procedure_490452c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.language_handler_out(language_handler)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$language_handler_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="last_value" id="Procedure_a85aa5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.last_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_last_value$function$
]]></string>
			<comment><![CDATA[fetch the last row value]]></comment>
		</procedure>
		<procedure name="lastval" id="Procedure_225be13" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lastval()
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lastval$function$
]]></string>
			<comment><![CDATA[current value from last used sequence]]></comment>
		</procedure>
		<procedure name="latin1_to_mic" id="Procedure_4a59d42" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin1_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="latin2_to_mic" id="Procedure_55851a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="latin2_to_win1250" id="Procedure_43a4de6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to WIN1250]]></comment>
		</procedure>
		<procedure name="latin3_to_mic" id="Procedure_2c191c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin3_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN3 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="latin4_to_mic" id="Procedure_239e3de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin4_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN4 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="lead" id="Procedure_566d425" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
		</procedure>
		<procedure name="lead" id="Procedure_44c72b0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
			<input_param name="$1" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="lead" id="Procedure_3c4a31b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
			<input_param name="$1" jt="1111" type="anyelement" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="left" id="Procedure_5056190" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."left"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_left$function$
]]></string>
			<comment><![CDATA[extract the first n characters]]></comment>
		</procedure>
		<procedure name="length" id="Procedure_cf153f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</procedure>
		<procedure name="length" id="Procedure_1222d2e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_36f1fff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_55f88d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_14d1c4b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_36a37a9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_410becd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="length" id="Procedure_5e80fa7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="like" id="Procedure_d4d007" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
		</procedure>
		<procedure name="like" id="Procedure_4d67012" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="like" id="Procedure_37040ba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="like_escape" id="Procedure_1851118" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.like_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$like_escape$function$
]]></string>
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
		</procedure>
		<procedure name="like_escape" id="Procedure_1f6f8c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.like_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$like_escape$function$
]]></string>
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="likejoinsel" id="Procedure_30677dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$likejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of LIKE]]></comment>
		</procedure>
		<procedure name="likesel" id="Procedure_2736cb9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$likesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of LIKE]]></comment>
		</procedure>
		<procedure name="line" id="Procedure_18b8817" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line(point, point)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_construct_pp$function$
]]></string>
			<comment><![CDATA[construct line from points]]></comment>
		</procedure>
		<procedure name="line_distance" id="Procedure_2931c0c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_distance(line, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="line_eq" id="Procedure_1b03847" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_eq(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="line_horizontal" id="Procedure_5bb4e26" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_horizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</procedure>
		<procedure name="line_in" id="Procedure_10880b9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_in(cstring)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="line_interpt" id="Procedure_5c62e05" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_interpt(line, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="line_intersect" id="Procedure_5e918b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_intersect(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="line_out" id="Procedure_5d0f5f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_out(line)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="line_parallel" id="Procedure_119846b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_parallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</procedure>
		<procedure name="line_perp" id="Procedure_42a6416" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_perp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</procedure>
		<procedure name="line_recv" id="Procedure_85dc4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_recv(internal)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="line_send" id="Procedure_4b5c16c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_send(line)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="line_vertical" id="Procedure_ff8008" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_vertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</procedure>
		<procedure name="ln" id="Procedure_36c24e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ln(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog1$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</procedure>
		<procedure name="ln" id="Procedure_27bf3af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ln(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog1$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="lo_close" id="Procedure_2daaaee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_close(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_close$function$
]]></string>
			<comment><![CDATA[large object close]]></comment>
		</procedure>
		<procedure name="lo_creat" id="Procedure_345e55b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_creat(integer)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_creat$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</procedure>
		<procedure name="lo_create" id="Procedure_23cdca0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_create(oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_create$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</procedure>
		<procedure name="lo_export" id="Procedure_44273d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_export(oid, text)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_export$function$
]]></string>
			<comment><![CDATA[large object export]]></comment>
		</procedure>
		<procedure name="lo_from_bytea" id="Procedure_220fb1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_from_bytea(oid, bytea)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_from_bytea$function$
]]></string>
			<comment><![CDATA[create new large object with given content]]></comment>
		</procedure>
		<procedure name="lo_get" id="Procedure_401b7a3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get$function$
]]></string>
			<comment><![CDATA[read entire large object]]></comment>
		</procedure>
		<procedure name="lo_get" id="Procedure_1d3002a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get$function$
]]></string>
			<comment><![CDATA[read entire large object]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="lo_import" id="Procedure_5682ce7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import$function$
]]></string>
			<comment><![CDATA[large object import]]></comment>
		</procedure>
		<procedure name="lo_import" id="Procedure_5b3d4d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import$function$
]]></string>
			<comment><![CDATA[large object import]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="-5" type="oid" />
		</procedure>
		<procedure name="lo_lseek" id="Procedure_462b2ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek(integer, integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_lseek$function$
]]></string>
			<comment><![CDATA[large object seek]]></comment>
		</procedure>
		<procedure name="lo_lseek64" id="Procedure_e7defa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek64(integer, bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_lseek64$function$
]]></string>
			<comment><![CDATA[large object seek (64 bit)]]></comment>
		</procedure>
		<procedure name="lo_open" id="Procedure_4819791" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_open(oid, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_open$function$
]]></string>
			<comment><![CDATA[large object open]]></comment>
		</procedure>
		<procedure name="lo_put" id="Procedure_53ba173" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_put(oid, bigint, bytea)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$lo_put$function$
]]></string>
			<comment><![CDATA[write data at offset]]></comment>
		</procedure>
		<procedure name="lo_tell" id="Procedure_4e12823" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_tell$function$
]]></string>
			<comment><![CDATA[large object position]]></comment>
		</procedure>
		<procedure name="lo_tell64" id="Procedure_43551e7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell64(integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_tell64$function$
]]></string>
			<comment><![CDATA[large object position (64 bit)]]></comment>
		</procedure>
		<procedure name="lo_truncate" id="Procedure_171de88" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate(integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate$function$
]]></string>
			<comment><![CDATA[truncate large object]]></comment>
		</procedure>
		<procedure name="lo_truncate64" id="Procedure_35f4057" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate64(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate64$function$
]]></string>
			<comment><![CDATA[truncate large object (64 bit)]]></comment>
		</procedure>
		<procedure name="lo_unlink" id="Procedure_168dea1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_unlink(oid)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_unlink$function$
]]></string>
			<comment><![CDATA[large object unlink (delete)]]></comment>
		</procedure>
		<procedure name="log" id="Procedure_323a8a4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</procedure>
		<procedure name="log" id="Procedure_57bcdbc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="log" id="Procedure_9313e6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="loread" id="Procedure_22c0eef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.loread(integer, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$loread$function$
]]></string>
			<comment><![CDATA[large object read]]></comment>
		</procedure>
		<procedure name="lower" id="Procedure_5057c1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower$function$
]]></string>
			<comment><![CDATA[lower bound of range]]></comment>
		</procedure>
		<procedure name="lower" id="Procedure_412ed01" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower$function$
]]></string>
			<comment><![CDATA[lower bound of range]]></comment>
			<input_param name="$1" jt="1111" type="anyrange" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="lower_inc" id="Procedure_15a5cf1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower_inc$function$
]]></string>
			<comment><![CDATA[is the range's lower bound inclusive?]]></comment>
		</procedure>
		<procedure name="lower_inf" id="Procedure_4c80f59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower_inf$function$
]]></string>
			<comment><![CDATA[is the range's lower bound infinite?]]></comment>
		</procedure>
		<procedure name="lowrite" id="Procedure_4184bbf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lowrite(integer, bytea)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lowrite$function$
]]></string>
			<comment><![CDATA[large object write]]></comment>
		</procedure>
		<procedure name="lpad" id="Procedure_249ec0f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lpad$function$
]]></string>
			<comment><![CDATA[left-pad string to length]]></comment>
		</procedure>
		<procedure name="lpad" id="Procedure_5b0b84d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lpad$function$
]]></string>
			<comment><![CDATA[left-pad string to length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="lseg" id="Procedure_51d835f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_diagonal$function$
]]></string>
			<comment><![CDATA[diagonal of]]></comment>
		</procedure>
		<procedure name="lseg" id="Procedure_18f78c4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_diagonal$function$
]]></string>
			<comment><![CDATA[diagonal of]]></comment>
			<input_param name="$1" jt="1111" type="box" />
			<result_param name="returnValue" jt="1111" type="lseg" />
		</procedure>
		<procedure name="lseg_center" id="Procedure_33be2e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_center(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="lseg_distance" id="Procedure_3234c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_distance(lseg, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="lseg_eq" id="Procedure_53a802d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_eq(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="lseg_ge" id="Procedure_4213e64" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ge(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="lseg_gt" id="Procedure_5daa09e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_gt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="lseg_horizontal" id="Procedure_221446b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_horizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</procedure>
		<procedure name="lseg_in" id="Procedure_18240d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_in(cstring)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="lseg_interpt" id="Procedure_35c5fca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_interpt(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="lseg_intersect" id="Procedure_15e1bac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_intersect(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="lseg_le" id="Procedure_29815a5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_le(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="lseg_length" id="Procedure_4e1b890" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</procedure>
		<procedure name="lseg_lt" id="Procedure_2652b44" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_lt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="lseg_ne" id="Procedure_46d29b8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ne(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="lseg_out" id="Procedure_36c3a4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_out(lseg)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="lseg_parallel" id="Procedure_1d0adeb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_parallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</procedure>
		<procedure name="lseg_perp" id="Procedure_4ca3452" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_perp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</procedure>
		<procedure name="lseg_recv" id="Procedure_4a29148" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_recv(internal)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="lseg_send" id="Procedure_1e97c32" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_send(lseg)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="lseg_vertical" id="Procedure_2675906" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_vertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</procedure>
		<procedure name="ltrim" id="Procedure_17bbd00" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ltrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from left end of string]]></comment>
		</procedure>
		<procedure name="ltrim" id="Procedure_426803d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ltrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from left end of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="macaddr_and" id="Procedure_4753d74" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_and(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</procedure>
		<procedure name="macaddr_cmp" id="Procedure_59b9a75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_cmp(macaddr, macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="macaddr_eq" id="Procedure_595ee20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_eq(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="macaddr_ge" id="Procedure_38df068" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ge(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="macaddr_gt" id="Procedure_46d4e9f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_gt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="macaddr_in" id="Procedure_ad9883" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_in(cstring)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="macaddr_le" id="Procedure_2d739a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_le(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="macaddr_lt" id="Procedure_216df9a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_lt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="macaddr_ne" id="Procedure_18136f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ne(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="macaddr_not" id="Procedure_3ab9e7a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_not(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="macaddr_or" id="Procedure_5c0e1e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_or(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="macaddr_out" id="Procedure_2018fb3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_out(macaddr)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="macaddr_recv" id="Procedure_4fce40e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_recv(internal)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="macaddr_send" id="Procedure_4471d0c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_send(macaddr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="make_date" id="Procedure_58df3ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_date(year integer, month integer, day integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_date$function$
]]></string>
			<comment><![CDATA[construct date]]></comment>
		</procedure>
		<procedure name="make_interval" id="Procedure_439be28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_interval(years integer DEFAULT 0, months integer DEFAULT 0, weeks integer DEFAULT 0, days integer DEFAULT 0, hours integer DEFAULT 0, mins integer DEFAULT 0, secs double precision DEFAULT 0.0)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_interval$function$
]]></string>
			<comment><![CDATA[construct interval]]></comment>
		</procedure>
		<procedure name="make_time" id="Procedure_4791137" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_time(hour integer, min integer, sec double precision)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_time$function$
]]></string>
			<comment><![CDATA[construct time]]></comment>
		</procedure>
		<procedure name="make_timestamp" id="Procedure_3adf5ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamp(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_timestamp$function$
]]></string>
			<comment><![CDATA[construct timestamp]]></comment>
		</procedure>
		<procedure name="make_timestamptz" id="Procedure_18a2141" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$make_timestamptz$function$
]]></string>
			<comment><![CDATA[construct timestamp with time zone]]></comment>
		</procedure>
		<procedure name="make_timestamptz" id="Procedure_5705807" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$make_timestamptz$function$
]]></string>
			<comment><![CDATA[construct timestamp with time zone]]></comment>
			<input_param name="year" jt="4" type="int4" />
			<input_param name="month" jt="4" type="int4" />
			<input_param name="mday" jt="4" type="int4" />
			<input_param name="hour" jt="4" type="int4" />
			<input_param name="min" jt="4" type="int4" />
			<input_param name="sec" jt="8" type="float8" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="makeaclitem" id="Procedure_49f893f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.makeaclitem(oid, oid, text, boolean)
 RETURNS aclitem
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$makeaclitem$function$
]]></string>
			<comment><![CDATA[make ACL item]]></comment>
		</procedure>
		<procedure name="masklen" id="Procedure_3bb3ef8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.masklen(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_masklen$function$
]]></string>
			<comment><![CDATA[netmask length]]></comment>
		</procedure>
		<procedure name="md5" id="Procedure_4104442" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.md5(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$md5_text$function$
]]></string>
			<comment><![CDATA[MD5 hash]]></comment>
		</procedure>
		<procedure name="md5" id="Procedure_f2af22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.md5(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$md5_text$function$
]]></string>
			<comment><![CDATA[MD5 hash]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="mic_to_ascii" id="Procedure_5070003" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/ascii_and_mic', $function$mic_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SQL_ASCII]]></comment>
		</procedure>
		<procedure name="mic_to_big5" id="Procedure_c41f1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to BIG5]]></comment>
		</procedure>
		<procedure name="mic_to_euc_cn" id="Procedure_4cf0c99" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_cn_and_mic', $function$mic_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_CN]]></comment>
		</procedure>
		<procedure name="mic_to_euc_jp" id="Procedure_4846836" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_JP]]></comment>
		</procedure>
		<procedure name="mic_to_euc_kr" id="Procedure_2d6614d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_kr_and_mic', $function$mic_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_KR]]></comment>
		</procedure>
		<procedure name="mic_to_euc_tw" id="Procedure_336904b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_TW]]></comment>
		</procedure>
		<procedure name="mic_to_iso" id="Procedure_3bf88c1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to ISO-8859-5]]></comment>
		</procedure>
		<procedure name="mic_to_koi8r" id="Procedure_3af0d3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to KOI8R]]></comment>
		</procedure>
		<procedure name="mic_to_latin1" id="Procedure_5bb7807" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin1$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN1]]></comment>
		</procedure>
		<procedure name="mic_to_latin2" id="Procedure_99c89b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN2]]></comment>
		</procedure>
		<procedure name="mic_to_latin3" id="Procedure_483b1fc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin3$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN3]]></comment>
		</procedure>
		<procedure name="mic_to_latin4" id="Procedure_34f9cde" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin4$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN4]]></comment>
		</procedure>
		<procedure name="mic_to_sjis" id="Procedure_327c784" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SJIS]]></comment>
		</procedure>
		<procedure name="mic_to_win1250" id="Procedure_53a69dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1250]]></comment>
		</procedure>
		<procedure name="mic_to_win1251" id="Procedure_176" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1251]]></comment>
		</procedure>
		<procedure name="mic_to_win866" id="Procedure_609ac0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN866]]></comment>
		</procedure>
		<procedure name="mktinterval" id="Procedure_1a5e683" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mktinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[implementation of <#> operator]]></comment>
		</procedure>
		<procedure name="mod" id="Procedure_517bdcf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</procedure>
		<procedure name="mod" id="Procedure_4196cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="mod" id="Procedure_3c1862b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="mod" id="Procedure_5c7516e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="mode_final" id="Procedure_2f57682" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mode_final(internal, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE
AS $function$mode_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="money" id="Procedure_fbe2aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$int4_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
		</procedure>
		<procedure name="money" id="Procedure_23be896" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$int4_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="money" />
		</procedure>
		<procedure name="money" id="Procedure_4a77f67" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$int4_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="8" type="money" />
		</procedure>
		<procedure name="mul_d_interval" id="Procedure_2f3596b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mul_d_interval(double precision, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mul_d_interval$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="mxid_age" id="Procedure_4e3cbea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mxid_age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$mxid_age$function$
]]></string>
			<comment><![CDATA[age of a multi-transaction ID, in multi-transactions before current multi-transaction]]></comment>
		</procedure>
		<procedure name="name" id="Procedure_121cffd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
		</procedure>
		<procedure name="name" id="Procedure_369fb40" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
			<input_param name="$1" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="name" />
		</procedure>
		<procedure name="name" id="Procedure_1bce38f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
			<input_param name="$1" jt="12" type="varchar" />
			<result_param name="returnValue" jt="12" type="name" />
		</procedure>
		<procedure name="nameeq" id="Procedure_204b827" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameeq(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$nameeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="namege" id="Procedure_178c25a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namege(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="namegt" id="Procedure_24bb1f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namegt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="nameiclike" id="Procedure_2a912f1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameiclike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameiclike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</procedure>
		<procedure name="nameicnlike" id="Procedure_3b7947c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicnlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</procedure>
		<procedure name="nameicregexeq" id="Procedure_14f7c5e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</procedure>
		<procedure name="nameicregexne" id="Procedure_39e6c35" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</procedure>
		<procedure name="namein" id="Procedure_2d2f2fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namein(cstring)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="namele" id="Procedure_482394c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namele(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="namelike" id="Procedure_3dadb56" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namelike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</procedure>
		<procedure name="namelt" id="Procedure_152782e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="namene" id="Procedure_938e13" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namene(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="namenlike" id="Procedure_4321042" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namenlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namenlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</procedure>
		<procedure name="nameout" id="Procedure_2841368" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameout(name)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="namerecv" id="Procedure_2fe2b88" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namerecv(internal)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$namerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="nameregexeq" id="Procedure_f1c0ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="nameregexne" id="Procedure_39b94a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</procedure>
		<procedure name="namesend" id="Procedure_3eee645" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namesend(name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$namesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="neqjoinsel" id="Procedure_a39ef9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$neqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of <> and related operators]]></comment>
		</procedure>
		<procedure name="neqsel" id="Procedure_53730d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$neqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of <> and related operators]]></comment>
		</procedure>
		<procedure name="netmask" id="Procedure_f38ce4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.netmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_netmask$function$
]]></string>
			<comment><![CDATA[netmask of address]]></comment>
		</procedure>
		<procedure name="network" id="Procedure_ee9b0f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_network$function$
]]></string>
			<comment><![CDATA[network part of address]]></comment>
		</procedure>
		<procedure name="network_cmp" id="Procedure_5c4906f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_cmp(inet, inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="network_eq" id="Procedure_13903a4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_eq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="network_ge" id="Procedure_f2e3ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ge(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="network_gt" id="Procedure_472ad43" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_gt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="network_larger" id="Procedure_144e112" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_larger(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="network_le" id="Procedure_34b19c6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_le(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="network_lt" id="Procedure_4189d66" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_lt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="network_ne" id="Procedure_5eb64be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ne(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="network_overlap" id="Procedure_3d8b55c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_overlap(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="network_smaller" id="Procedure_230f72b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_smaller(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="network_sub" id="Procedure_2cc7375" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sub(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_sub$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="network_subeq" id="Procedure_566ad9e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_subeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_subeq$function$
]]></string>
			<comment><![CDATA[implementation of <<= operator]]></comment>
		</procedure>
		<procedure name="network_sup" id="Procedure_3116e01" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sup(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_sup$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="network_supeq" id="Procedure_2c49498" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_supeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_supeq$function$
]]></string>
			<comment><![CDATA[implementation of >>= operator]]></comment>
		</procedure>
		<procedure name="networkjoinsel" id="Procedure_20a8ab7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$networkjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for network operators]]></comment>
		</procedure>
		<procedure name="networksel" id="Procedure_3b7d6c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networksel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$networksel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for network operators]]></comment>
		</procedure>
		<procedure name="nextval" id="Procedure_38ed587" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nextval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$nextval_oid$function$
]]></string>
			<comment><![CDATA[sequence next value]]></comment>
		</procedure>
		<procedure name="nlikejoinsel" id="Procedure_b57440" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$nlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT LIKE]]></comment>
		</procedure>
		<procedure name="nlikesel" id="Procedure_5979d6a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$nlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT LIKE]]></comment>
		</procedure>
		<procedure name="notlike" id="Procedure_196b70a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</procedure>
		<procedure name="notlike" id="Procedure_4f35496" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="notlike" id="Procedure_1876ddf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="now" id="Procedure_2613447" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.now()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</procedure>
		<procedure name="npoints" id="Procedure_18808e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_npoints$function$
]]></string>
			<comment><![CDATA[number of points]]></comment>
		</procedure>
		<procedure name="npoints" id="Procedure_1f6e0b3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_npoints$function$
]]></string>
			<comment><![CDATA[number of points]]></comment>
			<input_param name="$1" jt="1111" type="path" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="nth_value" id="Procedure_22a28bb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nth_value(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_nth_value$function$
]]></string>
			<comment><![CDATA[fetch the Nth row value]]></comment>
		</procedure>
		<procedure name="ntile" id="Procedure_47896f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ntile(integer)
 RETURNS integer
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_ntile$function$
]]></string>
			<comment><![CDATA[split rows into N groups]]></comment>
		</procedure>
		<procedure name="numeric" id="Procedure_2948819" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</procedure>
		<procedure name="numeric" id="Procedure_3f285ab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric" id="Procedure_3a344de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric" id="Procedure_4ce5800" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric" id="Procedure_456aad3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric" id="Procedure_1f843cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric" id="Procedure_31540a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="numeric_abs" id="Procedure_476271b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</procedure>
		<procedure name="numeric_accum" id="Procedure_568f7c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="numeric_accum_inv" id="Procedure_1e3566" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum_inv(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="numeric_add" id="Procedure_5765e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_add(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="numeric_avg" id="Procedure_46b4250" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_avg_accum" id="Procedure_2d2d639" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="numeric_cmp" id="Procedure_315f2fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_cmp(numeric, numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="numeric_div" id="Procedure_5312ea4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="numeric_div_trunc" id="Procedure_1586e4b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div_trunc(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</procedure>
		<procedure name="numeric_eq" id="Procedure_5ae8831" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_eq(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="numeric_exp" id="Procedure_423eb19" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</procedure>
		<procedure name="numeric_fac" id="Procedure_195d187" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_fac(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[implementation of ! operator]]></comment>
		</procedure>
		<procedure name="numeric_ge" id="Procedure_48c5293" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ge(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="numeric_gt" id="Procedure_5459b62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_gt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="numeric_in" id="Procedure_fe507e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_in(cstring, oid, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="numeric_inc" id="Procedure_2f91bc2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_inc(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_inc$function$
]]></string>
			<comment><![CDATA[increment by one]]></comment>
		</procedure>
		<procedure name="numeric_larger" id="Procedure_3585fe0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_larger(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="numeric_le" id="Procedure_42fe433" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_le(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="numeric_ln" id="Procedure_52fb260" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</procedure>
		<procedure name="numeric_log" id="Procedure_633922" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[logarithm base m of n]]></comment>
		</procedure>
		<procedure name="numeric_lt" id="Procedure_5c1d8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_lt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="numeric_mod" id="Procedure_5353b2a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</procedure>
		<procedure name="numeric_mul" id="Procedure_25eb0f4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mul(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="numeric_ne" id="Procedure_1984000" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ne(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="numeric_out" id="Procedure_13ccdc0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_out(numeric)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="numeric_poly_avg" id="Procedure_516be66" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_avg(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_poly_stddev_pop" id="Procedure_114c4ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_stddev_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_poly_stddev_samp" id="Procedure_4c1ca8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_stddev_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_poly_sum" id="Procedure_1c9c943" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_sum(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_poly_var_pop" id="Procedure_4d1f120" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_var_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_poly_var_samp" id="Procedure_325729c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_poly_var_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_poly_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_power" id="Procedure_25e0128" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</procedure>
		<procedure name="numeric_recv" id="Procedure_31fa997" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_recv(internal, oid, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="numeric_send" id="Procedure_1be82f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_send(numeric)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="numeric_smaller" id="Procedure_4832cc8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_smaller(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="numeric_sortsupport" id="Procedure_56b201a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="numeric_sqrt" id="Procedure_36782f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</procedure>
		<procedure name="numeric_stddev_pop" id="Procedure_1eb8db1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_stddev_samp" id="Procedure_5ab42d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_sub" id="Procedure_1c78e22" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sub(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="numeric_sum" id="Procedure_5b51680" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sum(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_transform" id="Procedure_33660b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_transform$function$
]]></string>
			<comment><![CDATA[transform a numeric length coercion]]></comment>
		</procedure>
		<procedure name="numeric_uminus" id="Procedure_63f9ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uminus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_uminus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="numeric_uplus" id="Procedure_2a73964" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uplus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_uplus$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="numeric_var_pop" id="Procedure_587f06c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numeric_var_samp" id="Procedure_2665b4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="numerictypmodin" id="Procedure_26d8b72" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numerictypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numerictypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="numerictypmodout" id="Procedure_4a911e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numerictypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numerictypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="numnode" id="Procedure_6d4b3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numnode(tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_numnode$function$
]]></string>
			<comment><![CDATA[number of nodes]]></comment>
		</procedure>
		<procedure name="numrange" id="Procedure_45faa95" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[numrange constructor]]></comment>
		</procedure>
		<procedure name="numrange" id="Procedure_39a6174" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[numrange constructor]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
		</procedure>
		<procedure name="numrange_subdiff" id="Procedure_90c37a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange_subdiff(numeric, numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two numeric values]]></comment>
		</procedure>
		<procedure name="obj_description" id="Procedure_dc0f00" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11) and objsubid = 0$function$
]]></string>
			<comment><![CDATA[get description for object id and catalog name]]></comment>
		</procedure>
		<procedure name="obj_description" id="Procedure_2d5e40" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11) and objsubid = 0$function$
]]></string>
			<comment><![CDATA[get description for object id and catalog name]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<input_param name="$2" jt="12" type="name" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="octet_length" id="Procedure_4885415" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoctetlen$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</procedure>
		<procedure name="octet_length" id="Procedure_58073bc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoctetlen$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="octet_length" id="Procedure_4bcd08" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoctetlen$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="octet_length" id="Procedure_2d5c615" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoctetlen$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="oid" id="Procedure_5003ce1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oid(bigint)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i8tooid$function$
]]></string>
			<comment><![CDATA[convert int8 to oid]]></comment>
		</procedure>
		<procedure name="oideq" id="Procedure_18f0627" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oideq(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="oidge" id="Procedure_24208bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidge(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="oidgt" id="Procedure_3ea4143" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidgt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="oidin" id="Procedure_4b4b540" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidin(cstring)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidlarger" id="Procedure_5cff7bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlarger(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="oidle" id="Procedure_1b40d4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidle(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="oidlt" id="Procedure_4434a05" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="oidne" id="Procedure_1079214" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidne(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="oidout" id="Procedure_4006660" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidout(oid)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidrecv" id="Procedure_3e8fa97" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidrecv(internal)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidsend" id="Procedure_3cb4f23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsend(oid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidsmaller" id="Procedure_2d4a259" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsmaller(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="oidvectoreq" id="Procedure_fcfe0b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectoreq(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="oidvectorge" id="Procedure_154141e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorge(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="oidvectorgt" id="Procedure_42fa068" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorgt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="oidvectorin" id="Procedure_5d3c677" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorin(cstring)
 RETURNS oidvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidvectorle" id="Procedure_1a8dd5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorle(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="oidvectorlt" id="Procedure_3e56b33" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorlt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="oidvectorne" id="Procedure_92a495" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorne(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="oidvectorout" id="Procedure_1da4b6a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorout(oidvector)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidvectorrecv" id="Procedure_1dc1096" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorrecv(internal)
 RETURNS oidvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidvectorsend" id="Procedure_3040853" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorsend(oidvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="oidvectortypes" id="Procedure_5d52093" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectortypes(oidvector)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$oidvectortypes$function$
]]></string>
			<comment><![CDATA[print type names of oidvector field]]></comment>
		</procedure>
		<procedure name="on_pb" id="Procedure_3eac6c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pb(point, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_pb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="on_pl" id="Procedure_d2abc4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pl(point, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_pl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="on_ppath" id="Procedure_1d3d9d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ppath(point, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="on_ps" id="Procedure_480d43d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ps(point, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_ps$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="on_sb" id="Procedure_ac2ae7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_sb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="on_sl" id="Procedure_1e98bce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_sl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="opaque_in" id="Procedure_247577c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.opaque_in(cstring)
 RETURNS opaque
 LANGUAGE internal
 IMMUTABLE
AS $function$opaque_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="opaque_out" id="Procedure_162284f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.opaque_out(opaque)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$opaque_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="ordered_set_transition" id="Procedure_5b52d35" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition(internal, "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$ordered_set_transition$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="ordered_set_transition_multi" id="Procedure_16090cd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition_multi(internal, VARIADIC "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$ordered_set_transition_multi$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="overlaps" id="Procedure_1e5f0d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</procedure>
		<procedure name="overlaps" id="Procedure_5966272" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_578824c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_54fbe2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_559f4ef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_397491f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_bb7468" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_263f16b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_12150af" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_461ab68" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_4fff305" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_388ca4b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlaps" id="Procedure_1e8fd64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
			<input_param name="$1" jt="92" type="timetz" />
			<input_param name="$2" jt="92" type="timetz" />
			<input_param name="$3" jt="92" type="timetz" />
			<input_param name="$4" jt="92" type="timetz" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="overlay" id="Procedure_1cbae9e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</procedure>
		<procedure name="overlay" id="Procedure_291ef73" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="overlay" id="Procedure_5e8afd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="overlay" id="Procedure_2b01594" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="overlay" id="Procedure_31c908a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="overlay" id="Procedure_265170f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="4" type="int4" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="path" id="Procedure_3cfd496" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path(polygon)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_path$function$
]]></string>
			<comment><![CDATA[convert polygon to path]]></comment>
		</procedure>
		<procedure name="path_add" id="Procedure_2239c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add(path, path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="path_add_pt" id="Procedure_198be5c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="path_center" id="Procedure_17cbf76" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_center(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="path_contain_pt" id="Procedure_11d7e3d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_contain_pt(path, point)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.on_ppath($2, $1)$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="path_distance" id="Procedure_778384" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_distance(path, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="path_div_pt" id="Procedure_53c54c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_div_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="path_in" id="Procedure_4644b61" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_in(cstring)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="path_inter" id="Procedure_ef1b01" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_inter(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_inter$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</procedure>
		<procedure name="path_length" id="Procedure_36e887f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</procedure>
		<procedure name="path_mul_pt" id="Procedure_12f42d1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_mul_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="path_n_eq" id="Procedure_12dbf13" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_eq(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="path_n_ge" id="Procedure_4b266c9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_ge(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="path_n_gt" id="Procedure_2d28f8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_gt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="path_n_le" id="Procedure_3b0e2df" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_le(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="path_n_lt" id="Procedure_48f994f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_lt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="path_npoints" id="Procedure_5c4267a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="path_out" id="Procedure_1a96e3c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_out(path)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="path_recv" id="Procedure_1cbc06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_recv(internal)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="path_send" id="Procedure_9c9fa2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_send(path)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="path_sub_pt" id="Procedure_4181565" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_sub_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="pclose" id="Procedure_e82ccd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pclose(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_close$function$
]]></string>
			<comment><![CDATA[close path]]></comment>
		</procedure>
		<procedure name="percent_rank" id="Procedure_5993f51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_percent_rank$function$
]]></string>
			<comment><![CDATA[fractional rank within partition]]></comment>
		</procedure>
		<procedure name="percent_rank" id="Procedure_4b5a69c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_percent_rank$function$
]]></string>
			<comment><![CDATA[fractional rank within partition]]></comment>
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="percent_rank_final" id="Procedure_588821" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_percent_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_cont_float8_final" id="Procedure_4d5af9a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_final(internal, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_float8_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_cont_float8_multi_final" id="Procedure_3422e18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_multi_final(internal, double precision[])
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_float8_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_cont_interval_final" id="Procedure_5e3254" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_final(internal, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_interval_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_cont_interval_multi_final" id="Procedure_428e673" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_multi_final(internal, double precision[])
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_interval_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_disc_final" id="Procedure_a9788b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_final(internal, double precision, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_disc_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="percentile_disc_multi_final" id="Procedure_2b46c36" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_disc_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="pg_advisory_lock" id="Procedure_34b6743" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_lock" id="Procedure_4910a01" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="pg_advisory_lock_shared" id="Procedure_23b2e7b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_lock_shared" id="Procedure_293619a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="pg_advisory_unlock" id="Procedure_2d6acba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int8$function$
]]></string>
			<comment><![CDATA[release exclusive advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_unlock" id="Procedure_25fcc4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int8$function$
]]></string>
			<comment><![CDATA[release exclusive advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_advisory_unlock_all" id="Procedure_17fbfc2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_all()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_all$function$
]]></string>
			<comment><![CDATA[release all advisory locks]]></comment>
		</procedure>
		<procedure name="pg_advisory_unlock_shared" id="Procedure_531cf27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int8$function$
]]></string>
			<comment><![CDATA[release shared advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_unlock_shared" id="Procedure_19da155" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int8$function$
]]></string>
			<comment><![CDATA[release shared advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_advisory_xact_lock" id="Procedure_327eec5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_xact_lock" id="Procedure_c44e04" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="pg_advisory_xact_lock_shared" id="Procedure_48444c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</procedure>
		<procedure name="pg_advisory_xact_lock_shared" id="Procedure_3517979" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="pg_available_extension_versions" id="Procedure_141b78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extension_versions(OUT name name, OUT version text, OUT superuser boolean, OUT relocatable boolean, OUT schema name, OUT requires name[], OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_available_extension_versions$function$
]]></string>
			<comment><![CDATA[list available extension versions]]></comment>
		</procedure>
		<procedure name="pg_available_extensions" id="Procedure_4b38688" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extensions(OUT name name, OUT default_version text, OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_available_extensions$function$
]]></string>
			<comment><![CDATA[list available extensions]]></comment>
		</procedure>
		<procedure name="pg_backend_pid" id="Procedure_1fc523d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backend_pid()
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: current backend PID]]></comment>
		</procedure>
		<procedure name="pg_backup_start_time" id="Procedure_5499bfe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backup_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_backup_start_time$function$
]]></string>
			<comment><![CDATA[start time of an online backup]]></comment>
		</procedure>
		<procedure name="pg_cancel_backend" id="Procedure_44487f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cancel_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_cancel_backend$function$
]]></string>
			<comment><![CDATA[cancel a server process' current query]]></comment>
		</procedure>
		<procedure name="pg_char_to_encoding" id="Procedure_171b18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_char_to_encoding(name)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$PG_char_to_encoding$function$
]]></string>
			<comment><![CDATA[convert encoding name to encoding id]]></comment>
		</procedure>
		<procedure name="pg_client_encoding" id="Procedure_43d7813" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_client_encoding()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_client_encoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</procedure>
		<procedure name="pg_collation_for" id="Procedure_4a2def2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_for("any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$pg_collation_for$function$
]]></string>
			<comment><![CDATA[collation of the argument; implementation of the COLLATION FOR expression]]></comment>
		</procedure>
		<procedure name="pg_collation_is_visible" id="Procedure_3f8e4d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_collation_is_visible$function$
]]></string>
			<comment><![CDATA[is collation visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_column_is_updatable" id="Procedure_486ef81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_is_updatable(regclass, smallint, boolean)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_column_is_updatable$function$
]]></string>
			<comment><![CDATA[is a column updatable]]></comment>
		</procedure>
		<procedure name="pg_column_size" id="Procedure_3e53a6c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_size("any")
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_column_size$function$
]]></string>
			<comment><![CDATA[bytes required to store the value, perhaps with compression]]></comment>
		</procedure>
		<procedure name="pg_conf_load_time" id="Procedure_3574564" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conf_load_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_conf_load_time$function$
]]></string>
			<comment><![CDATA[configuration load time]]></comment>
		</procedure>
		<procedure name="pg_conversion_is_visible" id="Procedure_5dcbc9a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conversion_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_conversion_is_visible$function$
]]></string>
			<comment><![CDATA[is conversion visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_create_logical_replication_slot" id="Procedure_694d18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_logical_replication_slot(slot_name name, plugin name, OUT slot_name text, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_create_logical_replication_slot$function$
]]></string>
			<comment><![CDATA[set up a logical replication slot]]></comment>
		</procedure>
		<procedure name="pg_create_physical_replication_slot" id="Procedure_2b1395" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_physical_replication_slot(slot_name name, OUT slot_name name, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_create_physical_replication_slot$function$
]]></string>
			<comment><![CDATA[create a physical replication slot]]></comment>
		</procedure>
		<procedure name="pg_create_restore_point" id="Procedure_48c5be6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_restore_point(text)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_create_restore_point$function$
]]></string>
			<comment><![CDATA[create a named restore point]]></comment>
		</procedure>
		<procedure name="pg_current_xlog_insert_location" id="Procedure_1583760" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_insert_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_current_xlog_insert_location$function$
]]></string>
			<comment><![CDATA[current xlog insert location]]></comment>
		</procedure>
		<procedure name="pg_current_xlog_location" id="Procedure_c1b9cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_current_xlog_location$function$
]]></string>
			<comment><![CDATA[current xlog write location]]></comment>
		</procedure>
		<procedure name="pg_cursor" id="Procedure_4e45558" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cursor(OUT name text, OUT statement text, OUT is_holdable boolean, OUT is_binary boolean, OUT is_scrollable boolean, OUT creation_time timestamp with time zone)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_cursor$function$
]]></string>
			<comment><![CDATA[get the open cursors for this session]]></comment>
		</procedure>
		<procedure name="pg_database_size" id="Procedure_a651cc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(name)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_database_size_name$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
		</procedure>
		<procedure name="pg_database_size" id="Procedure_380c6c2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(name)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_database_size_name$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="pg_ddl_command_in" id="Procedure_45a59b3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_in(cstring)
 RETURNS pg_ddl_command
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_ddl_command_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_ddl_command_out" id="Procedure_41c2484" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_out(pg_ddl_command)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_ddl_command_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_ddl_command_recv" id="Procedure_59054dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_recv(internal)
 RETURNS pg_ddl_command
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_ddl_command_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_ddl_command_send" id="Procedure_30e5cb7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ddl_command_send(pg_ddl_command)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_ddl_command_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_describe_object" id="Procedure_5dc60e5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_describe_object(oid, oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_describe_object$function$
]]></string>
			<comment><![CDATA[get identification of SQL object]]></comment>
		</procedure>
		<procedure name="pg_drop_replication_slot" id="Procedure_1d9c0a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_drop_replication_slot(name)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_drop_replication_slot$function$
]]></string>
			<comment><![CDATA[drop a replication slot]]></comment>
		</procedure>
		<procedure name="pg_encoding_max_length" id="Procedure_3fbbcf9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_max_length(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_encoding_max_length_sql$function$
]]></string>
			<comment><![CDATA[maximum octet length of a character in given encoding]]></comment>
		</procedure>
		<procedure name="pg_encoding_to_char" id="Procedure_1ff1a03" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_to_char(integer)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$PG_encoding_to_char$function$
]]></string>
			<comment><![CDATA[convert encoding id to encoding name]]></comment>
		</procedure>
		<procedure name="pg_event_trigger_ddl_commands" id="Procedure_4fc6e4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_ddl_commands(OUT classid oid, OUT objid oid, OUT objsubid integer, OUT command_tag text, OUT object_type text, OUT schema_name text, OUT object_identity text, OUT in_extension boolean, OUT command pg_ddl_command)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_event_trigger_ddl_commands$function$
]]></string>
			<comment><![CDATA[list DDL actions being executed by the current command]]></comment>
		</procedure>
		<procedure name="pg_event_trigger_dropped_objects" id="Procedure_1311f4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_dropped_objects(OUT classid oid, OUT objid oid, OUT objsubid integer, OUT original boolean, OUT normal boolean, OUT is_temporary boolean, OUT object_type text, OUT schema_name text, OUT object_name text, OUT object_identity text, OUT address_names text[], OUT address_args text[])
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_event_trigger_dropped_objects$function$
]]></string>
			<comment><![CDATA[list objects dropped by the current command]]></comment>
		</procedure>
		<procedure name="pg_event_trigger_table_rewrite_oid" id="Procedure_564b1fb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_table_rewrite_oid(OUT oid oid)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_event_trigger_table_rewrite_oid$function$
]]></string>
			<comment><![CDATA[return Oid of the table getting rewritten]]></comment>
		</procedure>
		<procedure name="pg_event_trigger_table_rewrite_reason" id="Procedure_1bce5b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_table_rewrite_reason()
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_event_trigger_table_rewrite_reason$function$
]]></string>
			<comment><![CDATA[return reason code for table getting rewritten]]></comment>
		</procedure>
		<procedure name="pg_export_snapshot" id="Procedure_216470b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_export_snapshot()
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_export_snapshot$function$
]]></string>
			<comment><![CDATA[export a snapshot]]></comment>
		</procedure>
		<procedure name="pg_extension_config_dump" id="Procedure_5b6c158" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_config_dump(regclass, text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_extension_config_dump$function$
]]></string>
			<comment><![CDATA[flag an extension's table contents to be emitted by pg_dump]]></comment>
		</procedure>
		<procedure name="pg_extension_update_paths" id="Procedure_1b052fb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_update_paths(name name, OUT source text, OUT target text, OUT path text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_extension_update_paths$function$
]]></string>
			<comment><![CDATA[list an extension's version update paths]]></comment>
		</procedure>
		<procedure name="pg_filenode_relation" id="Procedure_4d336af" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_filenode_relation(oid, oid)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_filenode_relation$function$
]]></string>
			<comment><![CDATA[relation OID for filenode and tablespace]]></comment>
		</procedure>
		<procedure name="pg_function_is_visible" id="Procedure_4d42887" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_function_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_function_is_visible$function$
]]></string>
			<comment><![CDATA[is function visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_get_constraintdef" id="Procedure_3131863" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_constraintdef$function$
]]></string>
			<comment><![CDATA[constraint description]]></comment>
		</procedure>
		<procedure name="pg_get_constraintdef" id="Procedure_c1aa40" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_constraintdef$function$
]]></string>
			<comment><![CDATA[constraint description]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_expr" id="Procedure_74d37f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_expr$function$
]]></string>
			<comment><![CDATA[deparse an encoded expression]]></comment>
		</procedure>
		<procedure name="pg_get_expr" id="Procedure_6d4cc8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_expr$function$
]]></string>
			<comment><![CDATA[deparse an encoded expression]]></comment>
			<input_param name="$1" jt="1111" type="pg_node_tree" />
			<input_param name="$2" jt="-5" type="oid" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_function_arg_default" id="Procedure_8f50d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arg_default(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_arg_default$function$
]]></string>
			<comment><![CDATA[function argument default]]></comment>
		</procedure>
		<procedure name="pg_get_function_arguments" id="Procedure_425ce6a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_arguments$function$
]]></string>
			<comment><![CDATA[argument list of a function]]></comment>
		</procedure>
		<procedure name="pg_get_function_identity_arguments" id="Procedure_1441034" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_identity_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_identity_arguments$function$
]]></string>
			<comment><![CDATA[identity argument list of a function]]></comment>
		</procedure>
		<procedure name="pg_get_function_result" id="Procedure_4b9c444" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_result(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_result$function$
]]></string>
			<comment><![CDATA[result type of a function]]></comment>
		</procedure>
		<procedure name="pg_get_functiondef" id="Procedure_479ce45" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_functiondef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_functiondef$function$
]]></string>
			<comment><![CDATA[definition of a function]]></comment>
		</procedure>
		<procedure name="pg_get_indexdef" id="Procedure_48f075" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_indexdef$function$
]]></string>
			<comment><![CDATA[index description]]></comment>
		</procedure>
		<procedure name="pg_get_indexdef" id="Procedure_c1ae8c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_indexdef$function$
]]></string>
			<comment><![CDATA[index description]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_keywords" id="Procedure_1fe936a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_keywords(OUT word text, OUT catcode "char", OUT catdesc text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 400
AS $function$pg_get_keywords$function$
]]></string>
			<comment><![CDATA[list of SQL keywords]]></comment>
		</procedure>
		<procedure name="pg_get_multixact_members" id="Procedure_4f3fb82" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_multixact_members(multixid xid, OUT xid xid, OUT mode text)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_get_multixact_members$function$
]]></string>
			<comment><![CDATA[view members of a multixactid]]></comment>
		</procedure>
		<procedure name="pg_get_object_address" id="Procedure_404a4e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_object_address(type text, name text[], args text[], OUT classid oid, OUT objid oid, OUT subobjid integer)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_object_address$function$
]]></string>
			<comment><![CDATA[get OID-based object address from name/args arrays]]></comment>
		</procedure>
		<procedure name="pg_get_replication_slots" id="Procedure_3f84c1f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_replication_slots(OUT slot_name name, OUT plugin name, OUT slot_type text, OUT datoid oid, OUT active boolean, OUT active_pid integer, OUT xmin xid, OUT catalog_xmin xid, OUT restart_lsn pg_lsn)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 10
AS $function$pg_get_replication_slots$function$
]]></string>
			<comment><![CDATA[information about replication slots currently in use]]></comment>
		</procedure>
		<procedure name="pg_get_ruledef" id="Procedure_c08501" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_ruledef$function$
]]></string>
			<comment><![CDATA[source text of a rule]]></comment>
		</procedure>
		<procedure name="pg_get_ruledef" id="Procedure_3bd9660" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_ruledef$function$
]]></string>
			<comment><![CDATA[source text of a rule]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_serial_sequence" id="Procedure_5522781" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_serial_sequence(text, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_serial_sequence$function$
]]></string>
			<comment><![CDATA[name of sequence for a serial column]]></comment>
		</procedure>
		<procedure name="pg_get_triggerdef" id="Procedure_144849e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_triggerdef$function$
]]></string>
			<comment><![CDATA[trigger description]]></comment>
		</procedure>
		<procedure name="pg_get_triggerdef" id="Procedure_a4f754" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_triggerdef$function$
]]></string>
			<comment><![CDATA[trigger description]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_userbyid" id="Procedure_23da41" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_userbyid(oid)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_userbyid$function$
]]></string>
			<comment><![CDATA[role name by OID (with fallback)]]></comment>
		</procedure>
		<procedure name="pg_get_viewdef" id="Procedure_304a07f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</procedure>
		<procedure name="pg_get_viewdef" id="Procedure_4e5690" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_viewdef" id="Procedure_11f02a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_viewdef" id="Procedure_29344f4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_get_viewdef" id="Procedure_29b5844" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_has_role" id="Procedure_350dd88" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</procedure>
		<procedure name="pg_has_role" id="Procedure_551ed35" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="name" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_has_role" id="Procedure_1eebcbb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="name" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_has_role" id="Procedure_24004d6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="name" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_has_role" id="Procedure_56715cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="name" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_has_role" id="Procedure_5d29421" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<input_param name="$2" jt="12" type="name" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_identify_object" id="Procedure_2af44ae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_identify_object(classid oid, objid oid, subobjid integer, OUT type text, OUT schema text, OUT name text, OUT identity text)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_identify_object$function$
]]></string>
			<comment><![CDATA[get machine-parseable identification of SQL object]]></comment>
		</procedure>
		<procedure name="pg_identify_object_as_address" id="Procedure_577515b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_identify_object_as_address(classid oid, objid oid, subobjid integer, OUT type text, OUT object_names text[], OUT object_args text[])
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_identify_object_as_address$function$
]]></string>
			<comment><![CDATA[get identification of SQL object for pg_get_object_address()]]></comment>
		</procedure>
		<procedure name="pg_indexes_size" id="Procedure_181cf29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_indexes_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_indexes_size$function$
]]></string>
			<comment><![CDATA[disk space usage for all indexes attached to the specified table]]></comment>
		</procedure>
		<procedure name="pg_is_in_backup" id="Procedure_b40d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_backup()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_in_backup$function$
]]></string>
			<comment><![CDATA[true if server is in online backup]]></comment>
		</procedure>
		<procedure name="pg_is_in_recovery" id="Procedure_1571ed2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_recovery()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_in_recovery$function$
]]></string>
			<comment><![CDATA[true if server is in recovery]]></comment>
		</procedure>
		<procedure name="pg_is_other_temp_schema" id="Procedure_413debd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_other_temp_schema(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_is_other_temp_schema$function$
]]></string>
			<comment><![CDATA[is schema another session's temp schema?]]></comment>
		</procedure>
		<procedure name="pg_is_xlog_replay_paused" id="Procedure_1e37205" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_xlog_replay_paused()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_xlog_replay_paused$function$
]]></string>
			<comment><![CDATA[true if xlog replay is paused]]></comment>
		</procedure>
		<procedure name="pg_last_committed_xact" id="Procedure_342e3eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_committed_xact(OUT xid xid, OUT "timestamp" timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_last_committed_xact$function$
]]></string>
			<comment><![CDATA[get transaction Id and commit timestamp of latest transaction commit]]></comment>
		</procedure>
		<procedure name="pg_last_xact_replay_timestamp" id="Procedure_3f4c5a5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xact_replay_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STRICT
AS $function$pg_last_xact_replay_timestamp$function$
]]></string>
			<comment><![CDATA[timestamp of last replay xact]]></comment>
		</procedure>
		<procedure name="pg_last_xlog_receive_location" id="Procedure_3196451" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_receive_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_last_xlog_receive_location$function$
]]></string>
			<comment><![CDATA[current xlog flush location]]></comment>
		</procedure>
		<procedure name="pg_last_xlog_replay_location" id="Procedure_48197f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_replay_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_last_xlog_replay_location$function$
]]></string>
			<comment><![CDATA[last xlog replay location]]></comment>
		</procedure>
		<procedure name="pg_listening_channels" id="Procedure_251e651" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_listening_channels()
 RETURNS SETOF text
 LANGUAGE internal
 STABLE STRICT ROWS 10
AS $function$pg_listening_channels$function$
]]></string>
			<comment><![CDATA[get the channels that the current backend listens to]]></comment>
		</procedure>
		<procedure name="pg_lock_status" id="Procedure_2b93696" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lock_status(OUT locktype text, OUT database oid, OUT relation oid, OUT page integer, OUT tuple smallint, OUT virtualxid text, OUT transactionid xid, OUT classid oid, OUT objid oid, OUT objsubid smallint, OUT virtualtransaction text, OUT pid integer, OUT mode text, OUT granted boolean, OUT fastpath boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_lock_status$function$
]]></string>
			<comment><![CDATA[view system lock information]]></comment>
		</procedure>
		<procedure name="pg_logical_slot_get_binary_changes" id="Procedure_2ecd6af" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_binary_changes$function$
]]></string>
			<comment><![CDATA[get binary changes from replication slot]]></comment>
		</procedure>
		<procedure name="pg_logical_slot_get_changes" id="Procedure_57167fb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_changes$function$
]]></string>
			<comment><![CDATA[get changes from replication slot]]></comment>
		</procedure>
		<procedure name="pg_logical_slot_peek_binary_changes" id="Procedure_7be4e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_binary_changes$function$
]]></string>
			<comment><![CDATA[peek at binary changes from replication slot]]></comment>
		</procedure>
		<procedure name="pg_logical_slot_peek_changes" id="Procedure_e3b76e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_changes$function$
]]></string>
			<comment><![CDATA[peek at changes from replication slot]]></comment>
		</procedure>
		<procedure name="pg_ls_dir" id="Procedure_270b967" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text)
 RETURNS SETOF text
 LANGUAGE internal
 STRICT
AS $function$pg_ls_dir_1arg$function$
]]></string>
			<comment><![CDATA[list all files in a directory]]></comment>
		</procedure>
		<procedure name="pg_ls_dir" id="Procedure_1e662a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text)
 RETURNS SETOF text
 LANGUAGE internal
 STRICT
AS $function$pg_ls_dir_1arg$function$
]]></string>
			<comment><![CDATA[list all files in a directory]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_lsn_cmp" id="Procedure_124797a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="pg_lsn_eq" id="Procedure_b469d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_ge" id="Procedure_110dfa8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_gt" id="Procedure_3f7f59b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_hash" id="Procedure_564c379" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_hash(pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="pg_lsn_in" id="Procedure_8f1cae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_in(cstring)
 RETURNS pg_lsn
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_lsn_le" id="Procedure_3580e8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_le(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_lt" id="Procedure_ee44ad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_mi" id="Procedure_2659015" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_ne" id="Procedure_f4f316" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="pg_lsn_out" id="Procedure_135b8ca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_out(pg_lsn)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_lsn_recv" id="Procedure_2b949f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_recv(internal)
 RETURNS pg_lsn
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_lsn_send" id="Procedure_f1dc43" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_send(pg_lsn)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_my_temp_schema" id="Procedure_2974dfb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_my_temp_schema()
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_my_temp_schema$function$
]]></string>
			<comment><![CDATA[get OID of current session's temp schema, if any]]></comment>
		</procedure>
		<procedure name="pg_node_tree_in" id="Procedure_2102728" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_in(cstring)
 RETURNS pg_node_tree
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_node_tree_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_node_tree_out" id="Procedure_27405af" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_out(pg_node_tree)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_node_tree_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_node_tree_recv" id="Procedure_32fe9b1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_recv(internal)
 RETURNS pg_node_tree
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_node_tree_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_node_tree_send" id="Procedure_51b61da" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_send(pg_node_tree)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_node_tree_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="pg_notify" id="Procedure_4e2a6a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_notify(text, text)
 RETURNS void
 LANGUAGE internal
AS $function$pg_notify$function$
]]></string>
			<comment><![CDATA[send a notification event]]></comment>
		</procedure>
		<procedure name="pg_opclass_is_visible" id="Procedure_5ce7601" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opclass_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_opclass_is_visible$function$
]]></string>
			<comment><![CDATA[is opclass visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_operator_is_visible" id="Procedure_1bcf62b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_operator_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_operator_is_visible$function$
]]></string>
			<comment><![CDATA[is operator visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_opfamily_is_visible" id="Procedure_4b797e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opfamily_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_opfamily_is_visible$function$
]]></string>
			<comment><![CDATA[is opfamily visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_options_to_table" id="Procedure_4350689" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_options_to_table(options_array text[], OUT option_name text, OUT option_value text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT ROWS 3
AS $function$pg_options_to_table$function$
]]></string>
			<comment><![CDATA[convert generic options array to name/value table]]></comment>
		</procedure>
		<procedure name="pg_postmaster_start_time" id="Procedure_3483f61" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_postmaster_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_postmaster_start_time$function$
]]></string>
			<comment><![CDATA[postmaster start time]]></comment>
		</procedure>
		<procedure name="pg_prepared_statement" id="Procedure_568b037" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_statement(OUT name text, OUT statement text, OUT prepare_time timestamp with time zone, OUT parameter_types regtype[], OUT from_sql boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_prepared_statement$function$
]]></string>
			<comment><![CDATA[get the prepared statements for this session]]></comment>
		</procedure>
		<procedure name="pg_prepared_xact" id="Procedure_23d14b6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_xact(OUT transaction xid, OUT gid text, OUT prepared timestamp with time zone, OUT ownerid oid, OUT dbid oid)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_prepared_xact$function$
]]></string>
			<comment><![CDATA[view two-phase transactions]]></comment>
		</procedure>
		<procedure name="pg_read_binary_file" id="Procedure_4ecebf7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
		</procedure>
		<procedure name="pg_read_binary_file" id="Procedure_56143fc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-5" type="int8" />
			<input_param name="$3" jt="-5" type="int8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pg_read_binary_file" id="Procedure_3866254" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint, boolean)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-5" type="int8" />
			<input_param name="$3" jt="-5" type="int8" />
			<input_param name="$4" jt="-7" type="bool" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pg_read_file" id="Procedure_58bbf7c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_read_file_off_len$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
		</procedure>
		<procedure name="pg_read_file" id="Procedure_3eb5fcd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_read_file_off_len$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-5" type="int8" />
			<input_param name="$3" jt="-5" type="int8" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_read_file" id="Procedure_4cfd149" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_read_file_off_len$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-5" type="int8" />
			<input_param name="$3" jt="-5" type="int8" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_relation_filenode" id="Procedure_195676" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filenode(regclass)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_relation_filenode$function$
]]></string>
			<comment><![CDATA[filenode identifier of relation]]></comment>
		</procedure>
		<procedure name="pg_relation_filepath" id="Procedure_174aef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filepath(regclass)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_relation_filepath$function$
]]></string>
			<comment><![CDATA[file path of relation]]></comment>
		</procedure>
		<procedure name="pg_relation_is_updatable" id="Procedure_ae2c86" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_is_updatable(regclass, boolean)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_relation_is_updatable$function$
]]></string>
			<comment><![CDATA[is a relation insertable/updatable/deletable]]></comment>
		</procedure>
		<procedure name="pg_relation_size" id="Procedure_2ca9afe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass)
 RETURNS bigint
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_relation_size($1, 'main')$function$
]]></string>
			<comment><![CDATA[disk space usage for the main fork of the specified table or index]]></comment>
		</procedure>
		<procedure name="pg_relation_size" id="Procedure_5618198" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass)
 RETURNS bigint
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_relation_size($1, 'main')$function$
]]></string>
			<comment><![CDATA[disk space usage for the main fork of the specified table or index]]></comment>
			<input_param name="$1" jt="1111" type="regclass" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="pg_reload_conf" id="Procedure_264da67" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_reload_conf()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_reload_conf$function$
]]></string>
			<comment><![CDATA[reload configuration files]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_advance" id="Procedure_45a5b6c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_advance(text, pg_lsn)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_advance$function$
]]></string>
			<comment><![CDATA[advance replication itentifier to specific location]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_create" id="Procedure_5a6131a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_create(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_create$function$
]]></string>
			<comment><![CDATA[create a replication origin]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_drop" id="Procedure_3087229" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_drop(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_drop$function$
]]></string>
			<comment><![CDATA[drop replication origin identified by its name]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_oid" id="Procedure_391ae3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_oid(text)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_replication_origin_oid$function$
]]></string>
			<comment><![CDATA[translate the replication origin's name to its id]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_progress" id="Procedure_2c84a52" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_progress(text, boolean)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_progress$function$
]]></string>
			<comment><![CDATA[get an individual replication origin's replication progress]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_session_is_setup" id="Procedure_534403e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_is_setup()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_is_setup$function$
]]></string>
			<comment><![CDATA[is a replication origin configured in this session]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_session_progress" id="Procedure_633da6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_progress(boolean)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_progress$function$
]]></string>
			<comment><![CDATA[get the replication progress of the current session]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_session_reset" id="Procedure_292f54d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_reset()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_reset$function$
]]></string>
			<comment><![CDATA[teardown configured replication progress tracking]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_session_setup" id="Procedure_2c2b488" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_session_setup(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_session_setup$function$
]]></string>
			<comment><![CDATA[configure session to maintain replication progress tracking for the passed in origin]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_xact_reset" id="Procedure_3c3f3c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_xact_reset(pg_lsn, timestamp with time zone)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_xact_reset$function$
]]></string>
			<comment><![CDATA[reset the transaction's origin lsn and timestamp]]></comment>
		</procedure>
		<procedure name="pg_replication_origin_xact_setup" id="Procedure_17f6a05" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_replication_origin_xact_setup(pg_lsn, timestamp with time zone)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_replication_origin_xact_setup$function$
]]></string>
			<comment><![CDATA[setup the transaction's origin lsn and timestamp]]></comment>
		</procedure>
		<procedure name="pg_rotate_logfile" id="Procedure_3260eef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_rotate_logfile()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_rotate_logfile$function$
]]></string>
			<comment><![CDATA[rotate log file]]></comment>
		</procedure>
		<procedure name="pg_sequence_parameters" id="Procedure_5445ff9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sequence_parameters(sequence_oid oid, OUT start_value bigint, OUT minimum_value bigint, OUT maximum_value bigint, OUT increment bigint, OUT cycle_option boolean)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_sequence_parameters$function$
]]></string>
			<comment><![CDATA[sequence parameters, for use by information schema]]></comment>
		</procedure>
		<procedure name="pg_show_all_file_settings" id="Procedure_5f2c5fb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_all_file_settings(OUT sourcefile text, OUT sourceline integer, OUT seqno integer, OUT name text, OUT setting text, OUT applied boolean, OUT error text)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$show_all_file_settings$function$
]]></string>
			<comment><![CDATA[show config file settings]]></comment>
		</procedure>
		<procedure name="pg_show_all_settings" id="Procedure_56fdc06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_all_settings(OUT name text, OUT setting text, OUT unit text, OUT category text, OUT short_desc text, OUT extra_desc text, OUT context text, OUT vartype text, OUT source text, OUT min_val text, OUT max_val text, OUT enumvals text[], OUT boot_val text, OUT reset_val text, OUT sourcefile text, OUT sourceline integer, OUT pending_restart boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$show_all_settings$function$
]]></string>
			<comment><![CDATA[SHOW ALL as a function]]></comment>
		</procedure>
		<procedure name="pg_show_replication_origin_status" id="Procedure_195640c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_replication_origin_status(OUT local_id oid, OUT external_id text, OUT remote_lsn pg_lsn, OUT local_lsn pg_lsn)
 RETURNS SETOF record
 LANGUAGE internal
 ROWS 100
AS $function$pg_show_replication_origin_status$function$
]]></string>
			<comment><![CDATA[get progress for all replication origins]]></comment>
		</procedure>
		<procedure name="pg_size_pretty" id="Procedure_19f9778" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_size_pretty$function$
]]></string>
			<comment><![CDATA[convert a long int to a human readable text using size units]]></comment>
		</procedure>
		<procedure name="pg_size_pretty" id="Procedure_23e915e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_size_pretty$function$
]]></string>
			<comment><![CDATA[convert a long int to a human readable text using size units]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pg_sleep" id="Procedure_5f40823" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep(double precision)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_sleep$function$
]]></string>
			<comment><![CDATA[sleep for the specified time in seconds]]></comment>
		</procedure>
		<procedure name="pg_sleep_for" id="Procedure_5f5a849" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_for(interval)
 RETURNS void
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from pg_catalog.clock_timestamp() operator(pg_catalog.+) $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep for the specified interval]]></comment>
		</procedure>
		<procedure name="pg_sleep_until" id="Procedure_e41e5d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_until(timestamp with time zone)
 RETURNS void
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep until the specified time]]></comment>
		</procedure>
		<procedure name="pg_start_backup" id="Procedure_7af89d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_start_backup(label text, fast boolean DEFAULT false)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_start_backup$function$
]]></string>
			<comment><![CDATA[prepare for taking an online backup]]></comment>
		</procedure>
		<procedure name="pg_stat_clear_snapshot" id="Procedure_568855a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_clear_snapshot()
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_clear_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: discard current transaction's statistics snapshot]]></comment>
		</procedure>
		<procedure name="pg_stat_file" id="Procedure_575ffcf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_stat_file_1arg$function$
]]></string>
			<comment><![CDATA[get information about file]]></comment>
		</procedure>
		<procedure name="pg_stat_file" id="Procedure_48d451e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_stat_file_1arg$function$
]]></string>
			<comment><![CDATA[get information about file]]></comment>
			<input_param name="filename" jt="12" type="text" />
			<input_param name="size" jt="-5" type="int8" />
			<input_param name="access" jt="93" type="timestamptz" />
			<input_param name="modification" jt="93" type="timestamptz" />
			<input_param name="change" jt="93" type="timestamptz" />
			<input_param name="creation" jt="93" type="timestamptz" />
			<input_param name="isdir" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_stat_get_activity" id="Procedure_37995e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_activity(pid integer, OUT datid oid, OUT pid integer, OUT usesysid oid, OUT application_name text, OUT state text, OUT query text, OUT waiting boolean, OUT xact_start timestamp with time zone, OUT query_start timestamp with time zone, OUT backend_start timestamp with time zone, OUT state_change timestamp with time zone, OUT client_addr inet, OUT client_hostname text, OUT client_port integer, OUT backend_xid xid, OUT backend_xmin xid, OUT ssl boolean, OUT sslversion text, OUT sslcipher text, OUT sslbits integer, OUT sslcompression boolean, OUT sslclientdn text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$pg_stat_get_activity$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active backends]]></comment>
		</procedure>
		<procedure name="pg_stat_get_analyze_count" id="Procedure_f31e85" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_analyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_analyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual analyzes for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_archiver" id="Procedure_53d0b3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_archiver(OUT archived_count bigint, OUT last_archived_wal text, OUT last_archived_time timestamp with time zone, OUT failed_count bigint, OUT last_failed_wal text, OUT last_failed_time timestamp with time zone, OUT stats_reset timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 STABLE
AS $function$pg_stat_get_archiver$function$
]]></string>
			<comment><![CDATA[statistics: information about WAL archiver]]></comment>
		</procedure>
		<procedure name="pg_stat_get_autoanalyze_count" id="Procedure_14b717e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autoanalyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_autoanalyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto analyzes for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_autovacuum_count" id="Procedure_3f11c73" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autovacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_autovacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto vacuums for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_activity" id="Procedure_4eed9f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity(integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_activity$function$
]]></string>
			<comment><![CDATA[statistics: current query of backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_activity_start" id="Procedure_10631bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_activity_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current query of backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_client_addr" id="Procedure_52ec806" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_addr(integer)
 RETURNS inet
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_client_addr$function$
]]></string>
			<comment><![CDATA[statistics: address of client connected to backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_client_port" id="Procedure_55bb0c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_port(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_client_port$function$
]]></string>
			<comment><![CDATA[statistics: port number of client connected to backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_dbid" id="Procedure_ef0ff2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_dbid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_dbid$function$
]]></string>
			<comment><![CDATA[statistics: database ID of backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_idset" id="Procedure_4615337" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_idset()
 RETURNS SETOF integer
 LANGUAGE internal
 STABLE STRICT ROWS 100
AS $function$pg_stat_get_backend_idset$function$
]]></string>
			<comment><![CDATA[statistics: currently active backend IDs]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_pid" id="Procedure_34494a3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_pid(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: PID of backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_start" id="Procedure_2826239" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current backend session]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_userid" id="Procedure_4c330e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_userid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_userid$function$
]]></string>
			<comment><![CDATA[statistics: user ID of backend]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_waiting" id="Procedure_2877f53" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_waiting(integer)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_waiting$function$
]]></string>
			<comment><![CDATA[statistics: is backend currently waiting for a lock]]></comment>
		</procedure>
		<procedure name="pg_stat_get_backend_xact_start" id="Procedure_47feb2e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_xact_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_xact_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for backend's current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_buf_written_checkpoints" id="Procedure_56dd4a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_buf_written_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter during checkpoints]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_buf_written_clean" id="Procedure_54f6ae7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_buf_written_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter for cleaning dirty buffers]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_maxwritten_clean" id="Procedure_333859a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_maxwritten_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_maxwritten_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_requested_checkpoints" id="Procedure_406ed8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_requested_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_requested_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of backend requested checkpoints started by the bgwriter]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_stat_reset_time" id="Procedure_23392aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_stat_reset_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for the bgwriter]]></comment>
		</procedure>
		<procedure name="pg_stat_get_bgwriter_timed_checkpoints" id="Procedure_47c09e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_timed_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_timed_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of timed checkpoints started by the bgwriter]]></comment>
		</procedure>
		<procedure name="pg_stat_get_blocks_fetched" id="Procedure_21ffcde" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched]]></comment>
		</procedure>
		<procedure name="pg_stat_get_blocks_hit" id="Procedure_413134f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache]]></comment>
		</procedure>
		<procedure name="pg_stat_get_buf_alloc" id="Procedure_294fc3b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_alloc()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_alloc$function$
]]></string>
			<comment><![CDATA[statistics: number of buffer allocations]]></comment>
		</procedure>
		<procedure name="pg_stat_get_buf_fsync_backend" id="Procedure_4bf7ff4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_fsync_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_fsync_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of backend buffer writes that did their own fsync]]></comment>
		</procedure>
		<procedure name="pg_stat_get_buf_written_backend" id="Procedure_309f50c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_written_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_written_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by backends]]></comment>
		</procedure>
		<procedure name="pg_stat_get_checkpoint_sync_time" id="Procedure_2eaf440" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_sync_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_checkpoint_sync_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent synchronizing buffers to disk, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_checkpoint_write_time" id="Procedure_1e66a3f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_write_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_checkpoint_write_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent writing buffers to disk, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_blk_read_time" id="Procedure_13ec259" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_read_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blk_read_time$function$
]]></string>
			<comment><![CDATA[statistics: block read time, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_blk_write_time" id="Procedure_1f43488" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_write_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blk_write_time$function$
]]></string>
			<comment><![CDATA[statistics: block write time, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_blocks_fetched" id="Procedure_1280c28" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: blocks fetched for database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_blocks_hit" id="Procedure_4388ab1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: blocks found in cache for database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_all" id="Procedure_5f39e10" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_all(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_all$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_bufferpin" id="Procedure_3dd346b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_bufferpin(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_bufferpin$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by shared buffer pin]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_lock" id="Procedure_471d9fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_lock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_lock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by relation lock]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_snapshot" id="Procedure_da6796" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_snapshot(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by snapshot expiry]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_startup_deadlock" id="Procedure_4ed46b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_startup_deadlock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by buffer deadlock]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_conflict_tablespace" id="Procedure_4805008" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_tablespace(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_tablespace$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by drop tablespace]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_deadlocks" id="Procedure_3553556" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_deadlocks(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_deadlocks$function$
]]></string>
			<comment><![CDATA[statistics: deadlocks detected in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_numbackends" id="Procedure_46fe564" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_numbackends(oid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_numbackends$function$
]]></string>
			<comment><![CDATA[statistics: number of backends in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_stat_reset_time" id="Procedure_63786b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_stat_reset_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for a database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_temp_bytes" id="Procedure_2596acc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_bytes(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_temp_bytes$function$
]]></string>
			<comment><![CDATA[statistics: number of bytes in temporary files written]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_temp_files" id="Procedure_1c45bbd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_files(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_temp_files$function$
]]></string>
			<comment><![CDATA[statistics: number of temporary files written]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_tuples_deleted" id="Procedure_1ead5fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: tuples deleted in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_tuples_fetched" id="Procedure_2eaf7fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: tuples fetched for database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_tuples_inserted" id="Procedure_55f550" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: tuples inserted in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_tuples_returned" id="Procedure_65144f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: tuples returned for database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_tuples_updated" id="Procedure_123e940" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: tuples updated in database]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_xact_commit" id="Procedure_5201b37" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_commit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_xact_commit$function$
]]></string>
			<comment><![CDATA[statistics: transactions committed]]></comment>
		</procedure>
		<procedure name="pg_stat_get_db_xact_rollback" id="Procedure_5cabafe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_rollback(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_xact_rollback$function$
]]></string>
			<comment><![CDATA[statistics: transactions rolled back]]></comment>
		</procedure>
		<procedure name="pg_stat_get_dead_tuples" id="Procedure_33e7ac5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_dead_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_dead_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of dead tuples]]></comment>
		</procedure>
		<procedure name="pg_stat_get_function_calls" id="Procedure_19942b0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls]]></comment>
		</procedure>
		<procedure name="pg_stat_get_function_self_time" id="Procedure_dcab25" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_function_total_time" id="Procedure_3001402" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_last_analyze_time" id="Procedure_495c8b9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_analyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_analyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual analyze time for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_last_autoanalyze_time" id="Procedure_17a4300" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autoanalyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_autoanalyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto analyze time for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_last_autovacuum_time" id="Procedure_5e5e2ee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autovacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_autovacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto vacuum time for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_last_vacuum_time" id="Procedure_544e50a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_vacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_vacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual vacuum time for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_live_tuples" id="Procedure_3af1ae6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_live_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_live_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of live tuples]]></comment>
		</procedure>
		<procedure name="pg_stat_get_mod_since_analyze" id="Procedure_5a29332" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_mod_since_analyze(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_mod_since_analyze$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples changed since last analyze]]></comment>
		</procedure>
		<procedure name="pg_stat_get_numscans" id="Procedure_5e28b4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index]]></comment>
		</procedure>
		<procedure name="pg_stat_get_snapshot_timestamp" id="Procedure_2e63e36" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_snapshot_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_snapshot_timestamp$function$
]]></string>
			<comment><![CDATA[statistics: timestamp of the current statistics snapshot]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_deleted" id="Procedure_14698a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_fetched" id="Procedure_a3f7d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_hot_updated" id="Procedure_217678c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_inserted" id="Procedure_694150" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_returned" id="Procedure_49a67ca" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan]]></comment>
		</procedure>
		<procedure name="pg_stat_get_tuples_updated" id="Procedure_1932161" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated]]></comment>
		</procedure>
		<procedure name="pg_stat_get_vacuum_count" id="Procedure_3b0bca8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_vacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_vacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual vacuums for a table]]></comment>
		</procedure>
		<procedure name="pg_stat_get_wal_senders" id="Procedure_41937fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_wal_senders(OUT pid integer, OUT state text, OUT sent_location pg_lsn, OUT write_location pg_lsn, OUT flush_location pg_lsn, OUT replay_location pg_lsn, OUT sync_priority integer, OUT sync_state text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 10
AS $function$pg_stat_get_wal_senders$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active replication]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_blocks_fetched" id="Procedure_3caa501" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_blocks_hit" id="Procedure_29ab9ec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_function_calls" id="Procedure_1a3723e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_function_self_time" id="Procedure_149989f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function in current transaction, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_function_total_time" id="Procedure_307a3d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function in current transaction, in msec]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_numscans" id="Procedure_494809c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_deleted" id="Procedure_266ec4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_fetched" id="Procedure_3f69627" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_hot_updated" id="Procedure_c81326" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_inserted" id="Procedure_255ab73" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_returned" id="Procedure_494341a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_get_xact_tuples_updated" id="Procedure_46ce8dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated in current transaction]]></comment>
		</procedure>
		<procedure name="pg_stat_reset" id="Procedure_57a3a24" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset()
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_reset$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for current database]]></comment>
		</procedure>
		<procedure name="pg_stat_reset_shared" id="Procedure_9f7eae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_shared(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_stat_reset_shared$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics shared across the cluster]]></comment>
		</procedure>
		<procedure name="pg_stat_reset_single_function_counters" id="Procedure_59c6098" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_function_counters(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_stat_reset_single_function_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single function in the current database]]></comment>
		</procedure>
		<procedure name="pg_stat_reset_single_table_counters" id="Procedure_210aafc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_table_counters(oid)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_stat_reset_single_table_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single table or index in the current database]]></comment>
		</procedure>
		<procedure name="pg_stop_backup" id="Procedure_1c67d69" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_stop_backup$function$
]]></string>
			<comment><![CDATA[finish taking an online backup]]></comment>
		</procedure>
		<procedure name="pg_switch_xlog" id="Procedure_3f70c70" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_switch_xlog()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_switch_xlog$function$
]]></string>
			<comment><![CDATA[switch to new xlog file]]></comment>
		</procedure>
		<procedure name="pg_table_is_visible" id="Procedure_21a323e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_table_is_visible$function$
]]></string>
			<comment><![CDATA[is table visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_table_size" id="Procedure_58bd0b9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_table_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the specified table, including TOAST, free space and visibility map]]></comment>
		</procedure>
		<procedure name="pg_tablespace_databases" id="Procedure_4805932" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_databases(oid)
 RETURNS SETOF oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_tablespace_databases$function$
]]></string>
			<comment><![CDATA[get OIDs of databases in a tablespace]]></comment>
		</procedure>
		<procedure name="pg_tablespace_location" id="Procedure_4a0f4c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_location(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_tablespace_location$function$
]]></string>
			<comment><![CDATA[tablespace location]]></comment>
		</procedure>
		<procedure name="pg_tablespace_size" id="Procedure_5926afc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_tablespace_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
		</procedure>
		<procedure name="pg_tablespace_size" id="Procedure_265372e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_tablespace_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="pg_terminate_backend" id="Procedure_5173dc9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_terminate_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_terminate_backend$function$
]]></string>
			<comment><![CDATA[terminate a server process]]></comment>
		</procedure>
		<procedure name="pg_timezone_abbrevs" id="Procedure_715709" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_abbrevs(OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_timezone_abbrevs$function$
]]></string>
			<comment><![CDATA[get the available time zone abbreviations]]></comment>
		</procedure>
		<procedure name="pg_timezone_names" id="Procedure_3b8f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_names(OUT name text, OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_timezone_names$function$
]]></string>
			<comment><![CDATA[get the available time zone names]]></comment>
		</procedure>
		<procedure name="pg_total_relation_size" id="Procedure_4508adc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_total_relation_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_total_relation_size$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified table and associated indexes]]></comment>
		</procedure>
		<procedure name="pg_trigger_depth" id="Procedure_444547e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_trigger_depth()
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_trigger_depth$function$
]]></string>
			<comment><![CDATA[current trigger depth]]></comment>
		</procedure>
		<procedure name="pg_try_advisory_lock" id="Procedure_123455b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</procedure>
		<procedure name="pg_try_advisory_lock" id="Procedure_417122f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_try_advisory_lock_shared" id="Procedure_45235d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</procedure>
		<procedure name="pg_try_advisory_lock_shared" id="Procedure_44cd5a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_try_advisory_xact_lock" id="Procedure_40b1b3f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</procedure>
		<procedure name="pg_try_advisory_xact_lock" id="Procedure_11108b9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int8$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_try_advisory_xact_lock_shared" id="Procedure_2bdadd8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</procedure>
		<procedure name="pg_try_advisory_xact_lock_shared" id="Procedure_415692e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int8$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
			<input_param name="$1" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="pg_ts_config_is_visible" id="Procedure_5b5b51f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_config_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_config_is_visible$function$
]]></string>
			<comment><![CDATA[is text search configuration visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_ts_dict_is_visible" id="Procedure_2d3b90c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_dict_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_dict_is_visible$function$
]]></string>
			<comment><![CDATA[is text search dictionary visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_ts_parser_is_visible" id="Procedure_1db205f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_parser_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_parser_is_visible$function$
]]></string>
			<comment><![CDATA[is text search parser visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_ts_template_is_visible" id="Procedure_9ebe7c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_template_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_template_is_visible$function$
]]></string>
			<comment><![CDATA[is text search template visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_type_is_visible" id="Procedure_29c36f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_type_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_type_is_visible$function$
]]></string>
			<comment><![CDATA[is type visible in search path?]]></comment>
		</procedure>
		<procedure name="pg_typeof" id="Procedure_5b9f585" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_typeof("any")
 RETURNS regtype
 LANGUAGE internal
 STABLE
AS $function$pg_typeof$function$
]]></string>
			<comment><![CDATA[type of the argument]]></comment>
		</procedure>
		<procedure name="pg_xact_commit_timestamp" id="Procedure_3a6df9b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xact_commit_timestamp(xid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STRICT
AS $function$pg_xact_commit_timestamp$function$
]]></string>
			<comment><![CDATA[get commit timestamp of a transaction]]></comment>
		</procedure>
		<procedure name="pg_xlog_location_diff" id="Procedure_50342c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_location_diff(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlog_location_diff$function$
]]></string>
			<comment><![CDATA[difference in bytes, given two xlog locations]]></comment>
		</procedure>
		<procedure name="pg_xlog_replay_pause" id="Procedure_346833c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_pause()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_xlog_replay_pause$function$
]]></string>
			<comment><![CDATA[pause xlog replay]]></comment>
		</procedure>
		<procedure name="pg_xlog_replay_resume" id="Procedure_46b912" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_resume()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_xlog_replay_resume$function$
]]></string>
			<comment><![CDATA[resume xlog replay, if it was paused]]></comment>
		</procedure>
		<procedure name="pg_xlogfile_name" id="Procedure_484a330" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name(pg_lsn)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlogfile_name$function$
]]></string>
			<comment><![CDATA[xlog filename, given an xlog location]]></comment>
		</procedure>
		<procedure name="pg_xlogfile_name_offset" id="Procedure_5e20d19" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name_offset(wal_location pg_lsn, OUT file_name text, OUT file_offset integer)
 RETURNS record
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlogfile_name_offset$function$
]]></string>
			<comment><![CDATA[xlog filename and byte offset, given an xlog location]]></comment>
		</procedure>
		<procedure name="pi" id="Procedure_260ef9b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pi()
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpi$function$
]]></string>
			<comment><![CDATA[PI]]></comment>
		</procedure>
		<procedure name="plainto_tsquery" id="Procedure_1e5b1f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$plainto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</procedure>
		<procedure name="plainto_tsquery" id="Procedure_1a9c87f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$plainto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="tsquery" />
		</procedure>
		<procedure name="plpgsql_call_handler" id="Procedure_528e389" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_call_handler()
 RETURNS language_handler
 LANGUAGE c
AS '$libdir/plpgsql', $function$plpgsql_call_handler$function$
]]></string>
		</procedure>
		<procedure name="plpgsql_inline_handler" id="Procedure_e10844" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_inline_handler(internal)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_inline_handler$function$
]]></string>
		</procedure>
		<procedure name="plpgsql_validator" id="Procedure_461415" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_validator(oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_validator$function$
]]></string>
		</procedure>
		<procedure name="point" id="Procedure_533ef1e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</procedure>
		<procedure name="point" id="Procedure_62922e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="point" id="Procedure_16dd54f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="point" id="Procedure_2886cf8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="point" id="Procedure_40ab887" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="point" id="Procedure_a4dcd9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
			<input_param name="$1" jt="1111" type="circle" />
			<result_param name="returnValue" jt="1111" type="point" />
		</procedure>
		<procedure name="point_above" id="Procedure_50d9c5e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_above(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_above$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</procedure>
		<procedure name="point_add" id="Procedure_1f62c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_add(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="point_below" id="Procedure_51b0a91" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_below(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_below$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</procedure>
		<procedure name="point_distance" id="Procedure_495a461" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_distance(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="point_div" id="Procedure_2b42c8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_div(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</procedure>
		<procedure name="point_eq" id="Procedure_349a6f5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_eq(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_eq$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</procedure>
		<procedure name="point_horiz" id="Procedure_f83eec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_horiz(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</procedure>
		<procedure name="point_in" id="Procedure_29b5905" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_in(cstring)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="point_left" id="Procedure_b9c495" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_left(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="point_mul" id="Procedure_4fedbd3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_mul(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="point_ne" id="Procedure_4d7a82d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_ne(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="point_out" id="Procedure_8b2333" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_out(point)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="point_recv" id="Procedure_1c17c55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_recv(internal)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="point_right" id="Procedure_4a03c1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_right(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="point_send" id="Procedure_15f124e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_send(point)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="point_sub" id="Procedure_2f2f1f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_sub(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="point_vert" id="Procedure_3612cfd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_vert(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</procedure>
		<procedure name="poly_above" id="Procedure_5a37bed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_above(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</procedure>
		<procedure name="poly_below" id="Procedure_534c9ff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_below(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</procedure>
		<procedure name="poly_center" id="Procedure_d3dbff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_center(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="poly_contain" id="Procedure_5b88df0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="poly_contain_pt" id="Procedure_1d99448" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain_pt(polygon, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="poly_contained" id="Procedure_3a0b3f9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contained(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="poly_distance" id="Procedure_1221a58" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_distance(polygon, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</procedure>
		<procedure name="poly_in" id="Procedure_59fee00" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_in(cstring)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="poly_left" id="Procedure_2d9c0c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_left(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="poly_npoints" id="Procedure_143e2f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</procedure>
		<procedure name="poly_out" id="Procedure_2c92c9a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_out(polygon)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="poly_overabove" id="Procedure_328d92d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overabove(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</procedure>
		<procedure name="poly_overbelow" id="Procedure_245a451" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overbelow(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</procedure>
		<procedure name="poly_overlap" id="Procedure_2a39890" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overlap(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="poly_overleft" id="Procedure_5a75a98" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overleft(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</procedure>
		<procedure name="poly_overright" id="Procedure_5ef4c54" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overright(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</procedure>
		<procedure name="poly_recv" id="Procedure_43b7a06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_recv(internal)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="poly_right" id="Procedure_2375ca8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_right(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="poly_same" id="Procedure_35a0960" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_same(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</procedure>
		<procedure name="poly_send" id="Procedure_55ed8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_send(polygon)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="polygon" id="Procedure_3525019" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_poly$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</procedure>
		<procedure name="polygon" id="Procedure_19a0060" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_poly$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
			<input_param name="$1" jt="1111" type="box" />
			<result_param name="returnValue" jt="1111" type="polygon" />
		</procedure>
		<procedure name="polygon" id="Procedure_5784739" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_poly$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
			<input_param name="$1" jt="1111" type="box" />
			<result_param name="returnValue" jt="1111" type="polygon" />
		</procedure>
		<procedure name="polygon" id="Procedure_81df27" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_poly$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
			<input_param name="$1" jt="1111" type="box" />
			<result_param name="returnValue" jt="1111" type="polygon" />
		</procedure>
		<procedure name="popen" id="Procedure_225822f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.popen(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_open$function$
]]></string>
			<comment><![CDATA[open path]]></comment>
		</procedure>
		<procedure name="position" id="Procedure_5eff01e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
		</procedure>
		<procedure name="position" id="Procedure_41042cc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="position" id="Procedure_4991f79" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="-7" type="bit" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="positionjoinsel" id="Procedure_29f6bfa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$positionjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for position-comparison operators]]></comment>
		</procedure>
		<procedure name="positionsel" id="Procedure_f107be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$positionsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for position-comparison operators]]></comment>
		</procedure>
		<procedure name="postgresql_fdw_validator" id="Procedure_467a9ad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.postgresql_fdw_validator(text[], oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$postgresql_fdw_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="pow" id="Procedure_16efa9a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</procedure>
		<procedure name="pow" id="Procedure_2a64a9e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="power" id="Procedure_1055f4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.power(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</procedure>
		<procedure name="power" id="Procedure_bb49b0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.power(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<input_param name="$2" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="prsd_end" id="Procedure_415fc51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_end(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_end$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="prsd_headline" id="Procedure_3fc79b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_headline(internal, internal, tsquery)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_headline$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="prsd_lextype" id="Procedure_1b47d93" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_lextype(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_lextype$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="prsd_nexttoken" id="Procedure_4a0cc9f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_nexttoken(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_nexttoken$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="prsd_start" id="Procedure_3c4d65f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_start(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_start$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="pt_contained_circle" id="Procedure_47eeb35" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_circle(point, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pt_contained_circle$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="pt_contained_poly" id="Procedure_18681be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_poly(point, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pt_contained_poly$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="query_to_xml" id="Procedure_47b2122" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml$function$
]]></string>
			<comment><![CDATA[map query result to XML]]></comment>
		</procedure>
		<procedure name="query_to_xml_and_xmlschema" id="Procedure_20fa628" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result and structure to XML and XML Schema]]></comment>
		</procedure>
		<procedure name="query_to_xmlschema" id="Procedure_1d632c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result structure to XML Schema]]></comment>
		</procedure>
		<procedure name="querytree" id="Procedure_d7658c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.querytree(tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquerytree$function$
]]></string>
			<comment><![CDATA[show real useful query for GiST index]]></comment>
		</procedure>
		<procedure name="quote_ident" id="Procedure_3812d4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_ident(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$quote_ident$function$
]]></string>
			<comment><![CDATA[quote an identifier for usage in a querystring]]></comment>
		</procedure>
		<procedure name="quote_literal" id="Procedure_46a3e79" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$quote_literal$function$
]]></string>
			<comment><![CDATA[quote a literal for usage in a querystring]]></comment>
		</procedure>
		<procedure name="quote_literal" id="Procedure_149c58b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$quote_literal$function$
]]></string>
			<comment><![CDATA[quote a literal for usage in a querystring]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="quote_nullable" id="Procedure_1aa795f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$quote_nullable$function$
]]></string>
			<comment><![CDATA[quote a possibly-null literal for usage in a querystring]]></comment>
		</procedure>
		<procedure name="quote_nullable" id="Procedure_51a485c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$quote_nullable$function$
]]></string>
			<comment><![CDATA[quote a possibly-null literal for usage in a querystring]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="radians" id="Procedure_bfb457" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radians(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$radians$function$
]]></string>
			<comment><![CDATA[degrees to radians]]></comment>
		</procedure>
		<procedure name="radius" id="Procedure_574c363" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radius(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_radius$function$
]]></string>
			<comment><![CDATA[radius of circle]]></comment>
		</procedure>
		<procedure name="random" id="Procedure_f1407a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.random()
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$drandom$function$
]]></string>
			<comment><![CDATA[random value]]></comment>
		</procedure>
		<procedure name="range_adjacent" id="Procedure_517fb47" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_adjacent(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_adjacent$function$
]]></string>
			<comment><![CDATA[implementation of -|- operator]]></comment>
		</procedure>
		<procedure name="range_after" id="Procedure_3edd0d8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_after(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_after$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</procedure>
		<procedure name="range_before" id="Procedure_100cc27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_before(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_before$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="range_cmp" id="Procedure_3a269e9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_cmp(anyrange, anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="range_contained_by" id="Procedure_2db0fec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contained_by(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contained_by$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="range_contains" id="Procedure_40ab5c9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="range_contains_elem" id="Procedure_5333bc5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains_elem(anyrange, anyelement)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contains_elem$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="range_eq" id="Procedure_5672872" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_eq(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="range_ge" id="Procedure_3cdcd19" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ge(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="range_gist_compress" id="Procedure_4ea6ae8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_consistent" id="Procedure_10b3c20" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_consistent(internal, anyrange, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_decompress" id="Procedure_18f1a95" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_fetch" id="Procedure_e3d3c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_fetch(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_fetch$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_penalty" id="Procedure_49bb81a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_picksplit" id="Procedure_4b22fe5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_same" id="Procedure_4b525fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_same(anyrange, anyrange, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gist_union" id="Procedure_10cf80" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</procedure>
		<procedure name="range_gt" id="Procedure_1bfb8dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="range_in" id="Procedure_5b4b219" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_in(cstring, oid, integer)
 RETURNS anyrange
 LANGUAGE internal
 STABLE STRICT
AS $function$range_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="range_intersect" id="Procedure_7ba5d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_intersect(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_intersect$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</procedure>
		<procedure name="range_le" id="Procedure_2085e31" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_le(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="range_lt" id="Procedure_2a6f862" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_lt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="range_merge" id="Procedure_5f05229" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_merge(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_merge$function$
]]></string>
			<comment><![CDATA[the smallest range which includes both of the given ranges]]></comment>
		</procedure>
		<procedure name="range_minus" id="Procedure_26a1ce9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_minus(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_minus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="range_ne" id="Procedure_568f1a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ne(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="range_out" id="Procedure_2c6f599" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_out(anyrange)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$range_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="range_overlaps" id="Procedure_6f46d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overlaps(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overlaps$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="range_overleft" id="Procedure_16da99c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overleft(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</procedure>
		<procedure name="range_overright" id="Procedure_cc335" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overright(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</procedure>
		<procedure name="range_recv" id="Procedure_10ab502" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_recv(internal, oid, integer)
 RETURNS anyrange
 LANGUAGE internal
 STABLE STRICT
AS $function$range_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="range_send" id="Procedure_3e8e283" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_send(anyrange)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$range_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="range_typanalyze" id="Procedure_5ef310" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$range_typanalyze$function$
]]></string>
			<comment><![CDATA[range typanalyze]]></comment>
		</procedure>
		<procedure name="range_union" id="Procedure_42bb8f4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_union(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_union$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="rangesel" id="Procedure_5aa8d23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rangesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$rangesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for range operators]]></comment>
		</procedure>
		<procedure name="rank" id="Procedure_39049e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_rank$function$
]]></string>
			<comment><![CDATA[integer rank with gaps]]></comment>
		</procedure>
		<procedure name="rank" id="Procedure_118e7b8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_rank$function$
]]></string>
			<comment><![CDATA[integer rank with gaps]]></comment>
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="rank_final" id="Procedure_3c491ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="record_eq" id="Procedure_3a094cf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="record_ge" id="Procedure_59ea4a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="record_gt" id="Procedure_5beabbb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="record_image_eq" id="Procedure_5ec0327" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_eq$function$
]]></string>
			<comment><![CDATA[implementation of *= operator]]></comment>
		</procedure>
		<procedure name="record_image_ge" id="Procedure_463c9bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_ge$function$
]]></string>
			<comment><![CDATA[implementation of *>= operator]]></comment>
		</procedure>
		<procedure name="record_image_gt" id="Procedure_105b3a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_gt$function$
]]></string>
			<comment><![CDATA[implementation of *> operator]]></comment>
		</procedure>
		<procedure name="record_image_le" id="Procedure_2664d01" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_le$function$
]]></string>
			<comment><![CDATA[implementation of *<= operator]]></comment>
		</procedure>
		<procedure name="record_image_lt" id="Procedure_1e26133" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_lt$function$
]]></string>
			<comment><![CDATA[implementation of *< operator]]></comment>
		</procedure>
		<procedure name="record_image_ne" id="Procedure_1d8f121" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_ne$function$
]]></string>
			<comment><![CDATA[implementation of *<> operator]]></comment>
		</procedure>
		<procedure name="record_in" id="Procedure_507c191" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_in(cstring, oid, integer)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$record_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="record_le" id="Procedure_33f9e04" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="record_lt" id="Procedure_e486ae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="record_ne" id="Procedure_3e17f17" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="record_out" id="Procedure_4598262" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_out(record)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$record_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="record_recv" id="Procedure_259d329" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_recv(internal, oid, integer)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$record_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="record_send" id="Procedure_51a1045" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_send(record)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$record_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regclass" id="Procedure_49fb51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclass(text)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$text_regclass$function$
]]></string>
			<comment><![CDATA[convert text to regclass]]></comment>
		</procedure>
		<procedure name="regclassin" id="Procedure_47d324" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclassin(cstring)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$regclassin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regclassout" id="Procedure_2d288bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclassout(regclass)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regclassout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regclassrecv" id="Procedure_286075" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclassrecv(internal)
 RETURNS regclass
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regclassrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regclasssend" id="Procedure_3997d30" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclasssend(regclass)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regclasssend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regconfigin" id="Procedure_2001086" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigin(cstring)
 RETURNS regconfig
 LANGUAGE internal
 STABLE STRICT
AS $function$regconfigin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regconfigout" id="Procedure_4eb72e1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigout(regconfig)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regconfigout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regconfigrecv" id="Procedure_1ac0f8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigrecv(internal)
 RETURNS regconfig
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regconfigrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regconfigsend" id="Procedure_bb602c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigsend(regconfig)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regconfigsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regdictionaryin" id="Procedure_28e2138" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionaryin(cstring)
 RETURNS regdictionary
 LANGUAGE internal
 STABLE STRICT
AS $function$regdictionaryin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regdictionaryout" id="Procedure_4d3b966" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionaryout(regdictionary)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regdictionaryout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regdictionaryrecv" id="Procedure_2a5e40c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionaryrecv(internal)
 RETURNS regdictionary
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regdictionaryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regdictionarysend" id="Procedure_aec367" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionarysend(regdictionary)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regdictionarysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regexeqjoinsel" id="Procedure_3e5916e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex match]]></comment>
		</procedure>
		<procedure name="regexeqsel" id="Procedure_5490fa5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex match]]></comment>
		</procedure>
		<procedure name="regexnejoinsel" id="Procedure_22f1f55" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex non-match]]></comment>
		</procedure>
		<procedure name="regexnesel" id="Procedure_14e42ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex non-match]]></comment>
		</procedure>
		<procedure name="regexp_matches" id="Procedure_4eecab0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 1
AS $function$regexp_matches_no_flags$function$
]]></string>
			<comment><![CDATA[find all match groups for regexp]]></comment>
		</procedure>
		<procedure name="regexp_matches" id="Procedure_3cfba95" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 1
AS $function$regexp_matches_no_flags$function$
]]></string>
			<comment><![CDATA[find all match groups for regexp]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_replace" id="Procedure_3bba229" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexreplace_noopt$function$
]]></string>
			<comment><![CDATA[replace text using regexp]]></comment>
		</procedure>
		<procedure name="regexp_replace" id="Procedure_5365211" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexreplace_noopt$function$
]]></string>
			<comment><![CDATA[replace text using regexp]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="regexp_split_to_array" id="Procedure_475b5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_array_no_flags$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</procedure>
		<procedure name="regexp_split_to_array" id="Procedure_22382ee" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_array_no_flags$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_split_to_table" id="Procedure_1d0bcc5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_table_no_flags$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</procedure>
		<procedure name="regexp_split_to_table" id="Procedure_3b8f803" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_table_no_flags$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="regnamespacein" id="Procedure_1b66a81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespacein(cstring)
 RETURNS regnamespace
 LANGUAGE internal
 STABLE STRICT
AS $function$regnamespacein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regnamespaceout" id="Procedure_5eca4fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespaceout(regnamespace)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regnamespaceout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regnamespacerecv" id="Procedure_5107c17" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespacerecv(internal)
 RETURNS regnamespace
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regnamespacerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regnamespacesend" id="Procedure_9ff1d4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regnamespacesend(regnamespace)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regnamespacesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperatorin" id="Procedure_4cb97cd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorin(cstring)
 RETURNS regoperator
 LANGUAGE internal
 STABLE STRICT
AS $function$regoperatorin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperatorout" id="Procedure_4c311fd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorout(regoperator)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regoperatorout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperatorrecv" id="Procedure_18c40de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorrecv(internal)
 RETURNS regoperator
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperatorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperatorsend" id="Procedure_56337e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorsend(regoperator)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperatorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperin" id="Procedure_14d2d25" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperin(cstring)
 RETURNS regoper
 LANGUAGE internal
 STABLE STRICT
AS $function$regoperin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperout" id="Procedure_3a36b6d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperout(regoper)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regoperout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regoperrecv" id="Procedure_38f27b3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperrecv(internal)
 RETURNS regoper
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regopersend" id="Procedure_283e335" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regopersend(regoper)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regopersend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocedurein" id="Procedure_3e915f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocedurein(cstring)
 RETURNS regprocedure
 LANGUAGE internal
 STABLE STRICT
AS $function$regprocedurein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocedureout" id="Procedure_1e8733f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocedureout(regprocedure)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regprocedureout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocedurerecv" id="Procedure_397be67" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocedurerecv(internal)
 RETURNS regprocedure
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocedurerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regproceduresend" id="Procedure_1f111f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regproceduresend(regprocedure)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regproceduresend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocin" id="Procedure_25af48f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocin(cstring)
 RETURNS regproc
 LANGUAGE internal
 STABLE STRICT
AS $function$regprocin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocout" id="Procedure_3a82f06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocout(regproc)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regprocout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocrecv" id="Procedure_25a5f19" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocrecv(internal)
 RETURNS regproc
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regprocsend" id="Procedure_25be41" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocsend(regproc)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regrolein" id="Procedure_40cf1db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regrolein(cstring)
 RETURNS regrole
 LANGUAGE internal
 STABLE STRICT
AS $function$regrolein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regroleout" id="Procedure_3366739" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regroleout(regrole)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regroleout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regrolerecv" id="Procedure_312a07a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regrolerecv(internal)
 RETURNS regrole
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regrolerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regrolesend" id="Procedure_cfb4eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regrolesend(regrole)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regrolesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regtypein" id="Procedure_5341390" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtypein(cstring)
 RETURNS regtype
 LANGUAGE internal
 STABLE STRICT
AS $function$regtypein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regtypeout" id="Procedure_36cc47" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtypeout(regtype)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$regtypeout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regtyperecv" id="Procedure_e480e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtyperecv(internal)
 RETURNS regtype
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regtyperecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="regtypesend" id="Procedure_2521b65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtypesend(regtype)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regtypesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="reltime" id="Procedure_a05808" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltime(interval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_reltime$function$
]]></string>
			<comment><![CDATA[convert interval to reltime]]></comment>
		</procedure>
		<procedure name="reltimeeq" id="Procedure_aeba18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimeeq(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="reltimege" id="Procedure_1990fbd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimege(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="reltimegt" id="Procedure_44821f7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimegt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="reltimein" id="Procedure_239f927" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimein(cstring)
 RETURNS reltime
 LANGUAGE internal
 STABLE STRICT
AS $function$reltimein$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="reltimele" id="Procedure_3bd31d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimele(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="reltimelt" id="Procedure_42be055" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimelt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="reltimene" id="Procedure_488ae06" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimene(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="reltimeout" id="Procedure_331f970" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimeout(reltime)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$reltimeout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="reltimerecv" id="Procedure_4ea7eed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimerecv(internal)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="reltimesend" id="Procedure_2519cf6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimesend(reltime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="repeat" id="Procedure_798a78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.repeat(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$repeat$function$
]]></string>
			<comment><![CDATA[replicate string n times]]></comment>
		</procedure>
		<procedure name="replace" id="Procedure_5b334d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$replace_text$function$
]]></string>
			<comment><![CDATA[replace all occurrences in string of old_substr with new_substr]]></comment>
		</procedure>
		<procedure name="reverse" id="Procedure_cf6cb8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reverse(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_reverse$function$
]]></string>
			<comment><![CDATA[reverse text]]></comment>
		</procedure>
		<procedure name="right" id="Procedure_202bfe5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."right"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_right$function$
]]></string>
			<comment><![CDATA[extract the last n characters]]></comment>
		</procedure>
		<procedure name="round" id="Procedure_528ee59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</procedure>
		<procedure name="round" id="Procedure_293e4fe" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="round" id="Procedure_40843ba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="row_number" id="Procedure_5e3e7bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_number()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_row_number$function$
]]></string>
			<comment><![CDATA[row number within partition]]></comment>
		</procedure>
		<procedure name="row_security_active" id="Procedure_1b7017a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$row_security_active$function$
]]></string>
			<comment><![CDATA[row security for current context active on table by table oid]]></comment>
		</procedure>
		<procedure name="row_security_active" id="Procedure_39fe022" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_security_active(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$row_security_active$function$
]]></string>
			<comment><![CDATA[row security for current context active on table by table oid]]></comment>
			<input_param name="$1" jt="-5" type="oid" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="row_to_json" id="Procedure_550324" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$row_to_json$function$
]]></string>
			<comment><![CDATA[map row to json]]></comment>
		</procedure>
		<procedure name="row_to_json" id="Procedure_478448b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$row_to_json$function$
]]></string>
			<comment><![CDATA[map row to json]]></comment>
			<input_param name="$1" jt="1111" type="record" />
			<result_param name="returnValue" jt="1111" type="json" />
		</procedure>
		<procedure name="rpad" id="Procedure_479ff32" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rpad$function$
]]></string>
			<comment><![CDATA[right-pad string to length]]></comment>
		</procedure>
		<procedure name="rpad" id="Procedure_4a21e82" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rpad$function$
]]></string>
			<comment><![CDATA[right-pad string to length]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="rtrim" id="Procedure_4faaec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from right end of string]]></comment>
		</procedure>
		<procedure name="rtrim" id="Procedure_356aa88" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from right end of string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="scalargtjoinsel" id="Procedure_1440e2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalargtjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of > and related operators on scalar datatypes]]></comment>
		</procedure>
		<procedure name="scalargtsel" id="Procedure_be316" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalargtsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of > and related operators on scalar datatypes]]></comment>
		</procedure>
		<procedure name="scalarltjoinsel" id="Procedure_12f574c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalarltjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of < and related operators on scalar datatypes]]></comment>
		</procedure>
		<procedure name="scalarltsel" id="Procedure_1cb6f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalarltsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of < and related operators on scalar datatypes]]></comment>
		</procedure>
		<procedure name="schema_to_xml" id="Procedure_263d8dd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xml$function$
]]></string>
			<comment><![CDATA[map schema contents to XML]]></comment>
		</procedure>
		<procedure name="schema_to_xml_and_xmlschema" id="Procedure_344cea4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema contents and structure to XML and XML Schema]]></comment>
		</procedure>
		<procedure name="schema_to_xmlschema" id="Procedure_5d2c4d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema structure to XML Schema]]></comment>
		</procedure>
		<procedure name="session_user" id="Procedure_1440894" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."session_user"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$session_user$function$
]]></string>
			<comment><![CDATA[session user name]]></comment>
		</procedure>
		<procedure name="set_bit" id="Procedure_423ea1c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsetbit$function$
]]></string>
			<comment><![CDATA[set bit]]></comment>
		</procedure>
		<procedure name="set_bit" id="Procedure_2f5c83f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsetbit$function$
]]></string>
			<comment><![CDATA[set bit]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="set_byte" id="Procedure_178723" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_byte(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaSetByte$function$
]]></string>
			<comment><![CDATA[set byte]]></comment>
		</procedure>
		<procedure name="set_config" id="Procedure_47ccd39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_config(text, text, boolean)
 RETURNS text
 LANGUAGE internal
AS $function$set_config_by_name$function$
]]></string>
			<comment><![CDATA[SET X as a function]]></comment>
		</procedure>
		<procedure name="set_masklen" id="Procedure_292db34" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(inet, integer)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_set_masklen$function$
]]></string>
			<comment><![CDATA[change netmask of inet]]></comment>
		</procedure>
		<procedure name="set_masklen" id="Procedure_2c1cbe0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(inet, integer)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_set_masklen$function$
]]></string>
			<comment><![CDATA[change netmask of inet]]></comment>
			<input_param name="$1" jt="1111" type="inet" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="inet" />
		</procedure>
		<procedure name="setseed" id="Procedure_5b9daef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setseed(double precision)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$setseed$function$
]]></string>
			<comment><![CDATA[set random seed]]></comment>
		</procedure>
		<procedure name="setval" id="Procedure_2cdbfee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval_oid$function$
]]></string>
			<comment><![CDATA[set sequence value]]></comment>
		</procedure>
		<procedure name="setval" id="Procedure_2e4ed9b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval_oid$function$
]]></string>
			<comment><![CDATA[set sequence value]]></comment>
			<input_param name="$1" jt="1111" type="regclass" />
			<input_param name="$2" jt="-5" type="int8" />
			<result_param name="returnValue" jt="-5" type="int8" />
		</procedure>
		<procedure name="setweight" id="Procedure_5857db1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char")
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_setweight$function$
]]></string>
			<comment><![CDATA[set weight of lexeme's entries]]></comment>
		</procedure>
		<procedure name="shell_in" id="Procedure_2ba6bbf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shell_in(cstring)
 RETURNS opaque
 LANGUAGE internal
 IMMUTABLE
AS $function$shell_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="shell_out" id="Procedure_35813a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shell_out(opaque)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$shell_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="shift_jis_2004_to_euc_jis_2004" id="Procedure_b65c0a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc2004_sjis2004', $function$shift_jis_2004_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004]]></comment>
		</procedure>
		<procedure name="shift_jis_2004_to_utf8" id="Procedure_221426e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis2004', $function$shift_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to UTF8]]></comment>
		</procedure>
		<procedure name="shobj_description" id="Procedure_6b6280" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shobj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_shdescription where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11)$function$
]]></string>
			<comment><![CDATA[get description for object id and shared catalog name]]></comment>
		</procedure>
		<procedure name="sign" id="Procedure_1c04900" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sign(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sign$function$
]]></string>
			<comment><![CDATA[sign of value]]></comment>
		</procedure>
		<procedure name="sign" id="Procedure_2e838df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sign(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sign$function$
]]></string>
			<comment><![CDATA[sign of value]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<result_param name="returnValue" jt="2" type="numeric" />
		</procedure>
		<procedure name="similar_escape" id="Procedure_59b9d5b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.similar_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$similar_escape$function$
]]></string>
			<comment><![CDATA[convert SQL99 regexp pattern to POSIX style]]></comment>
		</procedure>
		<procedure name="sin" id="Procedure_38589ba" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsin$function$
]]></string>
			<comment><![CDATA[sine]]></comment>
		</procedure>
		<procedure name="sjis_to_euc_jp" id="Procedure_3f0012f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to EUC_JP]]></comment>
		</procedure>
		<procedure name="sjis_to_mic" id="Procedure_44d8a38" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="sjis_to_utf8" id="Procedure_1a579bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis', $function$sjis_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to UTF8]]></comment>
		</procedure>
		<procedure name="slope" id="Procedure_58aed5c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.slope(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_slope$function$
]]></string>
			<comment><![CDATA[slope between points]]></comment>
		</procedure>
		<procedure name="smgreq" id="Procedure_3b1a50d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgreq(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$smgreq$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</procedure>
		<procedure name="smgrin" id="Procedure_3532e2c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgrin(cstring)
 RETURNS smgr
 LANGUAGE internal
 STABLE STRICT
AS $function$smgrin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="smgrne" id="Procedure_257dfb7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgrne(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$smgrne$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</procedure>
		<procedure name="smgrout" id="Procedure_2cbc75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgrout(smgr)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$smgrout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="spg_kd_choose" id="Procedure_33c7891" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</procedure>
		<procedure name="spg_kd_config" id="Procedure_343c843" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</procedure>
		<procedure name="spg_kd_inner_consistent" id="Procedure_c3aac2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</procedure>
		<procedure name="spg_kd_picksplit" id="Procedure_2e7ab58" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</procedure>
		<procedure name="spg_quad_choose" id="Procedure_45427ec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</procedure>
		<procedure name="spg_quad_config" id="Procedure_39349c1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</procedure>
		<procedure name="spg_quad_inner_consistent" id="Procedure_43be8ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</procedure>
		<procedure name="spg_quad_leaf_consistent" id="Procedure_5010119" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree and k-d tree over point]]></comment>
		</procedure>
		<procedure name="spg_quad_picksplit" id="Procedure_55805b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</procedure>
		<procedure name="spg_range_quad_choose" id="Procedure_4e895ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</procedure>
		<procedure name="spg_range_quad_config" id="Procedure_4127b67" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</procedure>
		<procedure name="spg_range_quad_inner_consistent" id="Procedure_415786a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</procedure>
		<procedure name="spg_range_quad_leaf_consistent" id="Procedure_4555a6b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</procedure>
		<procedure name="spg_range_quad_picksplit" id="Procedure_21c56b1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</procedure>
		<procedure name="spg_text_choose" id="Procedure_33ebb83" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</procedure>
		<procedure name="spg_text_config" id="Procedure_9bc910" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</procedure>
		<procedure name="spg_text_inner_consistent" id="Procedure_43ad93e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</procedure>
		<procedure name="spg_text_leaf_consistent" id="Procedure_3289ebb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</procedure>
		<procedure name="spg_text_picksplit" id="Procedure_459cd3a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</procedure>
		<procedure name="spgbeginscan" id="Procedure_3d20a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbeginscan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgbuild" id="Procedure_44c3726" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbuild$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgbuildempty" id="Procedure_16aa489" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgbuildempty$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgbulkdelete" id="Procedure_4e6e988" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbulkdelete$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgcanreturn" id="Procedure_3c87f7e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgcanreturn(internal, integer)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$spgcanreturn$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgcostestimate" id="Procedure_4311cc8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgcostestimate$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgendscan" id="Procedure_2efdfb4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgendscan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spggetbitmap" id="Procedure_ac4d6e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spggetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$spggetbitmap$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spggettuple" id="Procedure_3c6ac74" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spggettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$spggettuple$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spginsert" id="Procedure_603e9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spginsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$spginsert$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgmarkpos" id="Procedure_3677fd0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgmarkpos$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgoptions" id="Procedure_554da9f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$spgoptions$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgrescan" id="Procedure_23c0a65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgrescan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgrestrpos" id="Procedure_10d6558" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgrestrpos$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="spgvacuumcleanup" id="Procedure_18ad089" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgvacuumcleanup$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</procedure>
		<procedure name="split_part" id="Procedure_b1dd1c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.split_part(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$split_text$function$
]]></string>
			<comment><![CDATA[split string by field_sep and return field_num]]></comment>
		</procedure>
		<procedure name="sqrt" id="Procedure_57156e2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</procedure>
		<procedure name="sqrt" id="Procedure_126687" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="statement_timestamp" id="Procedure_355e4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.statement_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$statement_timestamp$function$
]]></string>
			<comment><![CDATA[current statement time]]></comment>
		</procedure>
		<procedure name="string_agg_finalfn" id="Procedure_1aa6e5a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_finalfn(internal)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</procedure>
		<procedure name="string_agg_transfn" id="Procedure_5805fa1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_transfn(internal, text, text)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="string_to_array" id="Procedure_1881089" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE
AS $function$text_to_array_null$function$
]]></string>
			<comment><![CDATA[split delimited text into text[], with null string]]></comment>
		</procedure>
		<procedure name="string_to_array" id="Procedure_1167e98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE
AS $function$text_to_array_null$function$
]]></string>
			<comment><![CDATA[split delimited text into text[], with null string]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="strip" id="Procedure_427e143" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strip(tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_strip$function$
]]></string>
			<comment><![CDATA[strip position information]]></comment>
		</procedure>
		<procedure name="strpos" id="Procedure_2f7ac31" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strpos(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textpos$function$
]]></string>
			<comment><![CDATA[position of substring]]></comment>
		</procedure>
		<procedure name="substr" id="Procedure_4715ba3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</procedure>
		<procedure name="substr" id="Procedure_3079ff3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="substr" id="Procedure_3efe6ba" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="substr" id="Procedure_485471e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="substring" id="Procedure_3348500" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</procedure>
		<procedure name="substring" id="Procedure_35df6d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_51b1164" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_26e9958" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_270d47c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_5fcfff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_4709c9f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="substring" id="Procedure_543f416" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
			<input_param name="$1" jt="-7" type="bit" />
			<input_param name="$2" jt="4" type="int4" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="-7" type="bit" />
		</procedure>
		<procedure name="suppress_redundant_updates_trigger" id="Procedure_2cbcf84" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.suppress_redundant_updates_trigger()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$suppress_redundant_updates_trigger$function$
]]></string>
			<comment><![CDATA[trigger to suppress updates when new and old records match]]></comment>
		</procedure>
		<procedure name="system" id="Procedure_3d4194" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.system(internal)
 RETURNS tsm_handler
 LANGUAGE internal
 STRICT
AS $function$tsm_system_handler$function$
]]></string>
			<comment><![CDATA[SYSTEM tablesample method handler]]></comment>
		</procedure>
		<procedure name="table_to_xml" id="Procedure_988e66" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xml$function$
]]></string>
			<comment><![CDATA[map table contents to XML]]></comment>
		</procedure>
		<procedure name="table_to_xml_and_xmlschema" id="Procedure_4211f81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map table contents and structure to XML and XML Schema]]></comment>
		</procedure>
		<procedure name="table_to_xmlschema" id="Procedure_5b9182d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map table structure to XML Schema]]></comment>
		</procedure>
		<procedure name="tan" id="Procedure_5c96a27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtan$function$
]]></string>
			<comment><![CDATA[tangent]]></comment>
		</procedure>
		<procedure name="text" id="Procedure_2c0e38d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</procedure>
		<procedure name="text" id="Procedure_e3bdc8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
			<input_param name="$1" jt="2009" type="xml" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text" id="Procedure_33342f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
			<input_param name="$1" jt="2009" type="xml" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text" id="Procedure_1c75be7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
			<input_param name="$1" jt="2009" type="xml" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text" id="Procedure_17b38b6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
			<input_param name="$1" jt="2009" type="xml" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text" id="Procedure_2880217" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
			<input_param name="$1" jt="2009" type="xml" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="text_ge" id="Procedure_171a2d7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="text_gt" id="Procedure_548ef5b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="text_larger" id="Procedure_123626e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_larger(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="text_le" id="Procedure_190bb5f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="text_lt" id="Procedure_48bcea4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="text_pattern_ge" id="Procedure_bf016" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</procedure>
		<procedure name="text_pattern_gt" id="Procedure_3bd5d75" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</procedure>
		<procedure name="text_pattern_le" id="Procedure_5aa9b91" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</procedure>
		<procedure name="text_pattern_lt" id="Procedure_154f310" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</procedure>
		<procedure name="text_smaller" id="Procedure_ec4831" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_smaller(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="textanycat" id="Procedure_1f5b80b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textanycat(text, anynonarray)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $1 || $2::pg_catalog.text$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="textcat" id="Procedure_175f8f2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textcat(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="texteq" id="Procedure_238525b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texteq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$texteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="texticlike" id="Procedure_41e37eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</procedure>
		<procedure name="texticnlike" id="Procedure_5f2a1e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</procedure>
		<procedure name="texticregexeq" id="Procedure_239f561" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</procedure>
		<procedure name="texticregexne" id="Procedure_55d4c49" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</procedure>
		<procedure name="textin" id="Procedure_f561e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textin(cstring)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="textlen" id="Procedure_2f5c21e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlen(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</procedure>
		<procedure name="textlike" id="Procedure_dd679a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</procedure>
		<procedure name="textne" id="Procedure_360268f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$textne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="textnlike" id="Procedure_3f187cd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</procedure>
		<procedure name="textout" id="Procedure_381f97f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textout(text)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="textrecv" id="Procedure_12d642d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textrecv(internal)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$textrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="textregexeq" id="Procedure_e9b7c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</procedure>
		<procedure name="textregexne" id="Procedure_4ed5c77" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</procedure>
		<procedure name="textsend" id="Procedure_2d5430f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textsend(text)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$textsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="thesaurus_init" id="Procedure_5205afc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$thesaurus_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="thesaurus_lexize" id="Procedure_46db451" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$thesaurus_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</procedure>
		<procedure name="tideq" id="Procedure_5e6e718" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tideq(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="tidge" id="Procedure_4836db1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidge(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="tidgt" id="Procedure_1edf0ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidgt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="tidin" id="Procedure_79bdef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidin(cstring)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tidlarger" id="Procedure_213bf26" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlarger(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="tidle" id="Procedure_424f771" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidle(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="tidlt" id="Procedure_5b53ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="tidne" id="Procedure_17988d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidne(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="tidout" id="Procedure_118c2d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidout(tid)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tidrecv" id="Procedure_56548a1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidrecv(internal)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tidsend" id="Procedure_40c2959" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsend(tid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tidsmaller" id="Procedure_1c2f9c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsmaller(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="time" id="Procedure_4fe7c37" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</procedure>
		<procedure name="time" id="Procedure_2797222" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="92" type="time" />
		</procedure>
		<procedure name="time" id="Procedure_11f4e66" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="92" type="time" />
		</procedure>
		<procedure name="time" id="Procedure_4002bf5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="92" type="time" />
		</procedure>
		<procedure name="time" id="Procedure_521cdc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="92" type="time" />
		</procedure>
		<procedure name="time" id="Procedure_2cba77a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<result_param name="returnValue" jt="92" type="time" />
		</procedure>
		<procedure name="time_cmp" id="Procedure_448377e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_cmp(time without time zone, time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="time_eq" id="Procedure_43ccc59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_eq(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="time_ge" id="Procedure_4adf225" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ge(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="time_gt" id="Procedure_107f2c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_gt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="time_hash" id="Procedure_31cf2ef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_hash(time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="time_in" id="Procedure_2b9a037" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_in(cstring, oid, integer)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$time_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="time_larger" id="Procedure_3289ae" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_larger(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="time_le" id="Procedure_5ccd1ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_le(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="time_lt" id="Procedure_201b12a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_lt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="time_mi_interval" id="Procedure_1aad34b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="time_mi_time" id="Procedure_3852043" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_time(time without time zone, time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_mi_time$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="time_ne" id="Procedure_3dc83a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ne(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="time_out" id="Procedure_3dbead9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_out(time without time zone)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="time_pl_interval" id="Procedure_1f9dfa2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_pl_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="time_recv" id="Procedure_5248af1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_recv(internal, oid, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="time_send" id="Procedure_559d321" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_send(time without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="time_smaller" id="Procedure_41e51f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_smaller(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="time_transform" id="Procedure_1501aa5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_transform$function$
]]></string>
			<comment><![CDATA[transform a time length coercion]]></comment>
		</procedure>
		<procedure name="timedate_pl" id="Procedure_47ee19d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timedate_pl(time without time zone, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timemi" id="Procedure_3688ce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timemi(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timemi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timenow" id="Procedure_47b7baf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timenow()
 RETURNS abstime
 LANGUAGE internal
 STABLE STRICT
AS $function$timenow$function$
]]></string>
			<comment><![CDATA[current date and time (abstime)]]></comment>
		</procedure>
		<procedure name="timeofday" id="Procedure_1aa2a3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timeofday()
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$timeofday$function$
]]></string>
			<comment><![CDATA[current date and time - increments during transactions]]></comment>
		</procedure>
		<procedure name="timepl" id="Procedure_4b1818a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timepl(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timepl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timestamp" id="Procedure_4fb038e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</procedure>
		<procedure name="timestamp" id="Procedure_caee3c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timestamp" id="Procedure_13f6e7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timestamp" id="Procedure_29528de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timestamp" id="Procedure_498e0f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timestamp_cmp" id="Procedure_202dc2f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp(timestamp without time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamp_cmp_date" id="Procedure_38bab5e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_date(timestamp without time zone, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamp_cmp_timestamptz" id="Procedure_b21b2d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamp_eq" id="Procedure_7621e8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamp_eq_date" id="Procedure_51597c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamp_eq_timestamptz" id="Procedure_4a48fd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamp_ge" id="Procedure_1e8cf5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamp_ge_date" id="Procedure_5693c4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamp_ge_timestamptz" id="Procedure_5e0fcec" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamp_gt" id="Procedure_5e58d70" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamp_gt_date" id="Procedure_16ed4e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamp_gt_timestamptz" id="Procedure_1548033" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamp_hash" id="Procedure_28f8135" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_hash(timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="timestamp_in" id="Procedure_1d02630" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_in(cstring, oid, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamp_izone_transform" id="Procedure_c3c655" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_izone_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_izone_transform$function$
]]></string>
			<comment><![CDATA[transform a time zone adjustment]]></comment>
		</procedure>
		<procedure name="timestamp_larger" id="Procedure_11a23b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_larger(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="timestamp_le" id="Procedure_1d5dbf2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamp_le_date" id="Procedure_267aa76" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamp_le_timestamptz" id="Procedure_6592de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamp_lt" id="Procedure_2e4fb50" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamp_lt_date" id="Procedure_1c30a01" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamp_lt_timestamptz" id="Procedure_27d6c4b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamp_mi" id="Procedure_3a1827e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timestamp_mi_interval" id="Procedure_5d68037" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timestamp_ne" id="Procedure_428766" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamp_ne_date" id="Procedure_33d8f11" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamp_ne_timestamptz" id="Procedure_4715d58" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamp_out" id="Procedure_4ceab99" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_out(timestamp without time zone)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamp_pl_interval" id="Procedure_a76a0b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_pl_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timestamp_recv" id="Procedure_4b81eab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_recv(internal, oid, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamp_send" id="Procedure_39cb861" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_send(timestamp without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamp_smaller" id="Procedure_25316c9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_smaller(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="timestamp_sortsupport" id="Procedure_4f623b4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</procedure>
		<procedure name="timestamp_transform" id="Procedure_3d053b2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_transform$function$
]]></string>
			<comment><![CDATA[transform a timestamp length coercion]]></comment>
		</procedure>
		<procedure name="timestamp_zone_transform" id="Procedure_10f8061" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_zone_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_zone_transform$function$
]]></string>
			<comment><![CDATA[transform a time zone adjustment]]></comment>
		</procedure>
		<procedure name="timestamptypmodin" id="Procedure_591bd12" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timestamptypmodout" id="Procedure_501ccfb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timestamptz" id="Procedure_4d43599" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</procedure>
		<procedure name="timestamptz" id="Procedure_5862d5a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
			<input_param name="$1" jt="1111" type="abstime" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="timestamptz" id="Procedure_d0f5d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
			<input_param name="$1" jt="1111" type="abstime" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="timestamptz" id="Procedure_1d0b7d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
			<input_param name="$1" jt="1111" type="abstime" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="timestamptz" id="Procedure_506c5f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
			<input_param name="$1" jt="1111" type="abstime" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="timestamptz" id="Procedure_2106343" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
			<input_param name="$1" jt="1111" type="abstime" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="timestamptz_cmp" id="Procedure_277d5d8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamptz_cmp_date" id="Procedure_5b4e525" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_date(timestamp with time zone, date)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamptz_cmp_timestamp" id="Procedure_4a94d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timestamptz_eq" id="Procedure_47917bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamptz_eq_date" id="Procedure_2fd5e52" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamptz_eq_timestamp" id="Procedure_4f1890c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ge" id="Procedure_2127776" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ge_date" id="Procedure_14389a4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ge_timestamp" id="Procedure_582b9de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_gt" id="Procedure_3366f3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamptz_gt_date" id="Procedure_5774691" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamptz_gt_timestamp" id="Procedure_3b3da4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timestamptz_in" id="Procedure_2144a4f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_in(cstring, oid, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamptz_larger" id="Procedure_5968299" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="timestamptz_le" id="Procedure_5d7b350" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_le_date" id="Procedure_59d11da" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_le_timestamp" id="Procedure_2c3715f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timestamptz_lt" id="Procedure_4a92a5d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamptz_lt_date" id="Procedure_5ebad85" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamptz_lt_timestamp" id="Procedure_1d5bd2d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timestamptz_mi" id="Procedure_3931e5f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timestamptz_mi_interval" id="Procedure_4dd734" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ne" id="Procedure_416baa8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ne_date" id="Procedure_12a3a87" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamptz_ne_timestamp" id="Procedure_5405783" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timestamptz_out" id="Procedure_28c15c1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_out(timestamp with time zone)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamptz_pl_interval" id="Procedure_4ba4963" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timestamptz_recv" id="Procedure_5aafda1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_recv(internal, oid, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamptz_send" id="Procedure_4b18b8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_send(timestamp with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timestamptz_smaller" id="Procedure_54afc4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="timestamptztypmodin" id="Procedure_2deefcb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timestamptztypmodout" id="Procedure_46b2759" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptztypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptztypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timetypmodin" id="Procedure_18a84bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timetypmodout" id="Procedure_38a8fe7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timetz" id="Procedure_445845c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_timetz$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
		</procedure>
		<procedure name="timetz" id="Procedure_173dff1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_timetz$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="92" type="timetz" />
		</procedure>
		<procedure name="timetz" id="Procedure_452cc28" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_timetz$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="92" type="timetz" />
		</procedure>
		<procedure name="timetz_cmp" id="Procedure_31bc003" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_cmp(time with time zone, time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="timetz_eq" id="Procedure_cba0e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_eq(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="timetz_ge" id="Procedure_3d04b8d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ge(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="timetz_gt" id="Procedure_3cde36b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_gt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="timetz_hash" id="Procedure_31e7562" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_hash(time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="timetz_in" id="Procedure_5defb17" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_in(cstring, oid, integer)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timetz_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timetz_larger" id="Procedure_45d3a78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_larger(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</procedure>
		<procedure name="timetz_le" id="Procedure_34ba11a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_le(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="timetz_lt" id="Procedure_49134fe" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_lt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="timetz_mi_interval" id="Procedure_2d360c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_mi_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</procedure>
		<procedure name="timetz_ne" id="Procedure_17b1025" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ne(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="timetz_out" id="Procedure_390a025" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_out(time with time zone)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timetz_pl_interval" id="Procedure_45d3ff8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_pl_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timetz_recv" id="Procedure_27ff593" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_recv(internal, oid, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timetz_send" id="Procedure_3dfc436" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_send(time with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="timetz_smaller" id="Procedure_ea647" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_smaller(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</procedure>
		<procedure name="timetzdate_pl" id="Procedure_1583cff" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetzdate_pl(time with time zone, date)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</procedure>
		<procedure name="timetztypmodin" id="Procedure_59db9de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timetztypmodout" id="Procedure_11bddc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetztypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetztypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="timezone" id="Procedure_2f8c250" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</procedure>
		<procedure name="timezone" id="Procedure_cac073" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timezone" id="Procedure_4b31847" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timezone" id="Procedure_52a1843" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timezone" id="Procedure_78c89b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="timezone" id="Procedure_10ba14a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="93" type="timestamptz" />
			<result_param name="returnValue" jt="93" type="timestamp" />
		</procedure>
		<procedure name="tinterval" id="Procedure_50933d8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[convert to tinterval]]></comment>
		</procedure>
		<procedure name="tintervalct" id="Procedure_3324638" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalct(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalct$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</procedure>
		<procedure name="tintervalend" id="Procedure_3cd2448" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalend(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalend$function$
]]></string>
			<comment><![CDATA[end of interval]]></comment>
		</procedure>
		<procedure name="tintervaleq" id="Procedure_16b0993" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervaleq(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervaleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="tintervalge" id="Procedure_2c67c26" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalge(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="tintervalgt" id="Procedure_560a3b0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalgt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="tintervalin" id="Procedure_1185e05" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalin(cstring)
 RETURNS tinterval
 LANGUAGE internal
 STABLE STRICT
AS $function$tintervalin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tintervalle" id="Procedure_47d5dc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalle(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="tintervalleneq" id="Procedure_505181f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalleneq(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalleneq$function$
]]></string>
			<comment><![CDATA[implementation of #= operator]]></comment>
		</procedure>
		<procedure name="tintervallenge" id="Procedure_2b17757" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenge(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenge$function$
]]></string>
			<comment><![CDATA[implementation of #>= operator]]></comment>
		</procedure>
		<procedure name="tintervallengt" id="Procedure_3965216" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallengt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallengt$function$
]]></string>
			<comment><![CDATA[implementation of #> operator]]></comment>
		</procedure>
		<procedure name="tintervallenle" id="Procedure_7dff82" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenle(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenle$function$
]]></string>
			<comment><![CDATA[implementation of #<= operator]]></comment>
		</procedure>
		<procedure name="tintervallenlt" id="Procedure_2a219ea" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenlt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenlt$function$
]]></string>
			<comment><![CDATA[implementation of #< operator]]></comment>
		</procedure>
		<procedure name="tintervallenne" id="Procedure_e3bc36" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenne(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenne$function$
]]></string>
			<comment><![CDATA[implementation of #<> operator]]></comment>
		</procedure>
		<procedure name="tintervallt" id="Procedure_b46190" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="tintervalne" id="Procedure_154ba27" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalne(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="tintervalout" id="Procedure_ec812d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalout(tinterval)
 RETURNS cstring
 LANGUAGE internal
 STABLE STRICT
AS $function$tintervalout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tintervalov" id="Procedure_35092c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalov(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalov$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="tintervalrecv" id="Procedure_5f5476d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrecv(internal)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tintervalrel" id="Procedure_2e02da8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrel(tinterval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalrel$function$
]]></string>
			<comment><![CDATA[tinterval to reltime]]></comment>
		</procedure>
		<procedure name="tintervalsame" id="Procedure_5228929" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsame(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalsame$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</procedure>
		<procedure name="tintervalsend" id="Procedure_660e78" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsend(tinterval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tintervalstart" id="Procedure_fbb40e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalstart(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalstart$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</procedure>
		<procedure name="to_ascii" id="Procedure_471ea22" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_default$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
		</procedure>
		<procedure name="to_ascii" id="Procedure_5ee4fdd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_default$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_ascii" id="Procedure_5b4950d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_default$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_1623bcc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</procedure>
		<procedure name="to_char" id="Procedure_447635e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_39a064f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_e9a3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_3788a18" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_5237af9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_b21f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_char" id="Procedure_256ce39" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
			<input_param name="$1" jt="1111" type="interval" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_date" id="Procedure_ca6bc0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_date(text, text)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$to_date$function$
]]></string>
			<comment><![CDATA[convert text to date]]></comment>
		</procedure>
		<procedure name="to_hex" id="Procedure_5163d62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_hex(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_hex32$function$
]]></string>
			<comment><![CDATA[convert int4 number to hex]]></comment>
		</procedure>
		<procedure name="to_hex" id="Procedure_40bb69" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_hex(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_hex32$function$
]]></string>
			<comment><![CDATA[convert int4 number to hex]]></comment>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="to_json" id="Procedure_354672d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_json(anyelement)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$to_json$function$
]]></string>
			<comment><![CDATA[map input to json]]></comment>
		</procedure>
		<procedure name="to_jsonb" id="Procedure_22ab50" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_jsonb(anyelement)
 RETURNS jsonb
 LANGUAGE internal
 STABLE STRICT
AS $function$to_jsonb$function$
]]></string>
			<comment><![CDATA[map input to jsonb]]></comment>
		</procedure>
		<procedure name="to_number" id="Procedure_2b393c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_number(text, text)
 RETURNS numeric
 LANGUAGE internal
 STABLE STRICT
AS $function$numeric_to_number$function$
]]></string>
			<comment><![CDATA[convert text to numeric]]></comment>
		</procedure>
		<procedure name="to_regclass" id="Procedure_12ea035" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regclass(cstring)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regclass$function$
]]></string>
			<comment><![CDATA[convert classname to regclass]]></comment>
		</procedure>
		<procedure name="to_regnamespace" id="Procedure_33bdf48" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regnamespace(cstring)
 RETURNS regnamespace
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regnamespace$function$
]]></string>
			<comment><![CDATA[convert namespace name to regnamespace]]></comment>
		</procedure>
		<procedure name="to_regoper" id="Procedure_5340104" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regoper(cstring)
 RETURNS regoper
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regoper$function$
]]></string>
			<comment><![CDATA[convert operator name to regoper]]></comment>
		</procedure>
		<procedure name="to_regoperator" id="Procedure_4da7023" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regoperator(cstring)
 RETURNS regoperator
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regoperator$function$
]]></string>
			<comment><![CDATA[convert operator name to regoperator]]></comment>
		</procedure>
		<procedure name="to_regproc" id="Procedure_125110c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regproc(cstring)
 RETURNS regproc
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regproc$function$
]]></string>
			<comment><![CDATA[convert proname to regproc]]></comment>
		</procedure>
		<procedure name="to_regprocedure" id="Procedure_23d92b2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regprocedure(cstring)
 RETURNS regprocedure
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regprocedure$function$
]]></string>
			<comment><![CDATA[convert proname to regprocedure]]></comment>
		</procedure>
		<procedure name="to_regrole" id="Procedure_1507120" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regrole(cstring)
 RETURNS regrole
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regrole$function$
]]></string>
			<comment><![CDATA[convert role name to regrole]]></comment>
		</procedure>
		<procedure name="to_regtype" id="Procedure_2598d9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_regtype(cstring)
 RETURNS regtype
 LANGUAGE internal
 STABLE STRICT
AS $function$to_regtype$function$
]]></string>
			<comment><![CDATA[convert type name to regtype]]></comment>
		</procedure>
		<procedure name="to_timestamp" id="Procedure_4ce06d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(double precision)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ('epoch'::pg_catalog.timestamptz + $1 * '1 second'::pg_catalog.interval)$function$
]]></string>
			<comment><![CDATA[convert UNIX epoch to timestamptz]]></comment>
		</procedure>
		<procedure name="to_timestamp" id="Procedure_5891ae0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(double precision)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ('epoch'::pg_catalog.timestamptz + $1 * '1 second'::pg_catalog.interval)$function$
]]></string>
			<comment><![CDATA[convert UNIX epoch to timestamptz]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="to_tsquery" id="Procedure_4ec0fe5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$to_tsquery_byid$function$
]]></string>
			<comment><![CDATA[make tsquery]]></comment>
		</procedure>
		<procedure name="to_tsquery" id="Procedure_580b7e7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$to_tsquery_byid$function$
]]></string>
			<comment><![CDATA[make tsquery]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="tsquery" />
		</procedure>
		<procedure name="to_tsvector" id="Procedure_484b56" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(regconfig, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$to_tsvector_byid$function$
]]></string>
			<comment><![CDATA[transform to tsvector]]></comment>
		</procedure>
		<procedure name="to_tsvector" id="Procedure_4f00bf8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(regconfig, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$to_tsvector_byid$function$
]]></string>
			<comment><![CDATA[transform to tsvector]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="tsvector" />
		</procedure>
		<procedure name="transaction_timestamp" id="Procedure_da2056" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.transaction_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</procedure>
		<procedure name="translate" id="Procedure_178a90c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.translate(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$translate$function$
]]></string>
			<comment><![CDATA[map a set of characters appearing in string]]></comment>
		</procedure>
		<procedure name="trigger_in" id="Procedure_2063f93" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trigger_in(cstring)
 RETURNS trigger
 LANGUAGE internal
 IMMUTABLE
AS $function$trigger_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="trigger_out" id="Procedure_4eb35ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trigger_out(trigger)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$trigger_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="trunc" id="Procedure_2360636" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</procedure>
		<procedure name="trunc" id="Procedure_28a885d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="trunc" id="Procedure_134f333" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="trunc" id="Procedure_5b1b16b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
			<input_param name="$1" jt="8" type="float8" />
			<result_param name="returnValue" jt="8" type="float8" />
		</procedure>
		<procedure name="ts_debug" id="Procedure_17b1b29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT
    tt.alias AS alias,
    tt.description AS description,
    parse.token AS token,
    ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary
            FROM pg_catalog.pg_ts_config_map AS m
            WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
            ORDER BY m.mapseqno )
    AS dictionaries,
    ( SELECT mapdict::pg_catalog.regdictionary
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS dictionary,
    ( SELECT pg_catalog.ts_lexize(mapdict, parse.token)
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS lexemes
FROM pg_catalog.ts_parse(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 ), $2
    ) AS parse,
     pg_catalog.ts_token_type(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 )
    ) AS tt
WHERE tt.tokid = parse.tokid
$function$
]]></string>
			<comment><![CDATA[debug function for text search configuration]]></comment>
		</procedure>
		<procedure name="ts_debug" id="Procedure_2c57e00" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT
    tt.alias AS alias,
    tt.description AS description,
    parse.token AS token,
    ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary
            FROM pg_catalog.pg_ts_config_map AS m
            WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
            ORDER BY m.mapseqno )
    AS dictionaries,
    ( SELECT mapdict::pg_catalog.regdictionary
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS dictionary,
    ( SELECT pg_catalog.ts_lexize(mapdict, parse.token)
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS lexemes
FROM pg_catalog.ts_parse(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 ), $2
    ) AS parse,
     pg_catalog.ts_token_type(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 )
    ) AS tt
WHERE tt.tokid = parse.tokid
$function$
]]></string>
			<comment><![CDATA[debug function for text search configuration]]></comment>
			<input_param name="config" jt="1111" type="regconfig" />
			<input_param name="document" jt="12" type="text" />
			<input_param name="alias" jt="12" type="text" />
			<input_param name="description" jt="12" type="text" />
			<input_param name="token" jt="12" type="text" />
			<input_param name="dictionaries" jt="2003" type="_regdictionary" />
			<input_param name="dictionary" jt="1111" type="regdictionary" />
			<input_param name="lexemes" jt="2003" type="_text" />
		</procedure>
		<procedure name="ts_headline" id="Procedure_2ab7fdf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</procedure>
		<procedure name="ts_headline" id="Procedure_34f36d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="ts_headline" id="Procedure_2934f32" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="ts_headline" id="Procedure_5071683" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT COST 100
AS $function$ts_headline_byid_opt$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
			<input_param name="$1" jt="1111" type="regconfig" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="ts_lexize" id="Procedure_2b7098d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_lexize(regdictionary, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_lexize$function$
]]></string>
			<comment><![CDATA[normalize one word by dictionary]]></comment>
		</procedure>
		<procedure name="ts_match_qv" id="Procedure_3ab6502" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_qv(tsquery, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_match_qv$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="ts_match_tq" id="Procedure_3e120a4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tq(text, tsquery)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$ts_match_tq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="ts_match_tt" id="Procedure_135432e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tt(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$ts_match_tt$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="ts_match_vq" id="Procedure_99945e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_vq(tsvector, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_match_vq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</procedure>
		<procedure name="ts_parse" id="Procedure_bbcaf1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_oid oid, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_parse_byid$function$
]]></string>
			<comment><![CDATA[parse text to tokens]]></comment>
		</procedure>
		<procedure name="ts_parse" id="Procedure_3c19537" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_oid oid, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_parse_byid$function$
]]></string>
			<comment><![CDATA[parse text to tokens]]></comment>
			<input_param name="parser_oid" jt="-5" type="oid" />
			<input_param name="txt" jt="12" type="text" />
			<input_param name="tokid" jt="4" type="int4" />
			<input_param name="token" jt="12" type="text" />
		</procedure>
		<procedure name="ts_rank" id="Procedure_148f841" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</procedure>
		<procedure name="ts_rank" id="Procedure_1735506" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rank" id="Procedure_4820a09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rank" id="Procedure_a81247" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rank_cd" id="Procedure_3b303f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</procedure>
		<procedure name="ts_rank_cd" id="Procedure_205e0a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rank_cd" id="Procedure_c6c41" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rank_cd" id="Procedure_4b277de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
			<input_param name="$1" jt="2003" type="_float4" />
			<input_param name="$2" jt="1111" type="tsvector" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="7" type="float4" />
		</procedure>
		<procedure name="ts_rewrite" id="Procedure_765697" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_rewrite$function$
]]></string>
			<comment><![CDATA[rewrite tsquery]]></comment>
		</procedure>
		<procedure name="ts_rewrite" id="Procedure_51c89e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_rewrite$function$
]]></string>
			<comment><![CDATA[rewrite tsquery]]></comment>
			<input_param name="$1" jt="1111" type="tsquery" />
			<input_param name="$2" jt="1111" type="tsquery" />
			<input_param name="$3" jt="1111" type="tsquery" />
			<result_param name="returnValue" jt="1111" type="tsquery" />
		</procedure>
		<procedure name="ts_stat" id="Procedure_7fd966" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT COST 10 ROWS 10000
AS $function$ts_stat1$function$
]]></string>
			<comment><![CDATA[statistics of tsvector column]]></comment>
		</procedure>
		<procedure name="ts_stat" id="Procedure_fce2a6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT COST 10 ROWS 10000
AS $function$ts_stat1$function$
]]></string>
			<comment><![CDATA[statistics of tsvector column]]></comment>
			<input_param name="query" jt="12" type="text" />
			<input_param name="word" jt="12" type="text" />
			<input_param name="ndoc" jt="4" type="int4" />
			<input_param name="nentry" jt="4" type="int4" />
		</procedure>
		<procedure name="ts_token_type" id="Procedure_56e71e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 16
AS $function$ts_token_type_byid$function$
]]></string>
			<comment><![CDATA[get parser's token types]]></comment>
		</procedure>
		<procedure name="ts_token_type" id="Procedure_323c162" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 16
AS $function$ts_token_type_byid$function$
]]></string>
			<comment><![CDATA[get parser's token types]]></comment>
			<input_param name="parser_oid" jt="-5" type="oid" />
			<input_param name="tokid" jt="4" type="int4" />
			<input_param name="alias" jt="12" type="text" />
			<input_param name="description" jt="12" type="text" />
		</procedure>
		<procedure name="ts_typanalyze" id="Procedure_19e055" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$ts_typanalyze$function$
]]></string>
			<comment><![CDATA[tsvector typanalyze]]></comment>
		</procedure>
		<procedure name="tsm_handler_in" id="Procedure_3f93dd7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsm_handler_in(cstring)
 RETURNS tsm_handler
 LANGUAGE internal
 IMMUTABLE
AS $function$tsm_handler_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsm_handler_out" id="Procedure_2c651b0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsm_handler_out(tsm_handler)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsm_handler_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsmatchjoinsel" id="Procedure_844389" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$tsmatchjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of tsvector @@ tsquery]]></comment>
		</procedure>
		<procedure name="tsmatchsel" id="Procedure_372db4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$tsmatchsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of tsvector @@ tsquery]]></comment>
		</procedure>
		<procedure name="tsq_mcontained" id="Procedure_34177b1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontained(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsq_mcontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</procedure>
		<procedure name="tsq_mcontains" id="Procedure_571fc3d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontains(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsq_mcontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</procedure>
		<procedure name="tsquery_and" id="Procedure_3342f49" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_and(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_and$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</procedure>
		<procedure name="tsquery_cmp" id="Procedure_2015224" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_cmp(tsquery, tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="tsquery_eq" id="Procedure_2dbfe43" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_eq(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="tsquery_ge" id="Procedure_1448fab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ge(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="tsquery_gt" id="Procedure_21a4001" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_gt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="tsquery_le" id="Procedure_75773f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_le(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="tsquery_lt" id="Procedure_1df444e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_lt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="tsquery_ne" id="Procedure_138c1b7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ne(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="tsquery_not" id="Procedure_ea608c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_not(tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_not$function$
]]></string>
			<comment><![CDATA[implementation of !! operator]]></comment>
		</procedure>
		<procedure name="tsquery_or" id="Procedure_1b77a91" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_or(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_or$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="tsqueryin" id="Procedure_1018da7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsqueryin(cstring)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsqueryin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsqueryout" id="Procedure_11eb167" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsqueryout(tsquery)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsqueryout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsqueryrecv" id="Procedure_4c7c76f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsqueryrecv(internal)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsqueryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsquerysend" id="Procedure_59d1240" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquerysend(tsquery)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquerysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsrange" id="Procedure_2321e68" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[tsrange constructor]]></comment>
		</procedure>
		<procedure name="tsrange" id="Procedure_104c3ed" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[tsrange constructor]]></comment>
			<input_param name="$1" jt="93" type="timestamp" />
			<input_param name="$2" jt="93" type="timestamp" />
		</procedure>
		<procedure name="tsrange_subdiff" id="Procedure_2a6744b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange_subdiff(timestamp without time zone, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp values]]></comment>
		</procedure>
		<procedure name="tstzrange" id="Procedure_531be2a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[tstzrange constructor]]></comment>
		</procedure>
		<procedure name="tstzrange" id="Procedure_202609a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
]]></string>
			<comment><![CDATA[tstzrange constructor]]></comment>
			<input_param name="$1" jt="93" type="timestamptz" />
			<input_param name="$2" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="tstzrange_subdiff" id="Procedure_a36a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tstzrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp with time zone values]]></comment>
		</procedure>
		<procedure name="tsvector_cmp" id="Procedure_df1606" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_cmp(tsvector, tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="tsvector_concat" id="Procedure_ac65b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_concat(tsvector, tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_concat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</procedure>
		<procedure name="tsvector_eq" id="Procedure_44da1b5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_eq(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="tsvector_ge" id="Procedure_41f4c36" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ge(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="tsvector_gt" id="Procedure_3ac6e34" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_gt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="tsvector_le" id="Procedure_2bb8399" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_le(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="tsvector_lt" id="Procedure_16de7cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_lt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="tsvector_ne" id="Procedure_29d45c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ne(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="tsvector_update_trigger" id="Procedure_4ab5a65" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger()
 RETURNS trigger
 LANGUAGE internal
AS $function$tsvector_update_trigger_byid$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</procedure>
		<procedure name="tsvector_update_trigger_column" id="Procedure_1fe1fa0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger_column()
 RETURNS trigger
 LANGUAGE internal
AS $function$tsvector_update_trigger_bycolumn$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</procedure>
		<procedure name="tsvectorin" id="Procedure_46bb5aa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorin(cstring)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsvectorout" id="Procedure_34ab66b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorout(tsvector)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsvectorrecv" id="Procedure_14f3b0d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorrecv(internal)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="tsvectorsend" id="Procedure_49cf2f3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorsend(tsvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="txid_current" id="Procedure_49cdc29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$txid_current$function$
]]></string>
			<comment><![CDATA[get current transaction ID]]></comment>
		</procedure>
		<procedure name="txid_current_snapshot" id="Procedure_2a5b4c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current_snapshot()
 RETURNS txid_snapshot
 LANGUAGE internal
 STABLE STRICT
AS $function$txid_current_snapshot$function$
]]></string>
			<comment><![CDATA[get current snapshot]]></comment>
		</procedure>
		<procedure name="txid_snapshot_in" id="Procedure_400c148" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_in(cstring)
 RETURNS txid_snapshot
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="txid_snapshot_out" id="Procedure_3732b74" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_out(txid_snapshot)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="txid_snapshot_recv" id="Procedure_3af730b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_recv(internal)
 RETURNS txid_snapshot
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="txid_snapshot_send" id="Procedure_50d8d4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_send(txid_snapshot)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="txid_snapshot_xip" id="Procedure_12ee2f0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xip(txid_snapshot)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 50
AS $function$txid_snapshot_xip$function$
]]></string>
			<comment><![CDATA[get set of in-progress txids in snapshot]]></comment>
		</procedure>
		<procedure name="txid_snapshot_xmax" id="Procedure_5d0b160" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmax(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_xmax$function$
]]></string>
			<comment><![CDATA[get xmax of snapshot]]></comment>
		</procedure>
		<procedure name="txid_snapshot_xmin" id="Procedure_2ff8398" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmin(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_xmin$function$
]]></string>
			<comment><![CDATA[get xmin of snapshot]]></comment>
		</procedure>
		<procedure name="txid_visible_in_snapshot" id="Procedure_ba4085" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_visible_in_snapshot$function$
]]></string>
			<comment><![CDATA[is txid visible in snapshot?]]></comment>
		</procedure>
		<procedure name="uhc_to_utf8" id="Procedure_405e762" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_uhc', $function$uhc_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for UHC to UTF8]]></comment>
		</procedure>
		<procedure name="unique_key_recheck" id="Procedure_4eba71" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unique_key_recheck()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$unique_key_recheck$function$
]]></string>
			<comment><![CDATA[deferred UNIQUE constraint check]]></comment>
		</procedure>
		<procedure name="unknownin" id="Procedure_25d0435" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownin(cstring)
 RETURNS unknown
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="unknownout" id="Procedure_37c55c4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownout(unknown)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="unknownrecv" id="Procedure_3ede720" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownrecv(internal)
 RETURNS unknown
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="unknownsend" id="Procedure_33356d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownsend(unknown)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="unnest" id="Procedure_310f5ef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unnest(anyarray)
 RETURNS SETOF anyelement
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$array_unnest$function$
]]></string>
			<comment><![CDATA[expand array to set of rows]]></comment>
		</procedure>
		<procedure name="upper" id="Procedure_542e735" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper$function$
]]></string>
			<comment><![CDATA[upper bound of range]]></comment>
		</procedure>
		<procedure name="upper" id="Procedure_6619cf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper$function$
]]></string>
			<comment><![CDATA[upper bound of range]]></comment>
			<input_param name="$1" jt="1111" type="anyrange" />
			<result_param name="returnValue" jt="1111" type="anyelement" />
		</procedure>
		<procedure name="upper_inc" id="Procedure_4571f54" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper_inc$function$
]]></string>
			<comment><![CDATA[is the range's upper bound inclusive?]]></comment>
		</procedure>
		<procedure name="upper_inf" id="Procedure_5780c6c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper_inf$function$
]]></string>
			<comment><![CDATA[is the range's upper bound infinite?]]></comment>
		</procedure>
		<procedure name="utf8_to_ascii" id="Procedure_c6107c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_ascii', $function$utf8_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SQL_ASCII]]></comment>
		</procedure>
		<procedure name="utf8_to_big5" id="Procedure_52620e6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_big5', $function$utf8_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to BIG5]]></comment>
		</procedure>
		<procedure name="utf8_to_euc_cn" id="Procedure_41b7b94" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_cn', $function$utf8_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_CN]]></comment>
		</procedure>
		<procedure name="utf8_to_euc_jis_2004" id="Procedure_4f28279" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc2004', $function$utf8_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JIS_2004]]></comment>
		</procedure>
		<procedure name="utf8_to_euc_jp" id="Procedure_3cb5ae7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_jp', $function$utf8_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JP]]></comment>
		</procedure>
		<procedure name="utf8_to_euc_kr" id="Procedure_2634130" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_kr', $function$utf8_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_KR]]></comment>
		</procedure>
		<procedure name="utf8_to_euc_tw" id="Procedure_5876609" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_tw', $function$utf8_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_TW]]></comment>
		</procedure>
		<procedure name="utf8_to_gb18030" id="Procedure_351f836" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gb18030', $function$utf8_to_gb18030$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GB18030]]></comment>
		</procedure>
		<procedure name="utf8_to_gbk" id="Procedure_3b03e23" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gbk', $function$utf8_to_gbk$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GBK]]></comment>
		</procedure>
		<procedure name="utf8_to_iso8859" id="Procedure_5a2310f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859', $function$utf8_to_iso8859$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to ISO-8859-8]]></comment>
		</procedure>
		<procedure name="utf8_to_iso8859_1" id="Procedure_163e794" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859_1', $function$utf8_to_iso8859_1$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to LATIN1]]></comment>
		</procedure>
		<procedure name="utf8_to_johab" id="Procedure_c6c6bc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_johab', $function$utf8_to_johab$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to JOHAB]]></comment>
		</procedure>
		<procedure name="utf8_to_koi8r" id="Procedure_3c17572" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8R]]></comment>
		</procedure>
		<procedure name="utf8_to_koi8u" id="Procedure_afada2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8u$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8U]]></comment>
		</procedure>
		<procedure name="utf8_to_shift_jis_2004" id="Procedure_2822bb4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis2004', $function$utf8_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SHIFT_JIS_2004]]></comment>
		</procedure>
		<procedure name="utf8_to_sjis" id="Procedure_5c5892" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis', $function$utf8_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SJIS]]></comment>
		</procedure>
		<procedure name="utf8_to_uhc" id="Procedure_2ab12c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_uhc', $function$utf8_to_uhc$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to UHC]]></comment>
		</procedure>
		<procedure name="utf8_to_win" id="Procedure_5090b85" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_win', $function$utf8_to_win$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to WIN1258]]></comment>
		</procedure>
		<procedure name="uuid_cmp" id="Procedure_6b0554" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_cmp(uuid, uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="uuid_eq" id="Procedure_4eca560" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_eq(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="uuid_ge" id="Procedure_537ee34" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ge(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="uuid_gt" id="Procedure_58bc11c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_gt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="uuid_hash" id="Procedure_36cb6ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_hash(uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</procedure>
		<procedure name="uuid_in" id="Procedure_5d20abd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_in(cstring)
 RETURNS uuid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="uuid_le" id="Procedure_2686b86" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_le(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="uuid_lt" id="Procedure_5ce1387" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_lt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="uuid_ne" id="Procedure_35f380e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ne(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="uuid_out" id="Procedure_5d55ae8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_out(uuid)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="uuid_recv" id="Procedure_15bea04" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_recv(internal)
 RETURNS uuid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="uuid_send" id="Procedure_5d3f699" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_send(uuid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varbit" id="Procedure_2d3edc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit(bit varying, integer, boolean)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit$function$
]]></string>
			<comment><![CDATA[adjust varbit() to typmod length]]></comment>
		</procedure>
		<procedure name="varbit_in" id="Procedure_11ddeed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_in(cstring, oid, integer)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varbit_out" id="Procedure_47f9ef4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_out(bit varying)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varbit_recv" id="Procedure_9353ee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_recv(internal, oid, integer)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varbit_send" id="Procedure_40ffb10" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_send(bit varying)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varbit_transform" id="Procedure_35f5b84" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_transform$function$
]]></string>
			<comment><![CDATA[transform a varbit length coercion]]></comment>
		</procedure>
		<procedure name="varbitcmp" id="Procedure_2d98c87" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitcmp(bit varying, bit varying)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</procedure>
		<procedure name="varbiteq" id="Procedure_1c61801" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbiteq(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="varbitge" id="Procedure_279a50f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitge(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</procedure>
		<procedure name="varbitgt" id="Procedure_39617d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitgt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</procedure>
		<procedure name="varbitle" id="Procedure_98d867" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitle(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</procedure>
		<procedure name="varbitlt" id="Procedure_5938e03" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitlt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</procedure>
		<procedure name="varbitne" id="Procedure_553e2ac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitne(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</procedure>
		<procedure name="varbittypmodin" id="Procedure_38f94be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="varbittypmodout" id="Procedure_3fe854e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbittypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbittypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="varchar" id="Procedure_39033a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."varchar"(name)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_text$function$
]]></string>
			<comment><![CDATA[convert name to varchar]]></comment>
		</procedure>
		<procedure name="varchar" id="Procedure_2f2888c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."varchar"(name)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_text$function$
]]></string>
			<comment><![CDATA[convert name to varchar]]></comment>
			<input_param name="$1" jt="12" type="name" />
			<result_param name="returnValue" jt="12" type="varchar" />
		</procedure>
		<procedure name="varchar_transform" id="Procedure_356d515" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchar_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchar_transform$function$
]]></string>
			<comment><![CDATA[transform a varchar length coercion]]></comment>
		</procedure>
		<procedure name="varcharin" id="Procedure_1179be4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharin(cstring, oid, integer)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varcharin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varcharout" id="Procedure_1f798" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharout(character varying)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varcharout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varcharrecv" id="Procedure_55964cc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharrecv(internal, oid, integer)
 RETURNS character varying
 LANGUAGE internal
 STABLE STRICT
AS $function$varcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varcharsend" id="Procedure_3716848" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharsend(character varying)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$varcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="varchartypmodin" id="Procedure_1f86ea1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="varchartypmodout" id="Procedure_5274278" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchartypmodout(integer)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchartypmodout$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</procedure>
		<procedure name="version" id="Procedure_5c0ce18" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.version()
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pgsql_version$function$
]]></string>
			<comment><![CDATA[PostgreSQL version string]]></comment>
		</procedure>
		<procedure name="void_in" id="Procedure_1ca2852" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_in(cstring)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="void_out" id="Procedure_208595e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_out(void)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="void_recv" id="Procedure_d9fe81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_recv(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="void_send" id="Procedure_38c61bb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_send(void)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="width" id="Procedure_4db9690" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_width$function$
]]></string>
			<comment><![CDATA[box width]]></comment>
		</procedure>
		<procedure name="width_bucket" id="Procedure_177ae39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
		</procedure>
		<procedure name="width_bucket" id="Procedure_2f4619f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
			<input_param name="$3" jt="2" type="numeric" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="width_bucket" id="Procedure_a362a7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equal-width histogram]]></comment>
			<input_param name="$1" jt="2" type="numeric" />
			<input_param name="$2" jt="2" type="numeric" />
			<input_param name="$3" jt="2" type="numeric" />
			<input_param name="$4" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="win1250_to_latin2" id="Procedure_1689161" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to LATIN2]]></comment>
		</procedure>
		<procedure name="win1250_to_mic" id="Procedure_36da3e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="win1251_to_iso" id="Procedure_1eb944f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to ISO-8859-5]]></comment>
		</procedure>
		<procedure name="win1251_to_koi8r" id="Procedure_533d984" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to KOI8R]]></comment>
		</procedure>
		<procedure name="win1251_to_mic" id="Procedure_7a3f81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="win1251_to_win866" id="Procedure_1e3b742" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to WIN866]]></comment>
		</procedure>
		<procedure name="win866_to_iso" id="Procedure_501e55b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to ISO-8859-5]]></comment>
		</procedure>
		<procedure name="win866_to_koi8r" id="Procedure_22ccde1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to KOI8R]]></comment>
		</procedure>
		<procedure name="win866_to_mic" id="Procedure_1c9150b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to MULE_INTERNAL]]></comment>
		</procedure>
		<procedure name="win866_to_win1251" id="Procedure_3432ed4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to WIN1251]]></comment>
		</procedure>
		<procedure name="win_to_utf8" id="Procedure_a87795" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_win', $function$win_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1258 to UTF8]]></comment>
		</procedure>
		<procedure name="xideq" id="Procedure_3eb3a90" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideq(xid, xid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="xideqint4" id="Procedure_a99509" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideqint4(xid, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</procedure>
		<procedure name="xidin" id="Procedure_567744d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidin(cstring)
 RETURNS xid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidin$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xidout" id="Procedure_18cb14e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidout(xid)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidout$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xidrecv" id="Procedure_4f33b6c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidrecv(internal)
 RETURNS xid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xidsend" id="Procedure_5e775d1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidsend(xid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xml" id="Procedure_1ecc65e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml(text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT
AS $function$texttoxml$function$
]]></string>
			<comment><![CDATA[perform a non-validating parse of a character string to produce an XML value]]></comment>
		</procedure>
		<procedure name="xml_in" id="Procedure_26db84a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_in(cstring)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_in$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xml_is_well_formed" id="Procedure_48d03de" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed(text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_is_well_formed$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML]]></comment>
		</procedure>
		<procedure name="xml_is_well_formed_content" id="Procedure_2c83ed4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_content(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xml_is_well_formed_content$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML content]]></comment>
		</procedure>
		<procedure name="xml_is_well_formed_document" id="Procedure_1e8d18f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_document(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xml_is_well_formed_document$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML document]]></comment>
		</procedure>
		<procedure name="xml_out" id="Procedure_45707e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_out(xml)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xml_out$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xml_recv" id="Procedure_f739f4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_recv(internal)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xml_send" id="Procedure_389b168" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_send(xml)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</procedure>
		<procedure name="xmlcomment" id="Procedure_2ecb21a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlcomment(text)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlcomment$function$
]]></string>
			<comment><![CDATA[generate XML comment]]></comment>
		</procedure>
		<procedure name="xmlconcat2" id="Procedure_54467bd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlconcat2(xml, xml)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE
AS $function$xmlconcat2$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</procedure>
		<procedure name="xmlexists" id="Procedure_217c67" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."xmlexists"(text, xml)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlexists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression]]></comment>
		</procedure>
		<procedure name="xmlvalidate" id="Procedure_15a6fc0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlvalidate(xml, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlvalidate$function$
]]></string>
			<comment><![CDATA[validate an XML value]]></comment>
		</procedure>
		<procedure name="xpath" id="Procedure_26af545" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml, text[])
 RETURNS xml[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath$function$
]]></string>
			<comment><![CDATA[evaluate XPath expression, with namespaces support]]></comment>
		</procedure>
		<procedure name="xpath" id="Procedure_4a5d3ff" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml, text[])
 RETURNS xml[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath$function$
]]></string>
			<comment><![CDATA[evaluate XPath expression, with namespaces support]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="2009" type="xml" />
			<input_param name="$3" jt="2003" type="_text" />
			<result_param name="returnValue" jt="2003" type="_xml" />
		</procedure>
		<procedure name="xpath_exists" id="Procedure_2e98937" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath_exists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression, with namespace support]]></comment>
		</procedure>
		<procedure name="xpath_exists" id="Procedure_50e99ec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath_exists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression, with namespace support]]></comment>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="2009" type="xml" />
			<input_param name="$3" jt="2003" type="_text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
	</schema>
	<schema name="public" catalogname="gobii_rice1" >
		<table name="analysis" >
			<column name="analysis_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="program" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="programversion" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="algorithm" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourcename" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourceversion" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="sourceuri" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="parameters" type="jsonb" length="2147483647" decimal="0" jt="2000" />
			<column name="timeexecuted" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<index name="pk_analysis" unique="PRIMARY_KEY" >
				<column name="analysis_id" />
			</index>
			<index name="idx_analysis_type_id" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<fk name="analysis_analysis_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="contact" >
			<column name="contact_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="lastname" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="firstname" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="email" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="roles" type="integer[]" length="10" decimal="0" jt="2003" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="organization_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="username" type="text" decimal="0" jt="12" />
			<index name="pk_contact" unique="PRIMARY_KEY" >
				<column name="contact_id" />
			</index>
			<index name="email_key" unique="UNIQUE_KEY" >
				<column name="email" />
			</index>
			<index name="contact_username_key" unique="UNIQUE_KEY" >
				<column name="username" />
			</index>
			<fk name="contact_organization_id_fkey" to_schema="gobii_rice1.public" to_table="organization" >
				<fk_column name="organization_id" pk="organization_id" />
			</fk>
		</table>
		<table name="cv" >
			<comment><![CDATA[A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships.]]></comment>
			<column name="cv_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="term" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[A concise human-readable name or
label for the cvterm. Uniquely identifies a cvterm within a cv.]]></comment>
			</column>
			<column name="definition" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[A human-readable text
definition.]]></comment>
			</column>
			<column name="rank" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="cvgroup_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<comment><![CDATA[The cv or ontology or namespace to which
this cvterm belongs.]]></comment>
			</column>
			<column name="abbreviation" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="dbxref_id" type="integer" length="10" decimal="0" jt="4" >
				<comment><![CDATA[Primary identifier dbxref - The
unique global OBO identifier for this cvterm.]]></comment>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_cv" unique="PRIMARY_KEY" >
				<column name="cv_id" />
			</index>
			<index name="unique_cvterm_term_cvgroupid" unique="UNIQUE_KEY" >
				<column name="term" />
				<column name="cvgroup_id" />
			</index>
			<index name="idx_cv_cvgroupid" unique="NORMAL" >
				<column name="cvgroup_id" />
			</index>
			<index name="idx_cv_dbxrefid" unique="NORMAL" >
				<column name="dbxref_id" />
			</index>
			<index name="idx_cv_term" unique="NORMAL" >
				<column name="term" />
			</index>
			<fk name="cv_cvgroupid_fkey" to_schema="gobii_rice1.public" to_table="cvgroup" >
				<fk_column name="cvgroup_id" pk="cvgroup_id" />
			</fk>
			<fk name="cv_dbxrefid_fkey" to_schema="gobii_rice1.public" to_table="dbxref" >
				<fk_column name="dbxref_id" pk="dbxref_id" />
			</fk>
		</table>
		<table name="cvgroup" >
			<comment><![CDATA[A controlled vocabulary or ontology. A cv is
composed of cvterms (AKA terms, classes, types, universals - relations
and properties are also stored in cvterm) and the relationships
between them.]]></comment>
			<column name="cvgroup_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[The name of the group.]]></comment>
			</column>
			<column name="definition" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[A text description of the criteria for membership of this group.]]></comment>
			</column>
			<column name="type" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
				<comment><![CDATA[Determines if CV group is of type "System CV" (1) or "Custom CV" (2). More types can be added as needed]]></comment>
			</column>
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="cv_pkey" unique="PRIMARY_KEY" >
				<column name="cvgroup_id" />
			</index>
			<index name="unique_cvgroup_name_type" unique="UNIQUE_KEY" >
				<column name="name" />
				<column name="type" />
			</index>
			<index name="idx_cvgroup" unique="NORMAL" >
				<column name="type" />
			</index>
		</table>
		<table name="databasechangelog" >
			<column name="id" type="varchar" length="255" decimal="0" jt="12" mandatory="y" />
			<column name="author" type="varchar" length="255" decimal="0" jt="12" mandatory="y" />
			<column name="filename" type="varchar" length="255" decimal="0" jt="12" mandatory="y" />
			<column name="dateexecuted" type="timestamp" length="29" decimal="6" jt="93" mandatory="y" />
			<column name="orderexecuted" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="exectype" type="varchar" length="10" decimal="0" jt="12" mandatory="y" />
			<column name="md5sum" type="varchar" length="35" decimal="0" jt="12" />
			<column name="description" type="varchar" length="255" decimal="0" jt="12" />
			<column name="comments" type="varchar" length="255" decimal="0" jt="12" />
			<column name="tag" type="varchar" length="255" decimal="0" jt="12" />
			<column name="liquibase" type="varchar" length="20" decimal="0" jt="12" />
			<column name="contexts" type="varchar" length="255" decimal="0" jt="12" />
			<column name="labels" type="varchar" length="255" decimal="0" jt="12" />
			<column name="deployment_id" type="varchar" length="10" decimal="0" jt="12" />
		</table>
		<table name="databasechangeloglock" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="locked" type="boolean" length="1" decimal="0" jt="-7" mandatory="y" />
			<column name="lockgranted" type="timestamp" length="29" decimal="6" jt="93" />
			<column name="lockedby" type="varchar" length="255" decimal="0" jt="12" />
			<index name="pk_databasechangeloglock" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="dataset" >
			<column name="dataset_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="experiment_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="callinganalysis_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="analyses" type="integer[]" length="10" decimal="0" jt="2003" />
			<column name="data_table" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="data_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="quality_table" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="quality_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="scores" type="jsonb" length="2147483647" decimal="0" jt="2000" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="job_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_dataset" unique="PRIMARY_KEY" >
				<column name="dataset_id" />
			</index>
			<index name="idx_dataset_experiment_id" unique="NORMAL" >
				<column name="experiment_id" />
			</index>
			<fk name="dataset_callinganalysis_id_fkey" to_schema="gobii_rice1.public" to_table="analysis" >
				<fk_column name="callinganalysis_id" pk="analysis_id" />
			</fk>
			<fk name="dataset_experiment_id_fkey" to_schema="gobii_rice1.public" to_table="experiment" >
				<fk_column name="experiment_id" pk="experiment_id" />
			</fk>
			<fk name="dataset_job_id_fk" to_schema="gobii_rice1.public" to_table="job" >
				<fk_column name="job_id" pk="job_id" />
			</fk>
		</table>
		<table name="dbxref" >
			<comment><![CDATA[A unique, global, public, stable identifier. Not necessarily an external reference - can reference data items inside the particular instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>.]]></comment>
			<column name="dbxref_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="accession" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<defo><![CDATA[''::text]]></defo>
				<comment><![CDATA[The local part of the identifier. Guaranteed by the db authority to be unique for that db.]]></comment>
			</column>
			<column name="ver" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="db_name" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[source name, ex. EDAM Ontology
A database authority. Typical databases in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this shortened form, which is unique within the
bioinformatics and biomedical realm.]]></comment>
			</column>
			<column name="url" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="dbxref_pkey" unique="PRIMARY_KEY" >
				<column name="dbxref_id" />
			</index>
			<index name="unique_dbxref_accession_version" unique="UNIQUE_KEY" >
				<column name="accession" />
				<column name="ver" />
			</index>
			<index name="idx_dbxref_accession" unique="NORMAL" >
				<column name="accession" />
			</index>
			<index name="idx_dbxref_ver" unique="NORMAL" >
				<column name="ver" />
			</index>
		</table>
		<table name="display" >
			<column name="display_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="table_name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="column_name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="display_name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<column name="rank" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_table_display" unique="PRIMARY_KEY" >
				<column name="display_id" />
			</index>
		</table>
		<table name="dnarun" >
			<column name="dnarun_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="experiment_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="dnasample_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="dataset_dnarun_idx" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_dnarun" unique="PRIMARY_KEY" >
				<column name="dnarun_id" />
			</index>
			<index name="idx_dnarun_datasetdnarunidx" unique="NORMAL" >
				<column name="dataset_dnarun_idx" />
			</index>
			<index name="idx_dnarun_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_dnarun_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<fk name="dnarun_dnasample_id_fkey" to_schema="gobii_rice1.public" to_table="dnasample" >
				<fk_column name="dnasample_id" pk="dnasample_id" />
			</fk>
			<fk name="dnarun_experiment_id_fkey" to_schema="gobii_rice1.public" to_table="experiment" >
				<fk_column name="experiment_id" pk="experiment_id" />
			</fk>
		</table>
		<table name="dnasample" >
			<column name="dnasample_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="platename" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="num" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="well_row" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="well_col" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="project_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="germplasm_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_dnasample" unique="PRIMARY_KEY" >
				<column name="dnasample_id" />
			</index>
			<index name="idx_dnasample_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_dnasample_num" unique="NORMAL" >
				<column name="num" />
			</index>
			<index name="idx_dnasample_platename" unique="NORMAL" >
				<column name="platename" />
			</index>
			<index name="idx_dnasample_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<index name="idx_dnasample_wellrow_wellcol" unique="NORMAL" >
				<column name="well_row" />
				<column name="well_col" />
			</index>
			<fk name="dnasample_germplasm_id_fkey" to_schema="gobii_rice1.public" to_table="germplasm" >
				<fk_column name="germplasm_id" pk="germplasm_id" />
			</fk>
			<fk name="dnasample_project_id_fkey" to_schema="gobii_rice1.public" to_table="project" >
				<fk_column name="project_id" pk="project_id" />
			</fk>
		</table>
		<table name="edge" >
			<column name="edge_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="start_vertex" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="end_vertex" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="criterion" type="text" decimal="0" jt="12" />
			<index name="edge_pkey" unique="PRIMARY_KEY" >
				<column name="edge_id" />
			</index>
			<index name="edge_start_vertex_end_vertex_key" unique="UNIQUE_KEY" >
				<column name="start_vertex" />
				<column name="end_vertex" />
			</index>
			<index name="end_vertex_idx" unique="NORMAL" >
				<column name="end_vertex" />
			</index>
			<index name="start_vertex_idx" unique="NORMAL" >
				<column name="start_vertex" />
			</index>
			<index name="typeof_edge_idx" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<constraint name="self_loops_check" >
				<string><![CDATA[start_vertex <> end_vertex]]></string>
			</constraint>
			<fk name="edge_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" update_action="cascade" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
			<fk name="edge_end_vertex_fkey" to_schema="gobii_rice1.public" to_table="vertex" delete_action="cascade" update_action="cascade" >
				<fk_column name="end_vertex" pk="vertex_id" />
			</fk>
			<fk name="edge_start_vertex_fkey" to_schema="gobii_rice1.public" to_table="vertex" delete_action="cascade" update_action="cascade" >
				<fk_column name="start_vertex" pk="vertex_id" />
			</fk>
		</table>
		<table name="experiment" >
			<column name="experiment_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="project_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="manifest_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="data_file" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="vendor_protocol_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="pk_experiment" unique="PRIMARY_KEY" >
				<column name="experiment_id" />
			</index>
			<index name="idx_experiment_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_experiment_project_id" unique="NORMAL" >
				<column name="project_id" />
			</index>
			<index name="idx_experiment_vendor_protocol_id" unique="NORMAL" >
				<column name="vendor_protocol_id" />
			</index>
			<fk name="experiment_manifest_id_fkey" to_schema="gobii_rice1.public" to_table="manifest" >
				<fk_column name="manifest_id" pk="manifest_id" />
			</fk>
			<fk name="experiment_project_id_fkey" to_schema="gobii_rice1.public" to_table="project" >
				<fk_column name="project_id" pk="project_id" />
			</fk>
			<fk name="experiment_vendor_protocol_id_fkey" to_schema="gobii_rice1.public" to_table="vendor_protocol" >
				<fk_column name="vendor_protocol_id" pk="vendor_protocol_id" />
			</fk>
		</table>
		<table name="germplasm" >
			<column name="germplasm_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="external_code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="species_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" >
				<defo><![CDATA[0]]></defo>
			</column>
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_germplasm" unique="PRIMARY_KEY" >
				<column name="germplasm_id" />
			</index>
			<index name="idx_germplasm_status" unique="NORMAL" >
				<column name="status" />
			</index>
			<index name="idx_germplasm_species_id" unique="NORMAL" >
				<column name="species_id" />
			</index>
			<index name="idx_germplasm_external_code" unique="NORMAL" >
				<column name="external_code" />
			</index>
			<index name="idx_germplasm_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_germplasm_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<index name="idx_germplasm_type_id" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<fk name="germplasm_species_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="species_id" pk="cv_id" />
			</fk>
			<fk name="germplasm_germplasm_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="gobiiprop" >
			<comment><![CDATA[This table is different from other prop tables/columns in the database, as it is for storing information about the database itself, like schema version]]></comment>
			<column name="gobiiprop_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<comment><![CDATA[The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.]]></comment>
			</column>
			<column name="value" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[The value of the property, represented as text. Numeric values are converted to their text representation.]]></comment>
			</column>
			<column name="rank" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
				<comment><![CDATA[Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.]]></comment>
			</column>
			<index name="gobiiprop_pkey" unique="PRIMARY_KEY" >
				<column name="gobiiprop_id" />
			</index>
			<index name="gobiiprop_c1" unique="UNIQUE_KEY" >
				<column name="type_id" />
				<column name="rank" />
			</index>
		</table>
		<table name="job" >
			<comment><![CDATA[This table keeps track of all the data loading and extraction jobs.]]></comment>
			<column name="job_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="payload_type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="message" type="text" decimal="0" jt="12" />
			<column name="submitted_by" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="submitted_date" type="timestamptz" length="35" decimal="6" jt="93" mandatory="y" >
				<defo><![CDATA[now()]]></defo>
			</column>
			<column name="name" type="text" decimal="0" jt="12" />
			<index name="pk_job" unique="PRIMARY_KEY" >
				<column name="job_id" />
			</index>
			<index name="idx_job_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_job_payload_type_id" unique="NORMAL" >
				<column name="payload_type_id" />
			</index>
			<index name="idx_job_status" unique="NORMAL" >
				<column name="status" />
			</index>
			<index name="idx_job_submitted_by" unique="NORMAL" >
				<column name="submitted_by" />
			</index>
			<index name="idx_job_submitted_date" unique="NORMAL" >
				<column name="submitted_date" />
			</index>
			<index name="idx_job_type_id" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<fk name="job_submitted_by_fx" to_schema="gobii_rice1.public" to_table="contact" >
				<fk_column name="submitted_by" pk="contact_id" />
			</fk>
			<fk name="job_payload_type_id_fk" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="payload_type_id" pk="cv_id" />
			</fk>
			<fk name="job_status_fk" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="status" pk="cv_id" />
			</fk>
			<fk name="job_type_id_fk" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="linkage_group" >
			<comment><![CDATA[This table will contain different linkage groups, ie. Chromosome 1, Chromosome 2, etc. along with their respective start and stop boundaries.]]></comment>
			<column name="linkage_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="varchar" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[ex. Chromosome 1, Chromosome 2, ..., ChromosomeN, LG01, LG02, etc.]]></comment>
			</column>
			<column name="start" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
				<comment><![CDATA[Start of the linkage group. 0-based, interbased coordinates.]]></comment>
			</column>
			<column name="stop" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[0]]></defo>
				<comment><![CDATA[The maximum position in the linkage group, ex. 200, 200000000]]></comment>
			</column>
			<column name="map_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<comment><![CDATA[Foreign key to the Map table. This defines which map the linkage group belongs to.]]></comment>
			</column>
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<index name="pk_linkage_group" unique="PRIMARY_KEY" >
				<column name="linkage_group_id" />
			</index>
			<index name="idx_linkage_group_map_id" unique="NORMAL" >
				<column name="map_id" />
			</index>
			<index name="idx_linkage_group_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<fk name="linkage_group_map_id_fkey" to_schema="gobii_rice1.public" to_table="mapset" >
				<fk_column name="map_id" pk="mapset_id" />
			</fk>
		</table>
		<table name="manifest" >
			<column name="manifest_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="file_path" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<index name="pk_manifest" unique="PRIMARY_KEY" >
				<column name="manifest_id" />
			</index>
		</table>
		<table name="mapset" >
			<column name="mapset_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_map" unique="PRIMARY_KEY" >
				<column name="mapset_id" />
			</index>
			<index name="idx_mapset_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<fk name="map_map_type_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
			<fk name="map_reference_id_fkey" to_schema="gobii_rice1.public" to_table="reference" >
				<fk_column name="reference_id" pk="reference_id" />
			</fk>
		</table>
		<table name="marker" >
			<column name="marker_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="platform_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="variant_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="ref" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="alts" type="text[]" length="2147483647" decimal="0" jt="2003" />
			<column name="sequence" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="reference_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="primers" type="jsonb" length="2147483647" decimal="0" jt="2000" />
			<column name="strand_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="probsets" type="jsonb" length="2147483647" decimal="0" jt="2000" />
			<column name="dataset_marker_idx" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<column name="dataset_vendor_protocol" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
				<comment><![CDATA[Key-value-pair JSONB that stores the vendor_protocol ID for each marker-dataset combination.]]></comment>
			</column>
			<index name="pk_marker" unique="PRIMARY_KEY" >
				<column name="marker_id" />
			</index>
			<index name="idx_marker_strand_id" unique="NORMAL" >
				<column name="strand_id" />
			</index>
			<index name="idx_marker_reference_id" unique="NORMAL" >
				<column name="reference_id" />
			</index>
			<index name="idx_marker_datasetmarkeridx" unique="NORMAL" >
				<column name="dataset_marker_idx" />
			</index>
			<index name="idx_marker_datasetvendorprotocol" unique="NORMAL" >
				<column name="dataset_vendor_protocol" />
			</index>
			<index name="idx_marker_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_marker_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<fk name="marker_strand_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="strand_id" pk="cv_id" />
			</fk>
			<fk name="marker_platform_id_fkey" to_schema="gobii_rice1.public" to_table="platform" >
				<fk_column name="platform_id" pk="platform_id" />
			</fk>
			<fk name="marker_reference_id_fkey" to_schema="gobii_rice1.public" to_table="reference" >
				<fk_column name="reference_id" pk="reference_id" />
			</fk>
			<fk name="marker_variant_id_fkey" to_schema="gobii_rice1.public" to_table="variant" >
				<fk_column name="variant_id" pk="variant_id" />
			</fk>
		</table>
		<table name="marker_group" >
			<column name="marker_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="markers" type="jsonb" length="2147483647" decimal="0" jt="2000" mandatory="y" />
			<column name="germplasm_group" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_marker_group" unique="PRIMARY_KEY" >
				<column name="marker_group_id" />
			</index>
			<index name="unq_markergrp_name" unique="UNIQUE_KEY" >
				<column name="name" />
			</index>
		</table>
		<table name="marker_linkage_group" >
			<column name="marker_linkage_group_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="marker_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="start" type="numeric" length="13" decimal="3" jt="2" />
			<column name="stop" type="numeric" length="13" decimal="3" jt="2" />
			<column name="linkage_group_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="pk_marker_map" unique="PRIMARY_KEY" >
				<column name="marker_linkage_group_id" />
			</index>
			<index name="idx_marker_linkage_group_linkage_group_id" unique="NORMAL" >
				<column name="linkage_group_id" />
			</index>
			<index name="idx_marker_linkage_group_marker_id" unique="NORMAL" >
				<column name="marker_id" />
			</index>
			<index name="idx_marker_linkage_group_start" unique="NORMAL" >
				<column name="start" />
			</index>
			<index name="idx_marker_linkage_group_stop" unique="NORMAL" >
				<column name="stop" />
			</index>
			<fk name="marker_linkage_group_linkage_group_id_fkey" to_schema="gobii_rice1.public" to_table="linkage_group" >
				<fk_column name="linkage_group_id" pk="linkage_group_id" />
			</fk>
			<fk name="marker_map_marker_id_fkey" to_schema="gobii_rice1.public" to_table="marker" >
				<fk_column name="marker_id" pk="marker_id" />
			</fk>
		</table>
		<table name="organization" >
			<column name="organization_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="address" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="website" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[1]]></defo>
			</column>
			<index name="organization_pkey" unique="PRIMARY_KEY" >
				<column name="organization_id" />
			</index>
			<index name="organization_name_key" unique="UNIQUE_KEY" >
				<column name="name" />
			</index>
		</table>
		<table name="platform" >
			<column name="platform_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_platform" unique="PRIMARY_KEY" >
				<column name="platform_id" />
			</index>
			<index name="idx_platform_type_id" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<index name="idx_platform_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<fk name="platform_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<table name="project" >
			<column name="project_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="pi_contact" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<index name="pk_project" unique="PRIMARY_KEY" >
				<column name="project_id" />
			</index>
			<index name="pi_project_name_key" unique="UNIQUE_KEY" >
				<column name="pi_contact" />
				<column name="name" />
			</index>
			<index name="idx_project_pi_contact" unique="NORMAL" >
				<column name="pi_contact" />
			</index>
			<index name="idx_project_name" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="idx_project_props" unique="NORMAL" >
				<column name="props" />
			</index>
			<fk name="project_pi_contact" to_schema="gobii_rice1.public" to_table="contact" >
				<fk_column name="pi_contact" pk="contact_id" />
			</fk>
		</table>
		<table name="protocol" >
			<comment><![CDATA[A Platform can have multiple protocols and more than one protocol can be run by more than one vendor.]]></comment>
			<column name="protocol_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="platform_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="props" type="jsonb" length="2147483647" decimal="0" jt="2000" >
				<defo><![CDATA['{}'::jsonb]]></defo>
			</column>
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="status" type="integer" length="10" decimal="0" jt="4" >
				<defo><![CDATA[1]]></defo>
			</column>
			<index name="pk_protocol" unique="PRIMARY_KEY" >
				<column name="protocol_id" />
			</index>
			<index name="idx_protocol_platform_id" unique="NORMAL" >
				<column name="platform_id" />
			</index>
			<index name="idx_protocol_type_id" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<fk name="protocol_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
			<fk name="protocol_platform_id_fkey" to_schema="gobii_rice1.public" to_table="platform" >
				<fk_column name="platform_id" pk="platform_id" />
			</fk>
		</table>
		<table name="reference" >
			<column name="reference_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="version" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="link" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="file_path" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" >
				<defo><![CDATA[('now'::text)::date]]></defo>
			</column>
			<index name="pk_reference" unique="PRIMARY_KEY" >
				<column name="reference_id" />
			</index>
		</table>
		<table name="role" >
			<column name="role_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="role_name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="role_code" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="read_tables" type="integer[]" length="10" decimal="0" jt="2003" />
			<column name="write_tables" type="integer[]" length="10" decimal="0" jt="2003" />
			<index name="pk_role" unique="PRIMARY_KEY" >
				<column name="role_id" />
			</index>
			<index name="idx_role_role_name" unique="NORMAL" >
				<column name="role_name" />
			</index>
		</table>
		<table name="timescoper" >
			<column name="timescoper_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="firstname" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="lastname" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="username" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="password" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="email" type="text" decimal="0" jt="12" />
			<column name="role" type="integer" length="10" decimal="0" jt="4" >
				<defo><![CDATA[3]]></defo>
			</column>
			<index name="pk_timescoper" unique="PRIMARY_KEY" >
				<column name="timescoper_id" />
			</index>
			<index name="username_key" unique="UNIQUE_KEY" >
				<column name="username" />
			</index>
		</table>
		<table name="transitive_closure" >
			<column name="start_vertex" type="integer" length="10" decimal="0" jt="4" />
			<column name="end_vertex" type="integer" length="10" decimal="0" jt="4" />
			<column name="distance" type="integer" length="10" decimal="0" jt="4" />
			<column name="path_string" type="text" decimal="0" jt="12" />
		</table>
		<table name="variant" >
			<column name="variant_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="code" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="created_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="created_date" type="date" length="13" decimal="0" jt="91" />
			<column name="modified_by" type="integer" length="10" decimal="0" jt="4" />
			<column name="modified_date" type="date" length="13" decimal="0" jt="91" />
			<index name="pk_variant" unique="PRIMARY_KEY" >
				<column name="variant_id" />
			</index>
		</table>
		<table name="vendor_protocol" >
			<comment><![CDATA[Vendors reside in the Organization table. A vendor can provide multiple protocols, and a particular protocol can be offered by multiple vendors, hence the N:M relationship table.]]></comment>
			<column name="vendor_protocol_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[This is optional.]]></comment>
			</column>
			<column name="vendor_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="protocol_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="status" type="integer" length="10" decimal="0" jt="4" >
				<defo><![CDATA[1]]></defo>
			</column>
			<index name="pk_vendor_protocol" unique="PRIMARY_KEY" >
				<column name="vendor_protocol_id" />
			</index>
			<index name="idx_vendor_protocol_protocol_id" unique="NORMAL" >
				<column name="protocol_id" />
			</index>
			<index name="idx_vendor_protocol_vendor_id" unique="NORMAL" >
				<column name="vendor_id" />
			</index>
			<fk name="vendor_protocol_vendor_id_fkey" to_schema="gobii_rice1.public" to_table="organization" >
				<fk_column name="vendor_id" pk="organization_id" />
			</fk>
			<fk name="vendor_protocol_protocol_id_fkey" to_schema="gobii_rice1.public" to_table="protocol" >
				<fk_column name="protocol_id" pk="protocol_id" />
			</fk>
		</table>
		<table name="vertex" >
			<column name="vertex_id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="type_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="table_name" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="data_loc" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="criterion" type="text" decimal="0" jt="12" />
			<column name="alias" type="text" decimal="0" jt="12" mandatory="y" />
			<column name="relevance" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="is_entry" type="boolean" length="1" decimal="0" jt="-7" mandatory="y" />
			<index name="vertex_pkey" unique="PRIMARY_KEY" >
				<column name="vertex_id" />
			</index>
			<index name="entry_vertex_idx" unique="NORMAL" >
				<column name="is_entry" />
			</index>
			<index name="typeof_vertex_idx" unique="NORMAL" >
				<column name="type_id" />
			</index>
			<index name="vertex_name_idx" unique="NORMAL" >
				<column name="name" />
			</index>
			<fk name="vertex_type_id_fkey" to_schema="gobii_rice1.public" to_table="cv" update_action="cascade" >
				<fk_column name="type_id" pk="cv_id" />
			</fk>
		</table>
		<view name="v_dataset_summary" >
			<view_script><![CDATA[ SELECT d.dataset_id,
    d.name AS dataset_name,
    d.experiment_id,
    e.name AS experiment_name,
    d.callinganalysis_id,
    a.name AS callingnalysis_name,
    d.analyses,
    d.data_table,
    d.data_file,
    d.quality_table,
    d.quality_file,
    d.scores,
    c1.username AS created_by_username,
    d.created_date,
    c2.username AS modified_by_username,
    d.modified_date,
    cv1.term AS status_name,
    cv2.term AS type_name,
    j.name AS job_name,
    p.project_id,
    p.name AS project_name,
    pi.contact_id AS pi_id,
    pi.firstname AS pi_firstname,
    pi.lastname AS pi_lastname
   FROM (((((((((dataset d
     LEFT JOIN experiment e ON ((d.experiment_id = e.experiment_id)))
     LEFT JOIN project p ON ((p.project_id = e.project_id)))
     LEFT JOIN contact pi ON ((pi.contact_id = p.pi_contact)))
     LEFT JOIN analysis a ON ((a.analysis_id = d.callinganalysis_id)))
     LEFT JOIN contact c1 ON ((c1.contact_id = d.created_by)))
     LEFT JOIN contact c2 ON ((c2.contact_id = d.modified_by)))
     LEFT JOIN cv cv1 ON ((cv1.cv_id = d.status)))
     LEFT JOIN cv cv2 ON ((cv2.cv_id = d.type_id)))
     LEFT JOIN job j ON ((j.job_id = d.job_id)));]]></view_script>
			<column name="dataset_id" type="integer" />
			<column name="dataset_name" type="text" />
			<column name="experiment_id" type="integer" />
			<column name="experiment_name" type="text" />
			<column name="callinganalysis_id" type="integer" />
			<column name="callingnalysis_name" type="text" />
			<column name="analyses" type="integer[]" />
			<column name="data_table" type="text" />
			<column name="data_file" type="text" />
			<column name="quality_table" type="text" />
			<column name="quality_file" type="text" />
			<column name="scores" type="jsonb" />
			<column name="created_by_username" type="text" />
			<column name="created_date" type="date" />
			<column name="modified_by_username" type="text" />
			<column name="modified_date" type="date" />
			<column name="status_name" type="text" />
			<column name="type_name" type="text" />
			<column name="job_name" type="text" />
			<column name="project_id" type="integer" />
			<column name="project_name" type="text" />
			<column name="pi_id" type="integer" />
			<column name="pi_firstname" type="text" />
			<column name="pi_lastname" type="text" />
		</view>
		<view name="v_jobs_summary" >
			<view_script><![CDATA[ SELECT ds.dataset_id,
    ds.name AS dataset_name,
    e.experiment_id,
    e.name AS experiment_name,
    p.project_id,
    p.name AS project_name,
    pr.protocol_id,
    pr.name AS protocol_name,
    pl.platform_id,
    pl.name AS platform_name,
    ds.callinganalysis_id AS calling_analysis_id,
    a.name AS calling_analysis_name,
    c.contact_id AS pi_contact_id,
    c.email AS pi_email,
    ds.data_table,
    ds.data_file,
    ds.quality_table,
    ds.quality_file,
    ds.status,
    ds.created_by,
    ds.created_date,
    ds.modified_by,
    ds.modified_date,
    ds.analyses,
    ds.type_id AS dataset_type_id,
    getcvterm(ds.type_id) AS dataset_type_name,
    ds.job_id,
    j.status AS job_status_id,
    COALESCE(getcvterm(j.status), 'Unsubmitted'::text) AS job_status_name,
    j.type_id AS job_type_id,
    COALESCE(getcvterm(j.type_id), 'n/a'::text) AS job_type_name,
    j.submitted_date AS job_submitted_date,
    ( SELECT gettotaldnarunsindataset.gettotaldnarunsindataset
           FROM gettotaldnarunsindataset((ds.dataset_id)::text) gettotaldnarunsindataset(gettotaldnarunsindataset)) AS total_samples,
    ( SELECT gettotalmarkersindataset.gettotalmarkersindataset
           FROM gettotalmarkersindataset((ds.dataset_id)::text) gettotalmarkersindataset(gettotalmarkersindataset)) AS total_markers
   FROM ((((((((dataset ds
     LEFT JOIN experiment e ON ((ds.experiment_id = e.experiment_id)))
     LEFT JOIN project p ON ((e.project_id = p.project_id)))
     LEFT JOIN contact c ON ((p.pi_contact = c.contact_id)))
     LEFT JOIN job j ON ((ds.job_id = j.job_id)))
     LEFT JOIN vendor_protocol vp ON ((e.vendor_protocol_id = vp.vendor_protocol_id)))
     LEFT JOIN protocol pr ON ((vp.protocol_id = pr.protocol_id)))
     LEFT JOIN platform pl ON ((pr.platform_id = pl.platform_id)))
     LEFT JOIN analysis a ON ((ds.callinganalysis_id = a.analysis_id)))
  ORDER BY j.submitted_date DESC, (lower(ds.name));]]></view_script>
			<column name="dataset_id" type="integer" />
			<column name="dataset_name" type="text" />
			<column name="experiment_id" type="integer" />
			<column name="experiment_name" type="text" />
			<column name="project_id" type="integer" />
			<column name="project_name" type="text" />
			<column name="protocol_id" type="integer" />
			<column name="protocol_name" type="text" />
			<column name="platform_id" type="integer" />
			<column name="platform_name" type="text" />
			<column name="calling_analysis_id" type="integer" />
			<column name="calling_analysis_name" type="text" />
			<column name="pi_contact_id" type="integer" />
			<column name="pi_email" type="text" />
			<column name="data_table" type="text" />
			<column name="data_file" type="text" />
			<column name="quality_table" type="text" />
			<column name="quality_file" type="text" />
			<column name="status" type="integer" />
			<column name="created_by" type="integer" />
			<column name="created_date" type="date" />
			<column name="modified_by" type="integer" />
			<column name="modified_date" type="date" />
			<column name="analyses" type="integer[]" />
			<column name="dataset_type_id" type="integer" />
			<column name="dataset_type_name" type="text" />
			<column name="job_id" type="integer" />
			<column name="job_status_id" type="integer" />
			<column name="job_status_name" type="text" />
			<column name="job_type_id" type="integer" />
			<column name="job_type_name" type="text" />
			<column name="job_submitted_date" type="timestamptz" />
			<column name="total_samples" type="integer" />
			<column name="total_markers" type="integer" />
		</view>
		<view name="v_marker_group_summary" >
			<view_script><![CDATA[ SELECT mg.marker_group_id,
    mg.name AS marker_group_name,
    mg.germplasm_group,
    m.name AS marker_name,
    p.name AS platform,
    array_to_string(ARRAY( SELECT jsonb_array_elements_text(mg.value) AS jsonb_array_elements_text), ','::text, '?'::text) AS favorable_alleles
   FROM marker m,
    platform p,
    ( SELECT marker_group.marker_group_id,
            marker_group.name,
            marker_group.germplasm_group,
            (jsonb_each(marker_group.markers)).key AS key,
            (jsonb_each(marker_group.markers)).value AS value
           FROM marker_group) mg
  WHERE ((m.marker_id = (mg.key)::integer) AND (p.platform_id = m.platform_id));]]></view_script>
			<column name="marker_group_id" type="integer" />
			<column name="marker_group_name" type="text" />
			<column name="germplasm_group" type="text" />
			<column name="marker_name" type="text" />
			<column name="platform" type="text" />
			<column name="favorable_alleles" type="text" />
		</view>
		<view name="v_marker_linkage_genetic" >
			<view_script><![CDATA[ SELECT mlg.marker_id,
    lg.name AS linkage_group_name,
    (mlg.start)::integer AS start,
    (mlg.stop)::integer AS stop,
    ms.name AS mapset_name
   FROM marker_linkage_group mlg,
    linkage_group lg,
    mapset ms
  WHERE ((mlg.linkage_group_id = lg.linkage_group_id) AND (lg.map_id = ms.mapset_id));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="linkage_group_name" type="varchar" />
			<column name="start" type="integer" />
			<column name="stop" type="integer" />
			<column name="mapset_name" type="text" />
		</view>
		<view name="v_marker_linkage_physical" >
			<view_script><![CDATA[ SELECT mlg.marker_id,
    lg.linkage_group_id,
    lg.name AS linkage_group_name,
    lg.start AS linkage_group_start,
    lg.stop AS linkage_group_stop,
    mlg.start,
    mlg.stop,
    ms.name AS mapset_name,
    lg.map_id
   FROM marker_linkage_group mlg,
    linkage_group lg,
    mapset ms
  WHERE ((mlg.linkage_group_id = lg.linkage_group_id) AND (lg.map_id = ms.mapset_id));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="linkage_group_id" type="integer" />
			<column name="linkage_group_name" type="varchar" />
			<column name="linkage_group_start" type="integer" />
			<column name="linkage_group_stop" type="integer" />
			<column name="start" type="numeric" />
			<column name="stop" type="numeric" />
			<column name="mapset_name" type="text" />
			<column name="map_id" type="integer" />
		</view>
		<view name="v_marker_summary" >
			<view_script><![CDATA[ SELECT m.marker_id,
    m.platform_id,
    p.name AS platform_name,
    m.variant_id,
    m.name AS marker_name,
    m.code,
    m.ref,
    m.alts,
    m.sequence,
    m.reference_id,
    r.name AS reference_name,
    m.primers,
    m.strand_id,
    cv.term AS strand_name,
    m.status,
    m.probsets,
    m.dataset_marker_idx,
    m.props,
    m.dataset_vendor_protocol
   FROM (((marker m
     LEFT JOIN platform p ON ((m.platform_id = p.platform_id)))
     LEFT JOIN reference r ON ((m.reference_id = r.reference_id)))
     LEFT JOIN cv ON ((m.strand_id = cv.cv_id)));]]></view_script>
			<column name="marker_id" type="integer" />
			<column name="platform_id" type="integer" />
			<column name="platform_name" type="text" />
			<column name="variant_id" type="integer" />
			<column name="marker_name" type="text" />
			<column name="code" type="text" />
			<column name="ref" type="text" />
			<column name="alts" type="text[]" />
			<column name="sequence" type="text" />
			<column name="reference_id" type="integer" />
			<column name="reference_name" type="text" />
			<column name="primers" type="jsonb" />
			<column name="strand_id" type="integer" />
			<column name="strand_name" type="text" />
			<column name="status" type="integer" />
			<column name="probsets" type="jsonb" />
			<column name="dataset_marker_idx" type="jsonb" />
			<column name="props" type="jsonb" />
			<column name="dataset_vendor_protocol" type="jsonb" />
		</view>
		<sequence name="analysis_analysis_id_seq" />
		<sequence name="contact_contact_id_seq" />
		<sequence name="cv_cv_id_seq" />
		<sequence name="cvgroup_cvgroup_id_seq" />
		<sequence name="dataset_dataset_id_seq" />
		<sequence name="dbxref_dbxref_id_seq" />
		<sequence name="display_display_id_seq" />
		<sequence name="dnarun_dnarun_id_seq" />
		<sequence name="dnasample_dnasample_id_seq" />
		<sequence name="edge_edge_id_seq" />
		<sequence name="experiment_experiment_id_seq" />
		<sequence name="germplasm_germplasm_id_seq" />
		<sequence name="gobiiprop_gobiiprop_id_seq" />
		<sequence name="job_job_id_seq" />
		<sequence name="linkage_group_linkage_group_id_seq" />
		<sequence name="manifest_manifest_id_seq" />
		<sequence name="map_map_id_seq" />
		<sequence name="marker_group_marker_group_id_seq" />
		<sequence name="marker_map_marker_map_id_seq" />
		<sequence name="marker_marker_id_seq" />
		<sequence name="organization_organization_id_seq" />
		<sequence name="platform_platform_id_seq" />
		<sequence name="project_project_id_seq" />
		<sequence name="protocol_protocol_id_seq" />
		<sequence name="reference_reference_id_seq" />
		<sequence name="role_role_id_seq" />
		<sequence name="timescoper_timescoper_id_seq" />
		<sequence name="variant_variant_id_seq" />
		<sequence name="vendor_protocol_vendor_protocol_id_seq" />
		<sequence name="vertex_vertex_id_seq" />
		<procedure name="appendanalysistodataset" id="Procedure_34890d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendanalysistodataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_append(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="analysisid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="appendreadtabletorole" id="Procedure_3fca7bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendreadtabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_append(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
			<input_param name="roleid" jt="4" type="int4" />
			<input_param name="tableid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="appendroletocontact" id="Procedure_3d8db71" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendroletocontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_append(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
			<input_param name="contactid" jt="4" type="int4" />
			<input_param name="roleid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="appendwritetabletorole" id="Procedure_181d8e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendwritetabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_append(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
			<input_param name="roleid" jt="4" type="int4" />
			<input_param name="tableid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="armor" id="Procedure_2edcba3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.armor(bytea, text[], text[])
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_armor$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="2003" type="_text" />
			<input_param name="$3" jt="2003" type="_text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="armor" id="Procedure_5c2f4b5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.armor(bytea)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_armor$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="citext" id="Procedure_197b17c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext(character)
 RETURNS citext
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim1$function$
]]></string>
			<input_param name="$1" jt="1" type="bpchar" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citext" id="Procedure_4741954" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext(boolean)
 RETURNS citext
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$booltext$function$
]]></string>
			<input_param name="$1" jt="-7" type="bool" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citext" id="Procedure_fabaa6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext(inet)
 RETURNS citext
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_show$function$
]]></string>
			<input_param name="$1" jt="1111" type="inet" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citext_cmp" id="Procedure_1985fef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_cmp(citext, citext)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_cmp$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="citext_eq" id="Procedure_10ee55d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_eq(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_eq$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_ge" id="Procedure_3453ae7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_ge(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_ge$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_gt" id="Procedure_228645c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_gt(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_gt$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_hash" id="Procedure_549d0df" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_hash(citext)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_hash$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="citext_larger" id="Procedure_3f3756" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_larger(citext, citext)
 RETURNS citext
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_larger$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citext_le" id="Procedure_f36cd2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_le(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_le$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_lt" id="Procedure_5e6694b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_lt(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_lt$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_ne" id="Procedure_1b3aa92" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_ne(citext, citext)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_ne$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="citext_smaller" id="Procedure_30e409c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citext_smaller(citext, citext)
 RETURNS citext
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/citext', $function$citext_smaller$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citextin" id="Procedure_1f37515" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citextin(cstring)
 RETURNS citext
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textin$function$
]]></string>
			<input_param name="$1" jt="1111" type="cstring" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citextout" id="Procedure_210fd72" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citextout(citext)
 RETURNS cstring
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textout$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<result_param name="returnValue" jt="1111" type="cstring" />
		</procedure>
		<procedure name="citextrecv" id="Procedure_3f74dec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citextrecv(internal)
 RETURNS citext
 LANGUAGE internal
 STABLE STRICT
AS $function$textrecv$function$
]]></string>
			<input_param name="$1" jt="1111" type="internal" />
			<result_param name="returnValue" jt="1111" type="citext" />
		</procedure>
		<procedure name="citextsend" id="Procedure_505afcf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.citextsend(citext)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$textsend$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="createanalysis" id="Procedure_3565906" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN   
        insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
        values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, analysisparameters, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
            select lastval() into id;
    END;
$function$
]]></string>
			<input_param name="analysisname" jt="12" type="text" />
			<input_param name="analysisdescription" jt="12" type="text" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="analysisprogram" jt="12" type="text" />
			<input_param name="analysisprogramversion" jt="12" type="text" />
			<input_param name="aanalysisalgorithm" jt="12" type="text" />
			<input_param name="analysissourcename" jt="12" type="text" />
			<input_param name="analysissourceversion" jt="12" type="text" />
			<input_param name="analysissourceuri" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="analysisparameters" jt="1111" type="jsonb" />
			<input_param name="analysistimeexecuted" jt="93" type="timestamp" />
			<input_param name="analysisstatus" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createanalysis" id="Procedure_2e29f5d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN	
		insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
		values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, '{}'::jsonb, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
    		select lastval() into id;
	END;
$function$
]]></string>
			<input_param name="analysisname" jt="12" type="text" />
			<input_param name="analysisdescription" jt="12" type="text" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="analysisprogram" jt="12" type="text" />
			<input_param name="analysisprogramversion" jt="12" type="text" />
			<input_param name="aanalysisalgorithm" jt="12" type="text" />
			<input_param name="analysissourcename" jt="12" type="text" />
			<input_param name="analysissourceversion" jt="12" type="text" />
			<input_param name="analysissourceuri" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="analysistimeexecuted" jt="93" type="timestamp" />
			<input_param name="analysisstatus" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createcontact" id="Procedure_23f2d39" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcontact(lastname text, firstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer, uname text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into contact (lastname, firstname, code, email, roles, created_by, created_date, modified_by, modified_date, organization_id, username)
      values (lastName, firstName, contactCode, contactEmail, contactRoles, createdBy, createdDate, modifiedBy, modifiedDate, organizationId, uname)
      on conflict (username) DO NOTHING;
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="lastname" jt="12" type="text" />
			<input_param name="firstname" jt="12" type="text" />
			<input_param name="contactcode" jt="12" type="text" />
			<input_param name="contactemail" jt="12" type="text" />
			<input_param name="contactroles" jt="2003" type="_int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="organizationid" jt="4" type="int4" />
			<input_param name="uname" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<input_param name="lastname" jt="12" type="text" />
			<input_param name="firstname" jt="12" type="text" />
			<input_param name="contactcode" jt="12" type="text" />
			<input_param name="contactemail" jt="12" type="text" />
			<input_param name="contactroles" jt="2003" type="_int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="organizationid" jt="4" type="int4" />
			<input_param name="uname" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createcv" id="Procedure_319f3ef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcv(pcvgroupid integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into cv (cvgroup_id, term, definition, rank, abbreviation, dbxref_id, status)
       values (pcvgroupid, pcvterm, pcvdefinition, pcvrank, pabbreviation, pdbxrefid, pstatus);
     select lastval() into id;
   END;
 $function$
]]></string>
			<input_param name="pcvgroupid" jt="4" type="int4" />
			<input_param name="pcvterm" jt="12" type="text" />
			<input_param name="pcvdefinition" jt="12" type="text" />
			<input_param name="pcvrank" jt="4" type="int4" />
			<input_param name="pabbreviation" jt="12" type="text" />
			<input_param name="pdbxrefid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createcvgroup" id="Procedure_58d9ce1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcvgroup(pname text, pdefinition text, ptype integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into cvgroup (name, definition, type)
       values (pname, pdefinition, ptype);
     select lastval() into id;
   END;
 $function$
]]></string>
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pdefinition" jt="12" type="text" />
			<input_param name="ptype" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createcvingroup" id="Procedure_589b54" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcvingroup(pgroupname text, pgrouptype integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   DECLARE
    groupId integer;
   BEGIN
     select cvgroup_id into groupId from cvgroup where name=pgroupname and type=pgrouptype;
     insert into cv (cvgroup_id, term, definition, rank, abbreviation, dbxref_id, status)
       values (groupId, pcvterm, pcvdefinition, pcvrank, pabbreviation, pdbxrefid, pstatus)
       on conflict (term, cvgroup_id) DO NOTHING;
     select lastval() into id;
   END;
 $function$
]]></string>
			<input_param name="pgroupname" jt="12" type="text" />
			<input_param name="pgrouptype" jt="4" type="int4" />
			<input_param name="pcvterm" jt="12" type="text" />
			<input_param name="pcvdefinition" jt="12" type="text" />
			<input_param name="pcvrank" jt="4" type="int4" />
			<input_param name="pabbreviation" jt="12" type="text" />
			<input_param name="pdbxrefid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<input_param name="pgroupname" jt="12" type="text" />
			<input_param name="pgrouptype" jt="4" type="int4" />
			<input_param name="pcvterm" jt="12" type="text" />
			<input_param name="pcvdefinition" jt="12" type="text" />
			<input_param name="pcvrank" jt="4" type="int4" />
			<input_param name="pabbreviation" jt="12" type="text" />
			<input_param name="pdbxrefid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createdataset" id="Procedure_288466" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdataset(datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer, jobid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset (experiment_id, callinganalysis_id, analyses, data_table, data_file, quality_table, quality_file, scores, created_by, created_date, modified_by, modified_date, status, type_id, name, job_id)
      values (experimentId, callinganalysisId, datasetAnalyses, dataTable, dataFile, qualityTable, qualityFile, '{}'::jsonb, createdBy, createdDate, modifiedBy, modifiedDate, datasetStatus, typeId, datasetName, jobid);
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="datasetname" jt="12" type="text" />
			<input_param name="experimentid" jt="4" type="int4" />
			<input_param name="callinganalysisid" jt="4" type="int4" />
			<input_param name="datasetanalyses" jt="2003" type="_int4" />
			<input_param name="datatable" jt="12" type="text" />
			<input_param name="datafile" jt="12" type="text" />
			<input_param name="qualitytable" jt="12" type="text" />
			<input_param name="qualityfile" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="datasetstatus" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="jobid" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createdbxref" id="Procedure_1012e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdbxref(paccession text, pver text, pdescription text, pdbname text, purl text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into dbxref (accession, ver, description, db_name, url)
       values (paccession, pver, pdescription, pdbname, purl);
     select lastval() into id;
   END;
 $function$
]]></string>
			<input_param name="paccession" jt="12" type="text" />
			<input_param name="pver" jt="12" type="text" />
			<input_param name="pdescription" jt="12" type="text" />
			<input_param name="pdbname" jt="12" type="text" />
			<input_param name="purl" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createdisplay" id="Procedure_33b8ebc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdisplay(tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into display (table_name, column_name, display_name, created_by, created_date, modified_by, modified_date, rank)
      values (tableName, columnName, displayName, createdBy, createdDate, modifiedBy, modifiedDate, displayRank); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="tablename" jt="12" type="text" />
			<input_param name="columnname" jt="12" type="text" />
			<input_param name="displayname" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="displayrank" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="creatednarun" id="Procedure_5e20742" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednarun(experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dnarun (experiment_id, dnasample_id, name, code)
      values (experimentId, dnasampleId, dnarunName, dnarunCode);
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="experimentid" jt="4" type="int4" />
			<input_param name="dnasampleid" jt="4" type="int4" />
			<input_param name="dnarunname" jt="12" type="text" />
			<input_param name="dnaruncode" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="creatednasample" id="Procedure_4369726" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednasample(dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
BEGIN
	insert into dnasample(name, code, platename, num, well_row, well_col, project_id, germplasm_id, created_by, created_date, modified_by, modified_date, status)
	values(dnasamplename, dnasamplecode, dnasampleplatename, dnasamplenum, wellrow, wellcol, projectid, germplasmid, createdby, createddate, modifiedby, modifieddate,dnasamplestatus);
	select lastval() into id;
END;
$function$
]]></string>
			<input_param name="dnasamplename" jt="12" type="text" />
			<input_param name="dnasamplecode" jt="12" type="text" />
			<input_param name="dnasampleplatename" jt="12" type="text" />
			<input_param name="dnasamplenum" jt="12" type="text" />
			<input_param name="wellrow" jt="12" type="text" />
			<input_param name="wellcol" jt="12" type="text" />
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="germplasmid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="dnasamplestatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createedge" id="Procedure_409cdec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createedge(_start_vertex integer, _end_vertex integer, _type_id integer, _criterion text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into edge (start_vertex, end_vertex, type_id, criterion)
      values (_start_vertex, _end_vertex, _type_id, _criterion)
      on conflict (start_vertex, end_vertex) DO NOTHING;
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="_start_vertex" jt="4" type="int4" />
			<input_param name="_end_vertex" jt="4" type="int4" />
			<input_param name="_type_id" jt="4" type="int4" />
			<input_param name="_criterion" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createexperiment" id="Procedure_30ff137" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createexperiment(pname text, pcode text, pprojectid integer, pvendorprotocolid integer, pmanifestid integer, pdatafile text, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer, OUT expid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     BEGIN
     insert into experiment (name, code, project_id, manifest_id, data_file, created_by, created_date, modified_by, modified_date, status, vendor_protocol_id)
       values (pname, pcode, pprojectid, pmanifestid, pdatafile, pcreatedby, pcreateddate, pmodifiedby, pmodifieddate, pstatus, pvendorprotocolid);
     select lastval() into expId;
     END;
 $function$
]]></string>
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pcode" jt="12" type="text" />
			<input_param name="pprojectid" jt="4" type="int4" />
			<input_param name="pvendorprotocolid" jt="4" type="int4" />
			<input_param name="pmanifestid" jt="4" type="int4" />
			<input_param name="pdatafile" jt="12" type="text" />
			<input_param name="pcreatedby" jt="4" type="int4" />
			<input_param name="pcreateddate" jt="91" type="date" />
			<input_param name="pmodifiedby" jt="4" type="int4" />
			<input_param name="pmodifieddate" jt="91" type="date" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="expid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="creategermplasm" id="Procedure_14bf12f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creategermplasm(germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into germplasm (name, external_code, species_id, type_id, created_by, created_date, modified_by, modified_date, status, code)
      values (germplasmName, externalCode, speciesId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, germplasmStatus, germplasmCode);
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="germplasmname" jt="12" type="text" />
			<input_param name="externalcode" jt="12" type="text" />
			<input_param name="speciesid" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="germplasmstatus" jt="4" type="int4" />
			<input_param name="germplasmcode" jt="12" type="text" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createjob" id="Procedure_fdb589" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createjob(_name text, _type text, _payload_type text, _status text, _message text, _submitted_by integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	DECLARE
        _type_id integer;
        _payload_type_id integer;
        _status_id integer;
    BEGIN
    	select cvid into _type_id from getCvId(_type, 'job_type', 1);
    	select cvid into _payload_type_id from getCvId(_payload_type, 'payload_type', 1);
    	select cvid into _status_id from getCvId(_status, 'job_status', 1);
        insert into job (type_id, payload_type_id, status, message, submitted_by, name)
          values (_type_id, _payload_type_id, _status_id, _message, _submitted_by, _name);
        select lastval() into id;
    END;
$function$
]]></string>
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_type" jt="12" type="text" />
			<input_param name="_payload_type" jt="12" type="text" />
			<input_param name="_status" jt="12" type="text" />
			<input_param name="_message" jt="12" type="text" />
			<input_param name="_submitted_by" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createjob" id="Procedure_5633e42" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createjob(_name text, _type_id integer, _payload_type_id integer, _status integer, _message text, _submitted_by integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
        insert into job (type_id, payload_type_id, status, message, submitted_by, name)
          values (_type_id, _payload_type_id, _status, _message, _submitted_by, _name);
        select lastval() into id;
    END;
$function$
]]></string>
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_type_id" jt="4" type="int4" />
			<input_param name="_payload_type_id" jt="4" type="int4" />
			<input_param name="_status" jt="4" type="int4" />
			<input_param name="_message" jt="12" type="text" />
			<input_param name="_submitted_by" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createlinkagegroup" id="Procedure_5b530e8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createlinkagegroup(linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN
		insert into linkage_group(name, start, stop, map_id, created_by, created_date,modified_by, modified_date) values(linkageGroupName, linkageGroupStart, linkageGroupStop, mapId, createdBy, createdDate, modifiedBy, modifiedDate);
		select lastval() into id;
	END;
$function$
]]></string>
			<input_param name="linkagegroupname" jt="12" type="text" />
			<input_param name="linkagegroupstart" jt="4" type="int4" />
			<input_param name="linkagegroupstop" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createmanifest" id="Procedure_80f607" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmanifest(manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT mid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into manifest (name, code, file_path, created_by, created_date, modified_by, modified_date)
      values (manifestName, manifestCode, filePath, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into mId;
  END;
$function$
]]></string>
			<input_param name="manifestname" jt="12" type="text" />
			<input_param name="manifestcode" jt="12" type="text" />
			<input_param name="filepath" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="mid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createmapset" id="Procedure_4f78445" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmapset(mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into mapset (name, code, description, reference_id, type_id,
created_by, created_date, modified_by, modified_date, status)
      values (mapsetName, mapsetCode, mapsetDescription, referenceId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, mapsetStatus);
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="mapsetname" jt="12" type="text" />
			<input_param name="mapsetcode" jt="12" type="text" />
			<input_param name="mapsetdescription" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="mapsetstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createmarker" id="Procedure_4947bd1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, '{}'::jsonb, '{}'::jsonb, strandId, markerStatus);
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="platformid" jt="4" type="int4" />
			<input_param name="variantid" jt="4" type="int4" />
			<input_param name="markername" jt="12" type="text" />
			<input_param name="markercode" jt="12" type="text" />
			<input_param name="markerref" jt="12" type="text" />
			<input_param name="markeralts" jt="2003" type="_text" />
			<input_param name="markersequence" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="strandid" jt="4" type="int4" />
			<input_param name="markerstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createmarkergroup" id="Procedure_1336078" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkergroup(markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_group (name, code, markers, germplasm_group, created_by, created_date, modified_by, modified_date, status)
      values (markerGroupName, markerGroupCode, '{}'::jsonb, germplasmGroup, createdBy, createdDate, modifiedBy, modifiedDate, markerGroupStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="markergroupname" jt="12" type="text" />
			<input_param name="markergroupcode" jt="12" type="text" />
			<input_param name="germplasmgroup" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="markergroupstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createmarkerlinkagegroup" id="Procedure_5e4d5be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="markerid" jt="4" type="int4" />
			<input_param name="markerlinkagegroupstart" jt="2" type="numeric" />
			<input_param name="markerlinkagegroupstop" jt="2" type="numeric" />
			<input_param name="linkagegroupid" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createorganization" id="Procedure_44285ca" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createorganization(orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into organization (name, address, website, created_by, created_date, modified_by, modified_date, status)
      values (orgName, orgAddress, orgWebsite, createdBy, createdDate, modifiedBy, modifiedDate, orgStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="orgname" jt="12" type="text" />
			<input_param name="orgaddress" jt="12" type="text" />
			<input_param name="orgwebsite" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="orgstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createplatform" id="Procedure_2caa957" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createplatform(platformname text, platformcode text, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into platform (name, code, description, created_by, created_date, modified_by, modified_date, status, type_id)
       values (platformName, platformCode, platformDescription, createdBy, createdDate, modifiedBy, modifiedDate, platformStatus, typeId);
     select lastval() into id;
   END;
 $function$
]]></string>
			<input_param name="platformname" jt="12" type="text" />
			<input_param name="platformcode" jt="12" type="text" />
			<input_param name="platformdescription" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="platformstatus" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createproject" id="Procedure_4cd6c6a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createproject(projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer, OUT projectid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
	    insert into project (name, code, description, pi_contact, created_by, created_date, modified_by, modified_date, status)
	      values (projectName, projectCode, projectDescription, piContact, createdBy, createdDate, modifiedBy, modifiedDate, projectStatus);
	    select lastval() into projectId;
    END;
$function$
]]></string>
			<input_param name="projectname" jt="12" type="text" />
			<input_param name="projectcode" jt="12" type="text" />
			<input_param name="projectdescription" jt="12" type="text" />
			<input_param name="picontact" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="projectstatus" jt="4" type="int4" />
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createprotocol" id="Procedure_192628e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createprotocol(pname text, pdescription text, ptypeid integer, pplatformid integer, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into protocol (name, description, type_id, platform_id, created_by, created_date, modified_by, modified_date, status)
      values (pname, pdescription, ptypeid, pplatformid, pcreatedby, pcreateddate, pmodifiedby, pmodifieddate, pstatus); 
    select lastval() into id;
    END;
$function$
]]></string>
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pdescription" jt="12" type="text" />
			<input_param name="ptypeid" jt="4" type="int4" />
			<input_param name="pplatformid" jt="4" type="int4" />
			<input_param name="pcreatedby" jt="4" type="int4" />
			<input_param name="pcreateddate" jt="91" type="date" />
			<input_param name="pmodifiedby" jt="4" type="int4" />
			<input_param name="pmodifieddate" jt="91" type="date" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createreference" id="Procedure_1dc803a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createreference(referencename text, referenceversion text, referencelink text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN
		insert into reference(name,version,link, file_path, created_by, created_date,modified_by, modified_date) values(referencename, referenceversion, referencelink, filepath, createdBy, createdDate, modifiedBy, modifiedDate);
		select lastval() into id;
	END;
$function$
]]></string>
			<input_param name="referencename" jt="12" type="text" />
			<input_param name="referenceversion" jt="12" type="text" />
			<input_param name="referencelink" jt="12" type="text" />
			<input_param name="filepath" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createrole" id="Procedure_47b9f51" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createrole(rolename text, rolecode text, readtables integer[], writetables integer[], OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into role (role_name, role_code, read_tables, write_tables)
      values (roleName, roleCode, readTables, writeTables); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="rolename" jt="12" type="text" />
			<input_param name="rolecode" jt="12" type="text" />
			<input_param name="readtables" jt="2003" type="_int4" />
			<input_param name="writetables" jt="2003" type="_int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createtimescoper" id="Procedure_404bffb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createtimescoper(_firstname text, _lastname text, _username text, _password text, _email text, _role integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    INSERT INTO timescoper(firstname, lastname, username, password, email, role)
  	VALUES (_firstname, _lastname, _username, crypt(_password, gen_salt('bf', 11)), _email, _role)
  	ON conflict (username) DO NOTHING;
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="_firstname" jt="12" type="text" />
			<input_param name="_lastname" jt="12" type="text" />
			<input_param name="_username" jt="12" type="text" />
			<input_param name="_password" jt="12" type="text" />
			<input_param name="_email" jt="12" type="text" />
			<input_param name="_role" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createvariant" id="Procedure_40b5f1b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvariant(variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into variant (code, created_by, created_date, modified_by, modified_date)
      values (variantCode, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="variantcode" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createvendorprotocol" id="Procedure_2491b8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvendorprotocol(pname text, pvendorid integer, pprotocolid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into vendor_protocol (name, vendor_id, protocol_id, status)
      values (pname, pvendorid, pprotocolid, pstatus); 
    select lastval() into id;
    END;
$function$
]]></string>
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pvendorid" jt="4" type="int4" />
			<input_param name="pprotocolid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="createvertex" id="Procedure_2c72d29" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvertex(_name text, _type_id integer, _table_name text, _data_loc text, _criterion text, _alias text, _relevance integer, _is_entry boolean, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into vertex (name, type_id, table_name, data_loc, criterion, alias, relevance, is_entry)
      values (_name, _type_id, _table_name, _data_loc, _criterion, _alias, _relevance, _is_entry)
      on conflict (name) DO NOTHING;
    select lastval() into id;
  END;
$function$
]]></string>
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_type_id" jt="4" type="int4" />
			<input_param name="_table_name" jt="12" type="text" />
			<input_param name="_data_loc" jt="12" type="text" />
			<input_param name="_criterion" jt="12" type="text" />
			<input_param name="_alias" jt="12" type="text" />
			<input_param name="_relevance" jt="4" type="int4" />
			<input_param name="_is_entry" jt="-7" type="bool" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="crypt" id="Procedure_17fd96d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.crypt(text, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_crypt$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="dearmor" id="Procedure_3241215" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dearmor(text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_dearmor$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="decrypt" id="Procedure_4872a7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.decrypt(bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_decrypt$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="decrypt_iv" id="Procedure_40a10f8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.decrypt_iv(bytea, bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_decrypt_iv$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="-2" type="bytea" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="deleteanalysis" id="Procedure_4b69b0a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysis(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from analysis where analysis_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteanalysisparameter" id="Procedure_3455322" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysisparameter(id integer, parametername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update analysis set parameters = parameters - parameterName
      where analysis_id=id;
    return parameterName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="parametername" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletecontact" id="Procedure_2ca6363" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecontact(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from contact where contact_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletecv" id="Procedure_20aa383" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecv(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from cv where cv_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletecvgroup" id="Procedure_250b0cd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecvgroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
      i integer;
     BEGIN
     delete from cvgroup where cvgroup_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletedataset" id="Procedure_32d373c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedataset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dataset where dataset_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletedatasetdnarunindices" id="Procedure_d8711a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedatasetdnarunindices(datasetid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
  BEGIN
    update dnarun
    set dataset_dnarun_idx = dataset_dnarun_idx - datasetId::text
    where dataset_dnarun_idx ? datasetId::text;
    GET DIAGNOSTICS i  = ROW_COUNT;
    return i;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletedatasetmarkerindices" id="Procedure_ab32c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedatasetmarkerindices(datasetid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
  BEGIN
    update marker
    set dataset_marker_idx = dataset_marker_idx - datasetId::text
    where dataset_marker_idx ? datasetId::text;
    GET DIAGNOSTICS i  = ROW_COUNT;
    return i;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletedbxref" id="Procedure_44985b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedbxref(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
      i integer;
     BEGIN
     delete from dbxref where dbxref_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletedisplay" id="Procedure_3b45c28" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedisplay(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from display where display_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletednarun" id="Procedure_59b3d98" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarun(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnarun where dnarun_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletednarunpropertybyid" id="Procedure_5df9a79" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun
    set props = props - propertyId::text
    where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletednarunpropertybyname" id="Procedure_34d2ea5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun
      set props = props - property.cv_id::text
      from property
      where dnarun_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletednasample" id="Procedure_1992be9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasample(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnasample where dnasample_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletednasamplepropertybyid" id="Procedure_2828b22" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample
    set props = props - propertyId::text
    where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletednasamplepropertybyname" id="Procedure_2d39fc6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample
      set props = props - property.cv_id::text
      from property
      where dnasample_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deleteexperiment" id="Procedure_5d08057" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteexperiment(eid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from experiment where experiment_id = eId;
    return eId;
    END;
$function$
]]></string>
			<input_param name="eid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletegermplasm" id="Procedure_28aefea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasm(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from germplasm where germplasm_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletegermplasmpropertybyid" id="Procedure_1102143" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm
    set props = props - propertyId::text
    where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletegermplasmpropertybyname" id="Procedure_595d45" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm
      set props = props - property.cv_id::text
      from property
      where germplasm_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletejob" id="Procedure_4e9c3f1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletejob(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from job where job_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletelinkagegroup" id="Procedure_4a31a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletelinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from linkage_group where linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemanifest" id="Procedure_ddb0d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemanifest(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from manifest where manifest_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemapset" id="Procedure_2f77535" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from mapset where mapset_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemapsetpropertybyid" id="Procedure_596018f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset
    set props = props - propertyId::text
    where mapset_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemapsetpropertybyname" id="Procedure_346f687" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update mapset
      set props = props - property.cv_id::text
      from property
      where mapset_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletemarker" id="Procedure_5f3af5d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarker(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker where marker_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemarkergroup" id="Procedure_734865" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkergroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_group where marker_group_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemarkergroupbyname" id="Procedure_1180a7f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkergroupbyname(_name text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	DECLARE
        i integer;
    BEGIN
    	delete from marker_group where name = _name;
    	GET DIAGNOSTICS i = ROW_COUNT;
      	return i;
    END;
$function$
]]></string>
			<input_param name="_name" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemarkerinmarkergroupbyid" id="Procedure_474a6c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group 
    set markers = markers - markerId::text
    where marker_group_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markerid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="deletemarkerinmarkergroupbyname" id="Procedure_315a6e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyname(id integer, markername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with markerInfo as (select marker_id from marker where name=markerName)
    update marker_group 
      set markers = markers - markerInfo.marker_id::text
      from markerInfo
      where marker_group_id=id;
    return markerName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markername" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletemarkerlinkagegroup" id="Procedure_b5c013" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerlinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_linkage_group where marker_linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemarkerpropertybyid" id="Procedure_48789c7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker
    set props = props - propertyId::text
    where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletemarkerpropertybyname" id="Procedure_16f0018" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker
      set props = props - property.cv_id::text
      from property
      where marker_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deleteorganization" id="Procedure_25c872f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteorganization(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from organization where organization_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteplatform" id="Procedure_9f1748" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatform(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
 	 DECLARE
 	 	i integer;
     BEGIN
     delete from platform where platform_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteplatformpropertybyid" id="Procedure_293ef8e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform
    set props = props - propertyId::text
    where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteplatformpropertybyname" id="Procedure_2a1cc79" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform
      set props = props - property.cv_id::text
      from property
      where platform_id=id;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deleteproject" id="Procedure_1edc85f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteproject(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from project where project_id = pId;
    return pId;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteprojectpropertybyid" id="Procedure_25f987b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project
    set props = props - propertyId::text
    where project_id=projectId;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteprojectpropertybyname" id="Procedure_1e16310" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyname(projectid integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project
      set props = props - property.cv_id::text
      from property
      where project_id=projectId;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deleteprotocol" id="Procedure_3bb1121" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocol(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    delete from protocol where protocol_id = pId;
    GET DIAGNOSTICS i = ROW_COUNT;
    return i;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteprotocolpropertybyid" id="Procedure_4ba2bd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocolpropertybyid(protocolid integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update protocol 
    set props = props - propertyId::text
    where protocol_id=protocolId;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="protocolid" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleteprotocolpropertybyname" id="Procedure_1217309" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocolpropertybyname(protocolid integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update protocol 
      set props = props - property.cv_id::text
      from property
      where protocol_id=protocolId;
    return propertyName;
  END;
$function$
]]></string>
			<input_param name="protocolid" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="deletereference" id="Procedure_197505f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletereference(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from reference where reference_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deleterole" id="Procedure_11580a0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleterole(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from role where role_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletevariant" id="Procedure_1ab1cac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletevariant(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from variant where variant_id = id;
    return id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="deletevendorprotocol" id="Procedure_4349e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletevendorprotocol(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    delete from vendor_protocol where vendor_protocol_id = pId;
    GET DIAGNOSTICS i = ROW_COUNT;
    return i;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="digest" id="Procedure_381c927" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.digest(bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_digest$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="digest" id="Procedure_22cb3c8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.digest(text, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_digest$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="encrypt" id="Procedure_1619971" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.encrypt(bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_encrypt$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="encrypt_iv" id="Procedure_58ab208" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.encrypt_iv(bytea, bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_encrypt_iv$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="-2" type="bytea" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="file_fdw_handler" id="Procedure_6b33db" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_handler()
 RETURNS fdw_handler
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_handler$function$
]]></string>
			<result_param name="returnValue" jt="1111" type="fdw_handler" />
		</procedure>
		<procedure name="file_fdw_validator" id="Procedure_1a83ede" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_validator(text[], oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_validator$function$
]]></string>
			<input_param name="$1" jt="2003" type="_text" />
			<input_param name="$2" jt="-5" type="oid" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="gen_random_bytes" id="Procedure_1abd6d4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gen_random_bytes(integer)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pg_random_bytes$function$
]]></string>
			<input_param name="$1" jt="4" type="int4" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="gen_random_uuid" id="Procedure_59cc92e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gen_random_uuid()
 RETURNS uuid
 LANGUAGE c
AS '$libdir/pgcrypto', $function$pg_random_uuid$function$
]]></string>
			<result_param name="returnValue" jt="1111" type="uuid" />
		</procedure>
		<procedure name="gen_salt" id="Procedure_3ae25e7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gen_salt(text, integer)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pg_gen_salt_rounds$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="gen_salt" id="Procedure_3e39123" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gen_salt(text)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pg_gen_salt$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getallanalysisparameters" id="Procedure_1feb923" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallanalysisparameters(id integer)
 RETURNS TABLE(property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select (jsonb_each_text(parameters)).* from analysis where analysis_id=id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallchrlenbydataset" id="Procedure_2403834" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallchrlenbydataset(datasetid integer)
 RETURNS TABLE(linkage_group_name character varying, linkage_group_length integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select distinct mlp.linkage_group_name, (mlp.linkage_group_stop - mlp.linkage_group_stop)::integer
    from marker m
    left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
    where m.dataset_marker_idx ? datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="linkage_group_name" jt="12" type="varchar" />
			<result_param name="linkage_group_length" jt="4" type="int4" />
		</procedure>
		<procedure name="getallchrlenbydatasetandmap" id="Procedure_17de8a8" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallchrlenbydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(linkage_group_name character varying, linkage_group_length integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
  return query
  select distinct mlp.linkage_group_name, (mlp.linkage_group_stop - mlp.linkage_group_stop)::integer
  from marker m
  left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
  where m.dataset_marker_idx ? datasetId::text
  and mlp.map_id=mapId;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="linkage_group_name" jt="12" type="varchar" />
			<result_param name="linkage_group_length" jt="4" type="int4" />
		</procedure>
		<procedure name="getallchrlenbymarkerlist" id="Procedure_2a17407" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallchrlenbymarkerlist(markerlist text)
 RETURNS TABLE(linkage_group_name character varying, linkage_group_length integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select distinct mlp.linkage_group_name, (mlp.linkage_group_stop - mlp.linkage_group_stop)::integer
    from unnest(markerList::integer[]) ml(m_id) 
    left join marker m on ml.m_id = m.marker_id
    left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id;
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="varchar" />
			<result_param name="linkage_group_length" jt="4" type="int4" />
		</procedure>
		<procedure name="getallcontactsbyrole" id="Procedure_29f5894" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallcontactsbyrole(roleid integer)
 RETURNS SETOF contact
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select c.* from contact c, role r where r.role_id = roleId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
			<input_param name="contact_id" jt="4" type="int4" />
			<input_param name="lastname" jt="12" type="text" />
			<input_param name="firstname" jt="12" type="text" />
			<input_param name="code" jt="12" type="text" />
			<input_param name="email" jt="12" type="text" />
			<input_param name="roles" jt="2003" type="_int4" />
			<input_param name="created_by" jt="4" type="int4" />
			<input_param name="created_date" jt="91" type="date" />
			<input_param name="modified_by" jt="4" type="int4" />
			<input_param name="modified_date" jt="91" type="date" />
			<input_param name="organization_id" jt="4" type="int4" />
			<input_param name="username" jt="12" type="text" />
			<input_param name="roleid" jt="4" type="int4" />
		</procedure>
		<procedure name="getallentryvertices" id="Procedure_1b3139a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallentryvertices()
 RETURNS SETOF vertex
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select v.* from vertex v where v.is_entry;
  END;
$function$
]]></string>
			<input_param name="vertex_id" jt="4" type="int4" />
			<input_param name="name" jt="12" type="text" />
			<input_param name="type_id" jt="4" type="int4" />
			<input_param name="table_name" jt="12" type="text" />
			<input_param name="data_loc" jt="12" type="text" />
			<input_param name="criterion" jt="12" type="text" />
			<input_param name="alias" jt="12" type="text" />
			<input_param name="relevance" jt="4" type="int4" />
			<input_param name="is_entry" jt="-7" type="bool" />
		</procedure>
		<procedure name="getalljobsbystatus" id="Procedure_4fb0546" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getalljobsbystatus(_status text)
 RETURNS TABLE(job_id integer, name text, type text, payload_type text, message text, submitted_by text, submitted_date timestamp with time zone)
 LANGUAGE plpgsql
AS $function$
	DECLARE
        _status_id integer;
	BEGIN
		select cvid into _status_id from getCvId(_status, 'job_status', 1);
		RETURN QUERY 
		select j.job_id, j.name, getCvTerm(j.type_id), getCvTerm(j.payload_type_id), j.message, (select username from contact where contact_id=j.submitted_by), j.submitted_date
		from job j 
		where j.status = _status_id;
	END;
$function$
]]></string>
			<input_param name="_status" jt="12" type="text" />
			<result_param name="job_id" jt="4" type="int4" />
			<result_param name="name" jt="12" type="text" />
			<result_param name="type" jt="12" type="text" />
			<result_param name="payload_type" jt="12" type="text" />
			<result_param name="message" jt="12" type="text" />
			<result_param name="submitted_by" jt="12" type="text" />
			<result_param name="submitted_date" jt="93" type="timestamptz" />
		</procedure>
		<procedure name="getallmarkermetadatabydataset" id="Procedure_3dbfc6c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, linkage_group_name character varying, start numeric, stop numeric, mapset_name text, platform_name text, variant_id integer, code text, ref text, alts text, sequence text, reference_name text, primers jsonb, probsets jsonb, strand_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, mlp.linkage_group_name, mlp.start, mlp.stop, mlp.mapset_name, p.name as platform_name, m.variant_id, m.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, r.name as reference_name, m.primers, m.probsets, cv.term as strand_name
	from marker m inner join platform p on m.platform_id = p.platform_id
	left join reference r on m.reference_id = r.reference_id
	left join cv on m.strand_id = cv.cv_id 
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="varchar" />
			<result_param name="start" jt="2" type="numeric" />
			<result_param name="stop" jt="2" type="numeric" />
			<result_param name="mapset_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="variant_id" jt="4" type="int4" />
			<result_param name="code" jt="12" type="text" />
			<result_param name="ref" jt="12" type="text" />
			<result_param name="alts" jt="12" type="text" />
			<result_param name="sequence" jt="12" type="text" />
			<result_param name="reference_name" jt="12" type="text" />
			<result_param name="primers" jt="1111" type="jsonb" />
			<result_param name="probsets" jt="1111" type="jsonb" />
			<result_param name="strand_name" jt="12" type="text" />
		</procedure>
		<procedure name="getallmarkermetadatabydatasetandmap" id="Procedure_3b20dac" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkermetadatabydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_name text, linkage_group_name character varying, start numeric, stop numeric, mapset_name text, platform_name text, variant_id integer, code text, ref text, alts text, sequence text, reference_name text, primers jsonb, probsets jsonb, strand_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, mlp.linkage_group_name, mlp.start, mlp.stop, mlp.mapset_name, p.name as platform_name, m.variant_id, m.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, r.name as reference_name, m.primers, m.probsets, cv.term as strand_name
	from marker m inner join platform p on m.platform_id = p.platform_id
	left join reference r on m.reference_id = r.reference_id
	left join cv on m.strand_id = cv.cv_id 
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="varchar" />
			<result_param name="start" jt="2" type="numeric" />
			<result_param name="stop" jt="2" type="numeric" />
			<result_param name="mapset_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="variant_id" jt="4" type="int4" />
			<result_param name="code" jt="12" type="text" />
			<result_param name="ref" jt="12" type="text" />
			<result_param name="alts" jt="12" type="text" />
			<result_param name="sequence" jt="12" type="text" />
			<result_param name="reference_name" jt="12" type="text" />
			<result_param name="primers" jt="1111" type="jsonb" />
			<result_param name="probsets" jt="1111" type="jsonb" />
			<result_param name="strand_name" jt="12" type="text" />
		</procedure>
		<procedure name="getallmarkersinmarkergroup" id="Procedure_870913" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroup(id integer)
 RETURNS TABLE(marker_id integer, marker_name text, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as marker_id, marker.name as marker_name, p1.value as favorable_allele
    from marker, (select (jsonb_each_text(markers)).* from marker_group where marker_group_id=id) as p1
    where marker.marker_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="favorable_allele" jt="12" type="text" />
		</procedure>
		<procedure name="getallmarkersinmarkergroups" id="Procedure_46ba660" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroups(_namelist text)
 RETURNS TABLE(marker_group_name text, marker_id text, favorable_alleles text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select mgl.group_name, (jsonb_each_text(mg.markers)).*
    from unnest(_nameList::text[]) mgl(group_name)     left join marker_group mg on mgl.group_name = mg.name;
  END;
$function$
]]></string>
			<input_param name="_namelist" jt="12" type="text" />
			<result_param name="marker_group_name" jt="12" type="text" />
			<result_param name="marker_id" jt="12" type="text" />
			<result_param name="favorable_alleles" jt="12" type="text" />
		</procedure>
		<procedure name="getallmarkersinmarkergroups" id="Procedure_b6b846" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroups(_idlist text, _platformlist text)
 RETURNS TABLE(marker_group_id integer, marker_group_name text, marker_id text, favorable_alleles text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select t1.* from 
    (select mg.marker_group_id, mg.name, (jsonb_each_text(mg.markers)).*
    from unnest(_idList::text[]) mgl(marker_group_id)
    left join marker_group mg on mgl.marker_group_id::integer = mg.marker_group_id) as t1
    inner join marker m on m.marker_id = t1.key::integer
    where (_platformList is null OR m.platform_id in (select * from unnest(_platformList::integer[])));
  END;
$function$
]]></string>
			<input_param name="_idlist" jt="12" type="text" />
			<input_param name="_platformlist" jt="12" type="text" />
			<result_param name="marker_group_id" jt="4" type="int4" />
			<result_param name="marker_group_name" jt="12" type="text" />
			<result_param name="marker_id" jt="12" type="text" />
			<result_param name="favorable_alleles" jt="12" type="text" />
		</procedure>
		<procedure name="getallmarkersinmarkergroupsbyid" id="Procedure_15ba22f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroupsbyid(_idlist text)
 RETURNS TABLE(marker_group_id integer, marker_group_name text, marker_id text, favorable_alleles text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select mg.marker_group_id, mg.name, (jsonb_each_text(mg.markers)).*
    from unnest(_idList::text[]) mgl(marker_group_id)
    left join marker_group mg on mgl.marker_group_id::integer = mg.marker_group_id;
  END;
$function$
]]></string>
			<input_param name="_idlist" jt="12" type="text" />
			<result_param name="marker_group_id" jt="4" type="int4" />
			<result_param name="marker_group_name" jt="12" type="text" />
			<result_param name="marker_id" jt="12" type="text" />
			<result_param name="favorable_alleles" jt="12" type="text" />
		</procedure>
		<procedure name="getallprojectmetadatabydataset" id="Procedure_58be809" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallprojectmetadatabydataset(datasetid integer)
 RETURNS TABLE(project_pi_contact text, project_name text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, platform_name text, vendor_protocol_name text, vendor_name text, protocol_name text, analysis_name text, dataset_name text, dataset_type text)
 LANGUAGE plpgsql
AS $function$
   BEGIN
     return query
     select c.firstname || ' ' || c.lastname as PI
	    ,p.name as project_name
	    ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text)
	    ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text)
	    ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text)
	    ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text)
	    ,e.name as exp_name
	    ,plt.name  as plt_name
	    ,vp.name as vp_name
	    ,v.name as v_name
	    ,pr.name as pr_name
	    ,a.name as analysis_name
	    ,d.name as dataset_name
	    ,cv.term as dateset_type
       from dataset d
	left join analysis a on d.callinganalysis_id = a.analysis_id
	left join experiment e on d.experiment_id = e.experiment_id
	left join project p on p.project_id = e.project_id
	left join contact c on p.pi_contact = c.contact_id
	left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
	left join organization v on v.organization_id = vp.vendor_id
	left join protocol pr on pr.protocol_id = vp.protocol_id
	left join platform plt on pr.platform_id = plt.platform_id
	left join cv on cv.cv_id = d.type_id
       where d.dataset_id = datasetId;
   END;
 $function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="analysis_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="dataset_type" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofdnarun" id="Procedure_58195f3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnarun(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnarun where dnarun_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofdnasample" id="Procedure_1108ca1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnasample(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnasample where dnasample_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofgermplasm" id="Procedure_295765c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofgermplasm(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from germplasm where germplasm_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofmapset" id="Procedure_1b9162b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmapset(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from mapset where mapset_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofmarker" id="Procedure_545616a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmarker(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from marker where marker_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofplatform" id="Procedure_e34a5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofplatform(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from platform where platform_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofproject" id="Procedure_362e7a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofproject(projectid integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from project where project_id=projectId) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallpropertiesofprotocol" id="Procedure_b947c9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofprotocol(protocolid integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from protocol where protocol_id=protocolId) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
			<input_param name="protocolid" jt="4" type="int4" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_name" jt="12" type="text" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getallsamplemetadatabydataset" id="Procedure_3188de7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, sample_name text, germplasm_name text, external_code text, germplasm_type text, species text, platename text, num text, well_row text, well_col text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select dr.name as dnarun_name, ds.name as sample_name, g.name as germplasm_name, g.external_code, c1.term as germplasm_type, c2.term as species, ds.platename, ds.num, ds.well_row, ds.well_col
	from dnarun dr
	inner join dnasample ds on dr.dnasample_id = ds.dnasample_id 
	inner join germplasm g on ds.germplasm_id = g.germplasm_id 
	left join cv as c1 on g.type_id = c1.cv_id 
	left join cv as c2 on g.species_id = c2.cv_id
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="sample_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="external_code" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="species" jt="12" type="text" />
			<result_param name="platename" jt="12" type="text" />
			<result_param name="num" jt="12" type="text" />
			<result_param name="well_row" jt="12" type="text" />
			<result_param name="well_col" jt="12" type="text" />
		</procedure>
		<procedure name="getcvgroupid" id="Procedure_4d57dc7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcvgroupid(_groupname text, _grouptype integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
      select cvgroup_id into id 
      from cvgroup
      where type=_grouptype
      and name=_groupname;
    END;
$function$
]]></string>
			<input_param name="_groupname" jt="12" type="text" />
			<input_param name="_grouptype" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="getcvid" id="Procedure_4c38429" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcvid(_term text, _groupname text, _grouptype integer, OUT cvid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    	select cv.cv_id into cvid 
    	from cv inner join cvgroup cg on cv.cvgroup_id = cg.cvgroup_id
    	where cg.type=_grouptype
    	and cg.name=_groupname
    	and cv.term=_term;
    END;
$function$
]]></string>
			<input_param name="_term" jt="12" type="text" />
			<input_param name="_groupname" jt="12" type="text" />
			<input_param name="_grouptype" jt="4" type="int4" />
			<input_param name="cvid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="getcvterm" id="Procedure_5d5d9a7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcvterm(_cv_id integer, OUT cvterm text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
    BEGIN
    	select cv.term into cvterm 
    	from cv
    	where cv.cv_id=_cv_id;
    END;
$function$
]]></string>
			<input_param name="_cv_id" jt="4" type="int4" />
			<input_param name="cvterm" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getcvtermsbycvgroupname" id="Procedure_6c9258" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcvtermsbycvgroupname(cvgroupname text)
 RETURNS TABLE(term text)
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN query
	select cv.term from cv, cvgroup
	where cv.cvgroup_id = cvgroup.cvgroup_id and cvgroup.name = cvgroupName;
END;
$function$
]]></string>
			<input_param name="cvgroupname" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
			<result_param name="term" jt="12" type="text" />
		</procedure>
		<procedure name="getdnarunidsbydnasamplenames" id="Procedure_478021" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbydnasamplenames(dnasamplenames text)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	select dr.dnarun_id
	from dnasample ds
	inner join unnest(dnasampleNames::text[]) dsn(s_name) on ds.name = dsn.s_name
	inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
	order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="dnasamplenames" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbydnasamplenamesandpi" id="Procedure_1007b0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbydnasamplenamesandpi(dnasamplenames text, piid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from dnasample ds
        inner join unnest(dnasampleNames::text[]) dsn(s_name) on ds.name = dsn.s_name
        inner join project p on p.project_id = ds.project_id
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where p.pi_contact = piId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="dnasamplenames" jt="12" type="text" />
			<input_param name="piid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbydnasamplenamesandproject" id="Procedure_5b12a97" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbydnasamplenamesandproject(dnasamplenames text, projectid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from dnasample ds
        inner join unnest(dnasampleNames::text[]) dsn(s_name) on ds.name = dsn.s_name
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where ds.project_id = projectId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="dnasamplenames" jt="12" type="text" />
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbyexternalcodes" id="Procedure_1008d44" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbyexternalcodes(externalcodes text)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	select dr.dnarun_id
	from germplasm g
	inner join unnest(externalCodes::text[]) gx(ex_code) on g.external_code = gx.ex_code
	inner join dnasample ds on ds.germplasm_id = g.germplasm_id
	inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
	order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="externalcodes" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbyexternalcodesandpi" id="Procedure_3a45919" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbyexternalcodesandpi(externalcodes text, piid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from germplasm g
        inner join unnest(externalCodes::text[]) gx(ex_code) on g.external_code = gx.ex_code
        inner join dnasample ds on ds.germplasm_id = g.germplasm_id
        inner join project p on p.project_id = ds.project_id
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where p.pi_contact = piId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="externalcodes" jt="12" type="text" />
			<input_param name="piid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbyexternalcodesandproject" id="Procedure_555a444" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbyexternalcodesandproject(externalcodes text, projectid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from germplasm g
        inner join unnest(externalCodes::text[]) gx(ex_code) on g.external_code = gx.ex_code
        inner join dnasample ds on ds.germplasm_id = g.germplasm_id
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where ds.project_id = projectId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="externalcodes" jt="12" type="text" />
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbygermplasmnames" id="Procedure_2ecd618" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbygermplasmnames(germplasmnames text)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	select dr.dnarun_id
	from germplasm g
	inner join unnest(germplasmNames::text[]) gn(g_name) on g.name = gn.g_name
	inner join dnasample ds on ds.germplasm_id = g.germplasm_id
	inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
	order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="germplasmnames" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbygermplasmnamesandpi" id="Procedure_46fdf67" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbygermplasmnamesandpi(germplasmnames text, piid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from germplasm g
        inner join unnest(germplasmNames::text[]) gn(g_name) on g.name = gn.g_name
        inner join dnasample ds on ds.germplasm_id = g.germplasm_id
        inner join project p on p.project_id = ds.project_id
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where p.pi_contact = piId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="germplasmnames" jt="12" type="text" />
			<input_param name="piid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbygermplasmnamesandproject" id="Procedure_24aeab5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbygermplasmnamesandproject(germplasmnames text, projectid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
        select dr.dnarun_id
        from germplasm g
        inner join unnest(germplasmNames::text[]) gn(g_name) on g.name = gn.g_name
        inner join dnasample ds on ds.germplasm_id = g.germplasm_id
        inner join dnarun dr on dr.dnasample_id = ds.dnasample_id
        where ds.project_id = projectId
        order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="germplasmnames" jt="12" type="text" />
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbypi" id="Procedure_361f187" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbypi(piid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	select dr.dnarun_id
	from project p
	inner join dnasample ds on p.project_id = ds.project_id
	inner join dnarun dr on ds.dnasample_id = dr.dnasample_id
	where p.pi_contact = piId
	order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="piid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunidsbyproject" id="Procedure_3d4c75a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunidsbyproject(projectid integer)
 RETURNS TABLE(dnarun_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	select dr.dnarun_id
	from project p
	inner join dnasample ds on p.project_id = ds.project_id
	inner join dnarun dr on ds.dnasample_id = dr.dnasample_id
	where p.project_id = projectId
	order by dr.dnarun_id;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getdnarunnamesbydataset" id="Procedure_16735c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunnamesbydataset(datasetid integer)
 RETURNS TABLE(dnarun_id integer, dnarun_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select  dr.dnarun_id, dr.name as dnarun_name 
	from dnarun dr
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="dnarun_id" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
		</procedure>
		<procedure name="getdnarunpropertybyid" id="Procedure_1c23315" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnarun where dnarun_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getdnarunpropertybyname" id="Procedure_5ae8596" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnarun, property
      where dnarun_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getdnasamplepropertybyid" id="Procedure_583816" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnasample where dnasample_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getdnasamplepropertybyname" id="Procedure_45e0c75" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnasample, property
      where dnasample_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getexperimentnamesbyprojectid" id="Procedure_47803e5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentnamesbyprojectid(projectid integer)
 RETURNS TABLE(id integer, experiment_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select experiment_id, name from experiment where project_id = projectId;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<result_param name="id" jt="4" type="int4" />
			<result_param name="experiment_name" jt="12" type="text" />
		</procedure>
		<procedure name="getexperimentsbyprojectid" id="Procedure_57d24b6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentsbyprojectid(projectid integer)
 RETURNS SETOF experiment
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from experiment where project_id = projectId;
  END;
$function$
]]></string>
			<input_param name="experiment_id" jt="4" type="int4" />
			<input_param name="name" jt="12" type="text" />
			<input_param name="code" jt="12" type="text" />
			<input_param name="project_id" jt="4" type="int4" />
			<input_param name="manifest_id" jt="4" type="int4" />
			<input_param name="data_file" jt="12" type="text" />
			<input_param name="created_by" jt="4" type="int4" />
			<input_param name="created_date" jt="91" type="date" />
			<input_param name="modified_by" jt="4" type="int4" />
			<input_param name="modified_date" jt="91" type="date" />
			<input_param name="status" jt="4" type="int4" />
			<input_param name="vendor_protocol_id" jt="4" type="int4" />
			<input_param name="projectid" jt="4" type="int4" />
		</procedure>
		<procedure name="getgermplasmpropertybyid" id="Procedure_58a5a29" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from germplasm where germplasm_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getgermplasmpropertybyname" id="Procedure_2a6048b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from germplasm, property
      where germplasm_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getmanifestbyexperimentid" id="Procedure_435a728" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmanifestbyexperimentid(experimentid integer)
 RETURNS SETOF manifest
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from manifest where manifest_id in (select manifest_id from experiment where experiment_id = experimentId);
  END;
$function$
]]></string>
			<input_param name="manifest_id" jt="4" type="int4" />
			<input_param name="name" jt="12" type="text" />
			<input_param name="code" jt="12" type="text" />
			<input_param name="file_path" jt="12" type="text" />
			<input_param name="created_by" jt="4" type="int4" />
			<input_param name="created_date" jt="91" type="date" />
			<input_param name="modified_by" jt="4" type="int4" />
			<input_param name="modified_date" jt="91" type="date" />
			<input_param name="experimentid" jt="4" type="int4" />
		</procedure>
		<procedure name="getmapsetpropertybyid" id="Procedure_bf69d0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from mapset where mapset_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getmapsetpropertybyname" id="Procedure_e9e8ef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from mapset, property
      where mapset_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerallmapsetinfobydataset" id="Procedure_3974ed9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerallmapsetinfobydataset(dsid integer, mapid integer)
 RETURNS TABLE(marker_name text, platform_name text, mapset_id integer, mapset_name text, mapset_type text, linkage_group_name text, linkage_group_start text, linkage_group_stop text, marker_linkage_group_start text, marker_linkage_group_stop text, reference_name text, reference_version text)
 LANGUAGE plpgsql
AS $function$
BEGIN
        RETURN QUERY
        with mlgt as (
                        select distinct on (mr.marker_id, mapset_id) mr.marker_id, lg.name as linkage_group_name, lg.start as lg_start,lg.stop as lg_stop,  mlg.start, mlg.stop,ms.mapset_id, ms.name as mapset_name,ms.type_id,mr.name as marker_name,mr.platform_id,mr.reference_id,mr.dataset_marker_idx
                        from marker mr
                        left join marker_linkage_group mlg on mr.marker_id = mlg.marker_id
                        left join linkage_group lg on lg.linkage_group_id = mlg.linkage_group_id
                        left join mapset ms on ms.mapset_id = lg.map_id
                        where mr.dataset_marker_idx ? dsId::text
                )
                select mlgt.marker_name
                                ,p.name
                                ,mlgt.mapset_id
                        ,mlgt.mapset_name as mapset_name
                        ,cv.term as map_type
                        ,mlgt.linkage_group_name::text as lg_name
                        ,mlgt.lg_start::text as lg_start
                        ,mlgt.lg_stop::text as lg_stop
                        ,mlgt.start::text as mlg_start
                        ,mlgt.stop::text as mlg_stop
                        ,r.name,r.version
                from mlgt
                left join platform p on p.platform_id = mlgt.platform_id
                left join reference r on r.reference_id = mlgt.reference_id
                left join cv on cv_id =  mlgt.type_id
                order by mlgt.mapset_id, (mlgt.dataset_marker_idx->>dsId::text)::integer;
END;
$function$
]]></string>
			<input_param name="dsid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="mapset_id" jt="4" type="int4" />
			<result_param name="mapset_name" jt="12" type="text" />
			<result_param name="mapset_type" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="text" />
			<result_param name="linkage_group_start" jt="12" type="text" />
			<result_param name="linkage_group_stop" jt="12" type="text" />
			<result_param name="marker_linkage_group_start" jt="12" type="text" />
			<result_param name="marker_linkage_group_stop" jt="12" type="text" />
			<result_param name="reference_name" jt="12" type="text" />
			<result_param name="reference_version" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerids" id="Procedure_46fdceb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerids(markernames text, platformlist text)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id
	from marker m
	left outer join unnest(markerNames::text[]) mn(m_name) on m.name = mn.m_name
	left outer join unnest(platformList::integer[]) p(p_id) on m.platform_id = p.p_id
	where p.p_id is not null
	and mn.m_name is not null
	order by m.marker_id;
  END;
$function$
]]></string>
			<input_param name="markernames" jt="12" type="text" />
			<input_param name="platformlist" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkeridsbymarkernames" id="Procedure_54e480d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkeridsbymarkernames(markernames text)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id
	from marker m
	inner join unnest(markerNames::text[]) mn(m_name) on m.name = mn.m_name
	order by m.marker_id;
  END;
$function$
]]></string>
			<input_param name="markernames" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkeridsbymarkernamesandplatformlist" id="Procedure_4d5f4b6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkeridsbymarkernamesandplatformlist(markernames text, platformlist text)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id
	from marker m
	inner join unnest(markerNames::text[]) mn(m_name) on m.name = mn.m_name
	inner join unnest(platformList::integer[]) p(p_id) on m.platform_id = p.p_id
	order by m.marker_id;
  END;
$function$
]]></string>
			<input_param name="markernames" jt="12" type="text" />
			<input_param name="platformlist" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkeridsbyplatformlist" id="Procedure_4fbe8a5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkeridsbyplatformlist(platformlist text)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id
	from marker m
	inner join unnest(platformList::integer[]) p(p_id) on m.platform_id = p.p_id
	order by m.marker_id;
  END;
$function$
]]></string>
			<input_param name="platformlist" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkeridsbysamplesanddatasettype" id="Procedure_2b8da52" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkeridsbysamplesanddatasettype(samplelist text, datasettypeid integer)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dataset_list as (
			select distinct jsonb_object_keys(dataset_dnarun_idx)::integer as ds_id
			from unnest(sampleList::integer[]) sl(s_id)
			left join dnarun dr on sl.s_id = dr.dnarun_id
			order by ds_id
		)
    select m.marker_id
    from dataset_list dl inner join dataset d on dl.ds_id = d.dataset_id
    inner join marker m on m.dataset_marker_idx ? d.dataset_id::text
    where d.type_id = datasetTypeId;
  END;
$function$
]]></string>
			<input_param name="samplelist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkeridsbysamplesplatformsanddatasettype" id="Procedure_51a811c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkeridsbysamplesplatformsanddatasettype(samplelist text, platformlist text, datasettypeid integer)
 RETURNS TABLE(marker_id integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with dataset_list as (
			select distinct jsonb_object_keys(dataset_dnarun_idx)::integer as ds_id
			from unnest(sampleList::integer[]) sl(s_id)
			left join dnarun dr on sl.s_id = dr.dnarun_id
			order by ds_id
		)
    select m.marker_id
    from dataset_list dl inner join dataset d on dl.ds_id = d.dataset_id
    inner join marker m on m.dataset_marker_idx ? d.dataset_id::text
    inner join unnest(platformList::integer[]) p(p_id) on m.platform_id = p.p_id
    where d.type_id = datasetTypeId;
  END;
$function$
]]></string>
			<input_param name="samplelist" jt="12" type="text" />
			<input_param name="platformlist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
		</procedure>
		<procedure name="getmarkerinmarkergroupbyid" id="Procedure_1ed3b0d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select markers->markerId::text into value from marker_group where marker_group_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markerid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerinmarkergroupbyname" id="Procedure_38fe9cb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyname(id integer, markername text)
 RETURNS TABLE(marker_id integer, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with markerInfo as (select marker_id from marker where name=markerName)
    select markerInfo.marker_id, (props->markerInfo.marker_id::text)::text as favAllele
      from marker_group, markerInfo
      where marker_group_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markername" jt="12" type="text" />
			<result_param name="marker_id" jt="4" type="int4" />
			<result_param name="favorable_allele" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkermapsetinfobydataset" id="Procedure_2d203e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkermapsetinfobydataset(dsid integer, mapid integer)
 RETURNS TABLE(marker_name text, platform_name text, mapset_name text, mapset_type text, linkage_group_name text, linkage_group_start text, linkage_group_stop text, marker_linkage_group_start text, marker_linkage_group_stop text, reference_name text, reference_version text)
 LANGUAGE plpgsql
AS $function$
BEGIN
        RETURN QUERY
        with mlgt as (
                        select distinct on (mr.marker_id, mapset_id) mr.marker_id, lg.name as linkage_group_name, lg.start as lg_start,lg.stop as lg_stop,  mlg.start, mlg.stop,ms.mapset_id, ms.name as mapset_name,ms.type_id,mr.name as marker_name,mr.platform_id,mr.reference_id
                        from marker mr
                        left join marker_linkage_group mlg on mr.marker_id = mlg.marker_id
                        left join linkage_group lg on lg.linkage_group_id = mlg.linkage_group_id
                        left join mapset ms on ms.mapset_id = lg.map_id
                        where mr.dataset_marker_idx ? dsId::text
                )
                select mlgt.marker_name,p.name
                        , COALESCE(t.mpsn,mlgt.mapset_name) as mapset_name
                        , COALESCE(t.mpstype,cv.term) as mapset_type
                        ,COALESCE(t.lgn,mlgt.linkage_group_name::text) as lg_name
                        ,COALESCE(t.lgst,mlgt.lg_start::text) as lg_start
                        ,COALESCE(t.lgsp,mlgt.lg_stop::text) as lg_stop
                        ,COALESCE(t.mlgst,mlgt.start::text) as mlg_start
                        ,COALESCE(t.mlgst,mlgt.stop::text) as mlg_stop
                        ,r.name,r.version
                from mlgt
                left join platform p on p.platform_id = mlgt.platform_id
                left join reference r on r.reference_id = mlgt.reference_id
                left join cv on cv_id =  mlgt.type_id
                left join (
                        select  ' '::text as lgn
                                ,' '::text as mpsn
                                ,' '::text as lgst
                                ,' '::text as lgsp
                                ,' '::text as mlgst
                                ,' '::text as mlgsp
                                ,' '::text as mpstype
                ) t on mlgt.mapset_id != mapId
                order by mlgt.mapset_id;
END;
$function$
]]></string>
			<input_param name="dsid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="mapset_name" jt="12" type="text" />
			<result_param name="mapset_type" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="text" />
			<result_param name="linkage_group_start" jt="12" type="text" />
			<result_param name="linkage_group_stop" jt="12" type="text" />
			<result_param name="marker_linkage_group_start" jt="12" type="text" />
			<result_param name="marker_linkage_group_stop" jt="12" type="text" />
			<result_param name="reference_name" jt="12" type="text" />
			<result_param name="reference_version" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkermapsetinfobymarkerlist" id="Procedure_bafc8b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkermapsetinfobymarkerlist(markerlist text)
 RETURNS TABLE(marker_name text, platform_name text, mapset_id integer, mapset_name text, mapset_type text, linkage_group_name text, linkage_group_start text, linkage_group_stop text, marker_linkage_group_start text, marker_linkage_group_stop text, reference_name text, reference_version text)
 LANGUAGE plpgsql
AS $function$
BEGIN
        RETURN QUERY
        with mlgt as (
                        select distinct on (mr.marker_id, mapset_id) mr.marker_id, lg.name as linkage_group_name, lg.start as lg_start,lg.stop as lg_stop,  mlg.start, mlg.stop,ms.mapset_id, ms.name as mapset_name,ms.type_id,mr.name as marker_name,mr.platform_id,mr.reference_id
                        from unnest(markerList::integer[]) ml(m_id)
                        left join marker mr on ml.m_id = mr.marker_id
                        left join marker_linkage_group mlg on mr.marker_id = mlg.marker_id
                        left join linkage_group lg on lg.linkage_group_id = mlg.linkage_group_id
                        left join mapset ms on ms.mapset_id = lg.map_id
                )
                select mlgt.marker_name
                                ,p.name
                                ,mlgt.mapset_id
                        ,mlgt.mapset_name as mapset_name
                        ,cv.term as map_type
                        ,mlgt.linkage_group_name::text as lg_name
                        ,mlgt.lg_start::text as lg_start
                        ,mlgt.lg_stop::text as lg_stop
                        ,mlgt.start::text as mlg_start
                        ,mlgt.stop::text as mlg_stop
                        ,r.name,r.version
                from mlgt
                left join platform p on p.platform_id = mlgt.platform_id
                left join reference r on r.reference_id = mlgt.reference_id
                left join cv on cv_id =  mlgt.type_id
                order by mlgt.mapset_id, mlgt.marker_id;
END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="mapset_id" jt="4" type="int4" />
			<result_param name="mapset_name" jt="12" type="text" />
			<result_param name="mapset_type" jt="12" type="text" />
			<result_param name="linkage_group_name" jt="12" type="text" />
			<result_param name="linkage_group_start" jt="12" type="text" />
			<result_param name="linkage_group_stop" jt="12" type="text" />
			<result_param name="marker_linkage_group_start" jt="12" type="text" />
			<result_param name="marker_linkage_group_stop" jt="12" type="text" />
			<result_param name="reference_name" jt="12" type="text" />
			<result_param name="reference_version" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkernamesbydataset" id="Procedure_3d99b64" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkernamesbydataset(datasetid integer)
 RETURNS TABLE(marker_id integer, marker_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id, m.name as marker_name
	from marker m
	where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkernamesbydatasetandmap" id="Procedure_556d0de" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkernamesbydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_id integer, marker_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id, m.name as marker_name
	from marker m
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="marker_id" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerpropertybyid" id="Procedure_4a96cf0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from marker where marker_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerpropertybyname" id="Procedure_1192c88" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from marker, property
      where marker_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerqcmetadatabydataset" id="Procedure_4c01ba6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerqcmetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, platform_name text, variant_id integer, variant_code text, marker_ref text, marker_alts text, marker_sequence text, marker_strand text, marker_primer_forw1 text, marker_primer_forw2 text, marker_primer_rev1 text, marker_primer_rev2 text, marker_probe1 text, marker_probe2 text, marker_polymorphism_type text, marker_synonym text, marker_source text, marker_gene_id text, marker_gene_annotation text, marker_polymorphism_annotation text, marker_marker_dom text, marker_clone_id_pos text, marker_genome_build text, marker_typeofrefallele_alleleorder text, marker_strand_data_read text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, p.name as platform_name, v.variant_id, v.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, cv.term as strand_name
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_forw1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_forw2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_rev1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_rev2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','probe1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','probe2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','polymorphism_type',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','synonym',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','source',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','gene_id',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','gene_annotation',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','polymorphism_annotation',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','marker_dom',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','clone_id_pos',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','genome_build',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','typeofrefallele_alleleorder',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','strand_data_read',1)::text)
	from marker m left join platform p on m.platform_id = p.platform_id
	left join cv on m.strand_id = cv.cv_id 
	left join variant v on m.variant_id = v.variant_id
	where m.dataset_marker_idx ? datasetId::text
	order by (m.dataset_marker_idx->>datasetId::text)::integer; 
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="variant_id" jt="4" type="int4" />
			<result_param name="variant_code" jt="12" type="text" />
			<result_param name="marker_ref" jt="12" type="text" />
			<result_param name="marker_alts" jt="12" type="text" />
			<result_param name="marker_sequence" jt="12" type="text" />
			<result_param name="marker_strand" jt="12" type="text" />
			<result_param name="marker_primer_forw1" jt="12" type="text" />
			<result_param name="marker_primer_forw2" jt="12" type="text" />
			<result_param name="marker_primer_rev1" jt="12" type="text" />
			<result_param name="marker_primer_rev2" jt="12" type="text" />
			<result_param name="marker_probe1" jt="12" type="text" />
			<result_param name="marker_probe2" jt="12" type="text" />
			<result_param name="marker_polymorphism_type" jt="12" type="text" />
			<result_param name="marker_synonym" jt="12" type="text" />
			<result_param name="marker_source" jt="12" type="text" />
			<result_param name="marker_gene_id" jt="12" type="text" />
			<result_param name="marker_gene_annotation" jt="12" type="text" />
			<result_param name="marker_polymorphism_annotation" jt="12" type="text" />
			<result_param name="marker_marker_dom" jt="12" type="text" />
			<result_param name="marker_clone_id_pos" jt="12" type="text" />
			<result_param name="marker_genome_build" jt="12" type="text" />
			<result_param name="marker_typeofrefallele_alleleorder" jt="12" type="text" />
			<result_param name="marker_strand_data_read" jt="12" type="text" />
		</procedure>
		<procedure name="getmarkerqcmetadatabymarkerlist" id="Procedure_215aae4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerqcmetadatabymarkerlist(markerlist text)
 RETURNS TABLE(marker_name text, platform_name text, variant_id integer, variant_code text, marker_ref text, marker_alts text, marker_sequence text, marker_strand text, marker_primer_forw1 text, marker_primer_forw2 text, marker_primer_rev1 text, marker_primer_rev2 text, marker_probe1 text, marker_probe2 text, marker_polymorphism_type text, marker_synonym text, marker_source text, marker_gene_id text, marker_gene_annotation text, marker_polymorphism_annotation text, marker_marker_dom text, marker_clone_id_pos text, marker_genome_build text, marker_typeofrefallele_alleleorder text, marker_strand_data_read text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, p.name as platform_name, v.variant_id, v.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, cv.term as strand_name
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_forw1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_forw2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_rev1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','primer_rev2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','probe1',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','probe2',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','polymorphism_type',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','synonym',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','source',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','gene_id',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','gene_annotation',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','polymorphism_annotation',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','marker_dom',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','clone_id_pos',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','genome_build',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','typeofrefallele_alleleorder',1)::text)
		,(m.props->>getPropertyIdByNamesAndType('marker_prop','strand_data_read',1)::text)
	from unnest(markerList::integer[]) ml(m_id) 
	left join marker m on ml.m_id = m.marker_id
	left join platform p on m.platform_id = p.platform_id
	left join cv on m.strand_id = cv.cv_id 
	left join variant v on m.variant_id = v.variant_id
	order by m.marker_id;
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="platform_name" jt="12" type="text" />
			<result_param name="variant_id" jt="4" type="int4" />
			<result_param name="variant_code" jt="12" type="text" />
			<result_param name="marker_ref" jt="12" type="text" />
			<result_param name="marker_alts" jt="12" type="text" />
			<result_param name="marker_sequence" jt="12" type="text" />
			<result_param name="marker_strand" jt="12" type="text" />
			<result_param name="marker_primer_forw1" jt="12" type="text" />
			<result_param name="marker_primer_forw2" jt="12" type="text" />
			<result_param name="marker_primer_rev1" jt="12" type="text" />
			<result_param name="marker_primer_rev2" jt="12" type="text" />
			<result_param name="marker_probe1" jt="12" type="text" />
			<result_param name="marker_probe2" jt="12" type="text" />
			<result_param name="marker_polymorphism_type" jt="12" type="text" />
			<result_param name="marker_synonym" jt="12" type="text" />
			<result_param name="marker_source" jt="12" type="text" />
			<result_param name="marker_gene_id" jt="12" type="text" />
			<result_param name="marker_gene_annotation" jt="12" type="text" />
			<result_param name="marker_polymorphism_annotation" jt="12" type="text" />
			<result_param name="marker_marker_dom" jt="12" type="text" />
			<result_param name="marker_clone_id_pos" jt="12" type="text" />
			<result_param name="marker_genome_build" jt="12" type="text" />
			<result_param name="marker_typeofrefallele_alleleorder" jt="12" type="text" />
			<result_param name="marker_strand_data_read" jt="12" type="text" />
		</procedure>
		<procedure name="getmatrixposofmarkers" id="Procedure_f3f4bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmatrixposofmarkers(markerlist text)
 RETURNS TABLE(dataset_id integer, positions text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	with marker_list as ( select *
	from unnest(markerList::integer[]) ml(m_id) 
	left join marker m on ml.m_id = m.marker_id),
	dataset_list as (
		select  distinct jsonb_object_keys(dataset_marker_idx)::integer as dataset_id
		from marker_list ml
		order by dataset_id)
	select dl.dataset_id, string_agg(COALESCE(ml.dataset_marker_idx ->> dl.dataset_id::text, '-1'), ', ') as idx
	from marker_list ml cross join
	dataset_list dl
	group by dl.dataset_id
	order by dl.dataset_id;
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="dataset_id" jt="4" type="int4" />
			<result_param name="positions" jt="12" type="text" />
		</procedure>
		<procedure name="getmatrixposofmarkers" id="Procedure_4261b1d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmatrixposofmarkers(markerlist text, datasettypeid integer)
 RETURNS TABLE(dataset_id integer, positions text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	with marker_list as ( select *
		from unnest(markerList::integer[]) ml(m_id) 
		left join marker m on ml.m_id = m.marker_id
		order by ml.m_id),
	dataset_list as (
		select distinct jsonb_object_keys(dataset_marker_idx)::integer as dataset_id
		from marker_list ml
		order by dataset_id)
	select rdl.dataset_id, string_agg(COALESCE(ml.dataset_marker_idx ->> rdl.dataset_id::text, '-1'), ', ') as idx
	from marker_list ml cross join
	(select dl.dataset_id from dataset_list dl inner join dataset d on dl.dataset_id = d.dataset_id where d.type_id=datasetTypeId) rdl
	group by rdl.dataset_id
	order by rdl.dataset_id;
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="dataset_id" jt="4" type="int4" />
			<result_param name="positions" jt="12" type="text" />
		</procedure>
		<procedure name="getmatrixposofsamples" id="Procedure_43fc2da" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmatrixposofsamples(samplelist text, datasettypeid integer)
 RETURNS TABLE(dataset_id integer, positions text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
	with sample_list as ( select *
		from unnest(sampleList::integer[]) sl(s_id) 
		left join dnarun dr on sl.s_id = dr.dnarun_id
		order by sl.s_id),
	dataset_list as (
		select distinct jsonb_object_keys(dataset_dnarun_idx)::integer as dataset_id
		from sample_list sl
		order by dataset_id)
	select rdl.dataset_id, string_agg(COALESCE(sl.dataset_dnarun_idx ->> rdl.dataset_id::text, '-1'), ', ') as idx
	from sample_list sl cross join
	(select dl.dataset_id from dataset_list dl inner join dataset d on dl.dataset_id = d.dataset_id where d.type_id=datasetTypeId) rdl
	group by rdl.dataset_id
	order by rdl.dataset_id;
  END;
$function$
]]></string>
			<input_param name="samplelist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="dataset_id" jt="4" type="int4" />
			<result_param name="positions" jt="12" type="text" />
		</procedure>
		<procedure name="getminimalmarkermetadatabydataset" id="Procedure_28c6705" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, alleles text, chrom character varying, pos numeric, strand text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, m.ref || '/' || array_to_string(m.alts, ',', '?') as alleles, mlp.linkage_group_name as chrom, mlp.stop as pos, cv.term as strand
    from marker m
    left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
    left join cv on m.strand_id = cv.cv_id
    where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="alleles" jt="12" type="text" />
			<result_param name="chrom" jt="12" type="varchar" />
			<result_param name="pos" jt="2" type="numeric" />
			<result_param name="strand" jt="12" type="text" />
		</procedure>
		<procedure name="getminimalmarkermetadatabydatasetandmap" id="Procedure_509d413" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalmarkermetadatabydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_name text, alleles text, chrom character varying, pos numeric, strand text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select m.name as marker_name, m.ref || '/' || array_to_string(m.alts, ',', '?') as alleles, mlp.linkage_group_name as chrom, mlp.stop as pos, cv.term as strand
	from marker m
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	left join cv on m.strand_id = cv.cv_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<result_param name="marker_name" jt="12" type="text" />
			<result_param name="alleles" jt="12" type="text" />
			<result_param name="chrom" jt="12" type="varchar" />
			<result_param name="pos" jt="2" type="numeric" />
			<result_param name="strand" jt="12" type="text" />
		</procedure>
		<procedure name="getminimalsamplemetadatabydataset" id="Procedure_366b4fa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, sample_name text, germplasm_name text, external_code text, germplasm_type text, species text, platename text, num text, well_row text, well_col text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select dr.name as dnarun_name, ds.name as sample_name, g.name as germplasm_name, g.external_code, c1.term as germplasm_type, c2.term as species, ds.platename, ds.num, ds.well_row, ds.well_col
	from dnarun dr
	inner join dnasample ds on dr.dnasample_id = ds.dnasample_id 
	inner join germplasm g on ds.germplasm_id = g.germplasm_id 
	left join cv as c1 on g.type_id = c1.cv_id 
	left join cv as c2 on g.species_id = c2.cv_id
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="sample_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="external_code" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="species" jt="12" type="text" />
			<result_param name="platename" jt="12" type="text" />
			<result_param name="num" jt="12" type="text" />
			<result_param name="well_row" jt="12" type="text" />
			<result_param name="well_col" jt="12" type="text" />
		</procedure>
		<procedure name="getplatformpropertybyid" id="Procedure_2ec5a4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from platform where platform_id=id;
    return value;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getplatformpropertybyname" id="Procedure_40ed027" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from platform, property
      where platform_id=id);
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getprojectnamesbypi" id="Procedure_5b3c725" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectnamesbypi(_contact_id integer)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      projects refcursor;
    BEGIN
      OPEN projects FOR 
      select p.project_id, 
					p.name 
			from project p
			where p.pi_contact=_contact_id;
      RETURN projects;
    END;
$function$
]]></string>
			<input_param name="_contact_id" jt="4" type="int4" />
			<result_param name="returnValue" jt="2012" type="refcursor" />
		</procedure>
		<procedure name="getprojectpropertybyid" id="Procedure_1d0e71a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from project where project_id=projectId;
    return value;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getprojectpropertybyname" id="Procedure_4cdb1b2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyname(projectid integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from project, property
      where project_id=projectId);
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getpropertyidbynamesandtype" id="Procedure_4ee6250" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getpropertyidbynamesandtype(groupname text, propname text, cvtype integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN ( 
	select cv.cv_id
	from cv inner join cvgroup cg on cv.cvgroup_id = cg.cvgroup_id
	where cg.name = groupName
	and cg.type = cvType
	and term=propName);
END;
$function$
]]></string>
			<input_param name="groupname" jt="12" type="text" />
			<input_param name="propname" jt="12" type="text" />
			<input_param name="cvtype" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="getprotocolpropertybyid" id="Procedure_55607f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprotocolpropertybyid(protocolid integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from protocol where protocol_id=protocolId;
    return value;
  END;
$function$
]]></string>
			<input_param name="protocolid" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="getprotocolpropertybyname" id="Procedure_2253d56" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprotocolpropertybyname(protocolid integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from protocol, property
      where protocol_id=protocolId);
  END;
$function$
]]></string>
			<input_param name="protocolid" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<result_param name="property_id" jt="4" type="int4" />
			<result_param name="property_value" jt="12" type="text" />
		</procedure>
		<procedure name="getrolesofcontact" id="Procedure_2a7db8f" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getrolesofcontact(contactid integer)
 RETURNS SETOF role
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select r.* from contact c, role r where c.contact_id = contactId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
			<input_param name="role_id" jt="4" type="int4" />
			<input_param name="role_name" jt="12" type="text" />
			<input_param name="role_code" jt="12" type="text" />
			<input_param name="read_tables" jt="2003" type="_int4" />
			<input_param name="write_tables" jt="2003" type="_int4" />
			<input_param name="contactid" jt="4" type="int4" />
		</procedure>
		<procedure name="getsampleqcmetadatabydataset" id="Procedure_3f97d36" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, germplasm_name text, germplasm_pedigree text, germplasm_type text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_external_code text, germplasm_species text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
        return query
        select dr.name as dnarun_name
                ,g.name as germplasm_name
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text)
                ,cv2.term as type
                ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text)
                ,p.name as project_name
                ,c.firstname||' '||c.lastname as pi_contact
                ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as prj
                ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text)
                ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text)
                ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text)
                ,e.name as experiment_name
                ,vp.name as vp_name
                ,v.name as v_name
                ,pr.name as pr_name
                ,ds.name as dataset_name
                ,g.external_code
                ,cv.term as species
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text)
                ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text)
                ,dns.name  as dnasample_name
                ,dns.platename
                ,dns.num
                ,dns.well_row
                ,dns.well_col
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text)
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text)
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text)
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text)
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent_prop',1)::text)
                ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text)
        from dnarun dr
        left join dnasample dns on dr.dnasample_id = dns.dnasample_id
        left join germplasm g on dns.germplasm_id = g.germplasm_id
        left join project p on dns.project_id = p.project_id
        left join contact c on c.contact_id = p.pi_contact
        left join experiment e on e.experiment_id = dr.experiment_id
        left join dataset ds on ds.dataset_id = datasetId
        left join cv on g.species_id = cv.cv_id
        left join cv cv2 on g.type_id = cv2.cv_id
        left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
        left join organization v on v.organization_id = vp.vendor_id
        left join protocol pr on pr.protocol_id = vp.protocol_id
        where dr.dataset_dnarun_idx ? datasetId::text
        order by (dr.dataset_dnarun_idx->>datasetId::text)::integer;
  END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="getsampleqcmetadatabymarkerlist" id="Procedure_3127386" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabymarkerlist(markerlist text)
 RETURNS TABLE(dnarun_name text, germplasm_name text, germplasm_pedigree text, germplasm_type text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_external_code text, germplasm_species text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
        return query
        with dataset_list as (
                        select distinct jsonb_object_keys(dataset_marker_idx)::integer as ds_id
                        from unnest(markerList::integer[]) ml(m_id)
                        left join marker m on ml.m_id = m.marker_id
                        order by ds_id
                )
        select t.dnarun_name,t.germplasm_name,t.gped,t.type, t.dnarun_barcode, t.project_name, t.project_pi_contact, t.project_genotyping_purpose, t.project_date_sampled, t.project_division, t.project_study_name, t.experiment_name, t.vp_name, t.v_name, t.pr_name, t.dataset_name,  t.exc, t.species,  t.gid, t.gssd, t.gs, t.ghg, t.gp1,t.gpt1, t.gp2,t.gpt2, t.gp3,t.gpt3, t.gp4,t.gpt4, t.dnasample_name, t.plate, t.dnum, t.wr, t.wc, t.dtn, t.dsg, t.dsgc, t.dst, t.dsp, t.drs
        from (
                select distinct on (dl.ds_id, dr.dataset_dnarun_idx->>dl.ds_id::text)
                        dl.ds_id as did
                        ,(dr.dataset_dnarun_idx->>dl.ds_id::text)::integer as ds_idx
                        ,dr.name as dnarun_name
                        ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text) as dnarun_barcode
                        ,p.name as project_name
                        ,c.firstname||' '||c.lastname as project_pi_contact
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as project_genotyping_purpose
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text) as project_date_sampled
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text) as project_division
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text) as project_study_name
                        ,e.name as experiment_name
                        ,vp.name as vp_name
                        ,v.name as v_name
                        ,pr.name as pr_name
                        ,ds.name as dataset_name
                        ,g.name as germplasm_name
                        ,g.external_code as exc
                        ,cv.term as species
                        ,cv2.term as type
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text) as gid
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text) as gssd
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text) as gs
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text) as ghg
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text) as gp1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text) as gpt1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text) as gp2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text) as gpt2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text) as gp3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text) as gpt3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text) as gp4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text) as gpt4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text) as gped
                        ,dns.name  as dnasample_name
                        ,dns.platename as plate
                        ,dns.num as dnum
                        ,dns.well_row as wr
                        ,dns.well_col as wc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text) as dtn
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text) as dsg
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text) as dsgc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text) as dst
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent',1)::text) as dsp
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text) as drs
                from dataset_list dl
                left join dnarun dr on dr.dataset_dnarun_idx ? dl.ds_id::text
                left join dnasample dns on dr.dnasample_id = dns.dnasample_id
                left join germplasm g on dns.germplasm_id = g.germplasm_id
                left join project p on dns.project_id = p.project_id
                left join contact c on c.contact_id = p.pi_contact
                left join experiment e on e.experiment_id = dr.experiment_id
                left join dataset ds on ds.dataset_id = dl.ds_id
                left join cv on g.species_id = cv.cv_id
                left join cv cv2 on g.type_id = cv2.cv_id
                left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
                left join organization v on v.organization_id = vp.vendor_id
                left join protocol pr on pr.protocol_id = vp.protocol_id
                ) t
        order by (t.did, t.ds_idx);
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="getsampleqcmetadatabymarkerlist" id="Procedure_30a1f4c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabymarkerlist(markerlist text, datasettypeid integer)
 RETURNS TABLE(dnarun_name text, germplasm_name text, germplasm_pedigree text, germplasm_type text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_external_code text, germplasm_species text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
BEGIN
        return query
        with dataset_list as (
                        select distinct jsonb_object_keys(dataset_marker_idx)::integer as ds_id
                        from unnest(markerList::integer[]) ml(m_id)
                        left join marker m on ml.m_id = m.marker_id
                        order by ds_id
                )
        select t.dnarun_name,t.germplasm_name,t.gped, t.type,  t.dnarun_barcode, t.project_name, t.project_pi_contact, t.project_genotyping_purpose, t.project_date_sampled, t.project_division, t.project_study_name, t.experiment_name, t.vp_name, t.v_name, t.pr_name, t.dataset_name,  t.exc, t.species, t.gid, t.gssd, t.gs, t.ghg, t.gp1,t.gpt1, t.gp2,t.gpt2, t.gp3,t.gpt3, t.gp4,t.gpt4, t.dnasample_name, t.plate, t.dnum, t.wr, t.wc, t.dtn, t.dsg, t.dsgc, t.dst, t.dsp, t.drs
        from (
                select distinct on (dl.ds_id, dr.dataset_dnarun_idx->>dl.ds_id::text)
                        dl.ds_id as did
                        ,(dr.dataset_dnarun_idx->>dl.ds_id::text)::integer as ds_idx
                        ,dr.name as dnarun_name
                        ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text) as dnarun_barcode
                        ,p.name as project_name
                        ,c.firstname||' '||c.lastname as project_pi_contact
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as project_genotyping_purpose
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text) as project_date_sampled
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text) as project_division
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text) as project_study_name
                        ,e.name as experiment_name
                        ,vp.name as vp_name
                        ,v.name as v_name
                        ,pr.name as pr_name
                        ,dl.name as dataset_name
                        ,g.name as germplasm_name
                        ,g.external_code as exc
                        ,cv.term as species
                        ,cv2.term as type
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text) as gid
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text) as gssd
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text) as gs
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text) as ghg
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text) as gp1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text) as gpt1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text) as gp2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text) as gpt2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text) as gp3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text) as gpt3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text) as gp4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text) as gpt4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text) as gped
                        ,dns.name  as dnasample_name
                        ,dns.platename as plate
                        ,dns.num as dnum
                        ,dns.well_row as wr
                        ,dns.well_col as wc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text) as dtn
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text) as dsg
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text) as dsgc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text) as dst
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent',1)::text) as dsp
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text) as drs
                from
                (select ddl.ds_id, d.name from dataset_list ddl inner join dataset d on ddl.ds_id = d.dataset_id where d.type_id=datasetTypeId) dl
                left join dnarun dr on dr.dataset_dnarun_idx ? dl.ds_id::text
                left join dnasample dns on dr.dnasample_id = dns.dnasample_id
                left join germplasm g on dns.germplasm_id = g.germplasm_id
                left join project p on dns.project_id = p.project_id
                left join contact c on c.contact_id = p.pi_contact
                left join experiment e on e.experiment_id = dr.experiment_id
                left join cv on g.species_id = cv.cv_id
                left join cv cv2 on g.type_id = cv2.cv_id
                left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
                left join organization v on v.organization_id = vp.vendor_id
                left join protocol pr on pr.protocol_id = vp.protocol_id
                ) t
        order by (t.did, t.ds_idx);
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="getsampleqcmetadatabymarkerlistx" id="Procedure_4052c4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabymarkerlistx(markerlist text, datasettypeid integer)
 RETURNS TABLE(ds_id integer, idx integer, dnarun_name text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_name text, germplasm_external_code text, germplasm_species text, germplasm_type text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, germplasm_pedigree text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
        return query
        with dataset_list as (
                        select distinct jsonb_object_keys(dataset_marker_idx)::integer as ds_id
                        from unnest(markerList::integer[]) ml(m_id)
                        left join marker m on ml.m_id = m.marker_id
                        order by ds_id
                )
        select * from (
                select distinct on (dl.ds_id, dr.dataset_dnarun_idx->>dl.ds_id::text) dl.ds_id as did, (dr.dataset_dnarun_idx->>dl.ds_id::text)::integer as ds_idx
                        ,dr.name as dnarun_name
                        ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text)
                        ,p.name as project_name
                        ,c.firstname||' '||c.lastname as pi_contact
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as prj
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text)
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text)
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text)
                        ,e.name as experiment_name
                        ,vp.name as vp_name
                        ,v.name as v_name
                        ,pr.name as pr_name
                        ,ds.name as dataset_name
                        ,g.name as germplasm_name
                        ,g.external_code
                        ,cv.term as species
                        ,cv2.term as type
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text)
                        ,dns.name  as dnasample_name
                        ,dns.platename
                        ,dns.num
                        ,dns.well_row
                        ,dns.well_col
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text)
                from
                (select ddl.ds_id from dataset_list ddl inner join dataset d on ddl.ds_id = d.dataset_id where d.type_id=datasetTypeId) dl
                left join dnarun dr on dr.dataset_dnarun_idx ? dl.ds_id::text
                left join dnasample dns on dr.dnasample_id = dns.dnasample_id
                left join germplasm g on dns.germplasm_id = g.germplasm_id
                left join project p on dns.project_id = p.project_id
                left join contact c on c.contact_id = p.pi_contact
                left join experiment e on e.experiment_id = dr.experiment_id
                left join dataset ds on ds.experiment_id = e.experiment_id
                left join cv on g.species_id = cv.cv_id
                left join cv cv2 on g.type_id = cv2.cv_id
                left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
                left join organization v on v.organization_id = vp.vendor_id
                left join protocol pr on pr.protocol_id = vp.protocol_id
                ) t
        order by (t.did, t.ds_idx);
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="ds_id" jt="4" type="int4" />
			<result_param name="idx" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="getsampleqcmetadatabymarkerlistx" id="Procedure_175fb30" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabymarkerlistx(markerlist text)
 RETURNS TABLE(ds_id integer, idx integer, dnarun_name text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_name text, germplasm_external_code text, germplasm_species text, germplasm_type text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, germplasm_pedigree text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
        return query
        with dataset_list as (
                        select distinct jsonb_object_keys(dataset_marker_idx)::integer as ds_id
                        from unnest(markerList::integer[]) ml(m_id)
                        left join marker m on ml.m_id = m.marker_id
                        order by ds_id
                )
        select * from (
                select distinct on (dl.ds_id, dr.dataset_dnarun_idx->>dl.ds_id::text) dl.ds_id as did, (dr.dataset_dnarun_idx->>dl.ds_id::text)::integer as ds_idx
                        ,dr.name as dnarun_name
                        ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text)
                        ,p.name as project_name
                        ,c.firstname||' '||c.lastname as pi_contact
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as prj
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text)
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text)
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text)
                        ,e.name as experiment_name
                        ,vp.name as vp_name
                        ,v.name as v_name
                        ,pr.name as pr_name
                        ,ds.name as dataset_name
                        ,g.name as germplasm_name
                        ,g.external_code
                        ,cv.term as species
                        ,cv2.term as type
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text)
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text)
                        ,dns.name  as dnasample_name
                        ,dns.platename
                        ,dns.num
                        ,dns.well_row
                        ,dns.well_col
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent',1)::text)
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text)
                from dataset_list dl
                left join dnarun dr on dr.dataset_dnarun_idx ? dl.ds_id::text
                left join dnasample dns on dr.dnasample_id = dns.dnasample_id
                left join germplasm g on dns.germplasm_id = g.germplasm_id
                left join project p on dns.project_id = p.project_id
                left join contact c on c.contact_id = p.pi_contact
                left join experiment e on e.experiment_id = dr.experiment_id
                left join dataset ds on ds.dataset_id = dl.ds_id
                left join cv on g.species_id = cv.cv_id
                left join cv cv2 on g.type_id = cv2.cv_id
                left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
                left join organization v on v.organization_id = vp.vendor_id
                left join protocol pr on pr.protocol_id = vp.protocol_id
                ) t
        order by (t.did, t.ds_idx);
  END;
$function$
]]></string>
			<input_param name="markerlist" jt="12" type="text" />
			<result_param name="ds_id" jt="4" type="int4" />
			<result_param name="idx" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="getsampleqcmetadatabysamplelist" id="Procedure_1619dfe" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getsampleqcmetadatabysamplelist(samplelist text, datasettypeid integer)
 RETURNS TABLE(dnarun_name text, germplasm_name text, germplasm_pedigree text, germplasm_type text, dnarun_barcode text, project_name text, project_pi_contact text, project_genotyping_purpose text, project_date_sampled text, project_division text, project_study_name text, experiment_name text, vendor_protocol_name text, vendor_name text, protocol_name text, dataset_name text, germplasm_external_code text, germplasm_species text, germplasm_id text, germplasm_seed_source_id text, germplasm_subsp text, germplasm_heterotic_group text, germplasm_par1 text, germplasm_par1_type text, germplasm_par2 text, germplasm_par2_type text, germplasm_par3 text, germplasm_par3_type text, germplasm_par4 text, germplasm_par4_type text, dnasample_name text, dnasample_platename text, dnasample_num text, dnasample_well_row text, dnasample_well_col text, dnasample_trial_name text, dnasample_sample_group text, dnasample_sample_group_cycle text, dnasample_sample_type text, dnasample_sample_parent text, dnasample_ref_sample text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
        return query
        with dataset_list as (
                        select distinct jsonb_object_keys(dataset_dnarun_idx)::integer as ds_id
                        from unnest(sampleList::integer[]) sl(s_id)
                        left join dnarun d on sl.s_id = d.dnarun_id
                        order by ds_id
                )
        select t.dnarun_name,t.germplasm_name,t.gped,t.type  , t.dnarun_barcode, t.project_name, t.project_pi_contact, t.project_genotyping_purpose, t.project_date_sampled, t.project_division, t.project_study_name, t.experiment_name, t.vp_name, t.v_name, t.pr_name, t.dataset_name,  t.exc, t.species,  t.gid, t.gssd, t.gs, t.ghg, t.gp1,t.gpt1, t.gp2,t.gpt2, t.gp3,t.gpt3, t.gp4,t.gpt4,  t.dnasample_name, t.plate, t.dnum, t.wr, t.wc, t.dtn, t.dsg, t.dsgc, t.dst, t.dsp, t.drs
        from (
                select distinct on (dl.ds_id, dr.dataset_dnarun_idx->>dl.ds_id::text)
                        dl.ds_id as did
                        ,(dr.dataset_dnarun_idx->>dl.ds_id::text)::integer as ds_idx
                        ,dr.name as dnarun_name
                        ,(dr.props->>getPropertyIdByNamesAndType('dnarun_prop','barcode',1)::text) as dnarun_barcode
                        ,p.name as project_name
                        ,c.firstname||' '||c.lastname as project_pi_contact
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','genotyping_purpose',1)::text) as project_genotyping_purpose
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','date_sampled',1)::text) as project_date_sampled
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','division',1)::text) as project_division
                        ,(p.props->>getPropertyIdByNamesAndType('project_prop','study_name',1)::text) as project_study_name
                        ,e.name as experiment_name
                        ,vp.name as vp_name
                        ,v.name as v_name
                        ,pr.name as pr_name
                        ,dl.name as dataset_name
                        ,g.name as germplasm_name
                        ,g.external_code as exc
                        ,cv.term as species
                        ,cv2.term as type
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_id',1)::text) as gid
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','seed_source_id',1)::text) as gssd
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_subsp',1)::text) as gs
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','germplasm_heterotic_group',1)::text) as ghg
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1',1)::text) as gp1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par1_type',1)::text) as gpt1
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2',1)::text) as gp2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par2_type',1)::text) as gpt2
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3',1)::text) as gp3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par3_type',1)::text) as gpt3
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4',1)::text) as gp4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','par4_type',1)::text) as gpt4
                        ,(g.props->>getPropertyIdByNamesAndType('germplasm_prop','pedigree',1)::text) as gped
                        ,dns.name  as dnasample_name
                        ,dns.platename as plate
                        ,dns.num as dnum
                        ,dns.well_row as wr
                        ,dns.well_col as wc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','trial_name',1)::text) as dtn
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group',1)::text) as dsg
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_group_cycle',1)::text) as dsgc
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_type',1)::text) as dst
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','sample_parent',1)::text) as dsp
                        ,(dns.props->>getPropertyIdByNamesAndType('dnasample_prop','ref_sample',1)::text) as drs
                from
                (select ddl.ds_id, d.name from dataset_list ddl inner join dataset d on ddl.ds_id = d.dataset_id where d.type_id=datasetTypeId) dl
                inner join dnarun dr on dr.dataset_dnarun_idx ? dl.ds_id::text
                inner join unnest(sampleList::integer[]) sl2(s_id) on sl2.s_id = dr.dnarun_id
                left join dnasample dns on dr.dnasample_id = dns.dnasample_id
                left join germplasm g on dns.germplasm_id = g.germplasm_id
                left join project p on dns.project_id = p.project_id
                left join contact c on c.contact_id = p.pi_contact
                left join experiment e on e.experiment_id = dr.experiment_id
                left join cv on g.species_id = cv.cv_id
                left join cv cv2 on g.type_id = cv2.cv_id
                left join vendor_protocol vp on vp.vendor_protocol_id = e.vendor_protocol_id
                left join organization v on v.organization_id = vp.vendor_id
                left join protocol pr on pr.protocol_id = vp.protocol_id
                ) t
        order by (t.did, t.ds_idx);
  END;
$function$
]]></string>
			<input_param name="samplelist" jt="12" type="text" />
			<input_param name="datasettypeid" jt="4" type="int4" />
			<result_param name="dnarun_name" jt="12" type="text" />
			<result_param name="germplasm_name" jt="12" type="text" />
			<result_param name="germplasm_pedigree" jt="12" type="text" />
			<result_param name="germplasm_type" jt="12" type="text" />
			<result_param name="dnarun_barcode" jt="12" type="text" />
			<result_param name="project_name" jt="12" type="text" />
			<result_param name="project_pi_contact" jt="12" type="text" />
			<result_param name="project_genotyping_purpose" jt="12" type="text" />
			<result_param name="project_date_sampled" jt="12" type="text" />
			<result_param name="project_division" jt="12" type="text" />
			<result_param name="project_study_name" jt="12" type="text" />
			<result_param name="experiment_name" jt="12" type="text" />
			<result_param name="vendor_protocol_name" jt="12" type="text" />
			<result_param name="vendor_name" jt="12" type="text" />
			<result_param name="protocol_name" jt="12" type="text" />
			<result_param name="dataset_name" jt="12" type="text" />
			<result_param name="germplasm_external_code" jt="12" type="text" />
			<result_param name="germplasm_species" jt="12" type="text" />
			<result_param name="germplasm_id" jt="12" type="text" />
			<result_param name="germplasm_seed_source_id" jt="12" type="text" />
			<result_param name="germplasm_subsp" jt="12" type="text" />
			<result_param name="germplasm_heterotic_group" jt="12" type="text" />
			<result_param name="germplasm_par1" jt="12" type="text" />
			<result_param name="germplasm_par1_type" jt="12" type="text" />
			<result_param name="germplasm_par2" jt="12" type="text" />
			<result_param name="germplasm_par2_type" jt="12" type="text" />
			<result_param name="germplasm_par3" jt="12" type="text" />
			<result_param name="germplasm_par3_type" jt="12" type="text" />
			<result_param name="germplasm_par4" jt="12" type="text" />
			<result_param name="germplasm_par4_type" jt="12" type="text" />
			<result_param name="dnasample_name" jt="12" type="text" />
			<result_param name="dnasample_platename" jt="12" type="text" />
			<result_param name="dnasample_num" jt="12" type="text" />
			<result_param name="dnasample_well_row" jt="12" type="text" />
			<result_param name="dnasample_well_col" jt="12" type="text" />
			<result_param name="dnasample_trial_name" jt="12" type="text" />
			<result_param name="dnasample_sample_group" jt="12" type="text" />
			<result_param name="dnasample_sample_group_cycle" jt="12" type="text" />
			<result_param name="dnasample_sample_type" jt="12" type="text" />
			<result_param name="dnasample_sample_parent" jt="12" type="text" />
			<result_param name="dnasample_ref_sample" jt="12" type="text" />
		</procedure>
		<procedure name="gettimescoper" id="Procedure_470b64c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettimescoper(_username text, _password text)
 RETURNS TABLE(firstname text, lastname text, username text, email text, role integer)
 LANGUAGE plpgsql
AS $function$
	BEGIN
		RETURN QUERY
		SELECT t.firstname, t.lastname, t.username, t.email, t.role FROM timescoper as t WHERE t.username = _username AND t.password = crypt(_password, t.password);
	END;
$function$
]]></string>
			<input_param name="_username" jt="12" type="text" />
			<input_param name="_password" jt="12" type="text" />
			<result_param name="firstname" jt="12" type="text" />
			<result_param name="lastname" jt="12" type="text" />
			<result_param name="username" jt="12" type="text" />
			<result_param name="email" jt="12" type="text" />
			<result_param name="role" jt="4" type="int4" />
		</procedure>
		<procedure name="gettotaldnarunsindataset" id="Procedure_15efada" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettotaldnarunsindataset(_dataset_id text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    total integer; 
  BEGIN
    select count(*) into total from dnarun where dataset_dnarun_idx ? _dataset_id;
    return total;
  END;
$function$
]]></string>
			<input_param name="_dataset_id" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="gettotalmarkersindataset" id="Procedure_53464b1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettotalmarkersindataset(_dataset_id text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    total integer; 
  BEGIN
    select count(*) into total from marker where dataset_marker_idx ? _dataset_id;
    return total;
  END;
$function$
]]></string>
			<input_param name="_dataset_id" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="gettotalprojects" id="Procedure_2444eea" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettotalprojects()
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    total integer; 
  BEGIN
    select count(*) into total from projects;
    return total;
  END;
$function$
]]></string>
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="hmac" id="Procedure_1a34ab6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hmac(bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_hmac$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="hmac" id="Procedure_40e12bf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.hmac(text, text, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pg_hmac$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_armor_headers" id="Procedure_58cb20b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_armor_headers(text, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_armor_headers$function$
]]></string>
			<input_param name="" jt="12" type="text" />
			<input_param name="key" jt="12" type="text" />
			<input_param name="value" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_key_id" id="Procedure_43b6182" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_key_id(bytea)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_key_id_w$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_pub_decrypt" id="Procedure_48ba73" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea, text, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_pub_decrypt" id="Procedure_18c6b8a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_pub_decrypt" id="Procedure_3eb5f93" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt(bytea, bytea)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_pub_decrypt_bytea" id="Procedure_2eaee1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_decrypt_bytea" id="Procedure_17affab" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_decrypt_bytea" id="Procedure_4a1508e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_decrypt_bytea(bytea, bytea)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_encrypt" id="Procedure_2e51fcd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_encrypt(text, bytea, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_encrypt" id="Procedure_15261c7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_encrypt(text, bytea)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_encrypt_bytea" id="Procedure_3f64267" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_pub_encrypt_bytea" id="Procedure_53b6634" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_pub_encrypt_bytea(bytea, bytea)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="-2" type="bytea" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_decrypt" id="Procedure_c7883a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_decrypt(bytea, text, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_sym_decrypt" id="Procedure_4a758aa" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_decrypt(bytea, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="pgp_sym_decrypt_bytea" id="Procedure_45044f0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_decrypt_bytea(bytea, text, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_decrypt_bytea" id="Procedure_55d612a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_decrypt_bytea(bytea, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_encrypt" id="Procedure_581b75c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_encrypt(text, text, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_encrypt" id="Procedure_29c16e0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_encrypt(text, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$
]]></string>
			<input_param name="$1" jt="12" type="text" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_encrypt_bytea" id="Procedure_2c7ac75" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_encrypt_bytea(bytea, text, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="pgp_sym_encrypt_bytea" id="Procedure_4d81a74" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgp_sym_encrypt_bytea(bytea, text)
 RETURNS bytea
 LANGUAGE c
 STRICT
AS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$
]]></string>
			<input_param name="$1" jt="-2" type="bytea" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-2" type="bytea" />
		</procedure>
		<procedure name="regexp_matches" id="Procedure_4d67393" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_matches(citext, citext)
 RETURNS SETOF text[]
 LANGUAGE sql
 IMMUTABLE STRICT ROWS 1
AS $function$
    SELECT pg_catalog.regexp_matches( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_matches" id="Procedure_bc1ed7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_matches(citext, citext, text)
 RETURNS SETOF text[]
 LANGUAGE sql
 IMMUTABLE STRICT ROWS 10
AS $function$
    SELECT pg_catalog.regexp_matches( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_replace" id="Procedure_48b19bb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_replace(citext, citext, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, $2::pg_catalog.text, $3, 'i');
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="regexp_replace" id="Procedure_5a26360" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_replace(citext, citext, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, $2::pg_catalog.text, $3, CASE WHEN pg_catalog.strpos($4, 'c') = 0 THEN  $4 || 'i' ELSE $4 END);
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<input_param name="$4" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="regexp_split_to_array" id="Procedure_166b8ec" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_split_to_array(citext, citext)
 RETURNS text[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_split_to_array( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_split_to_array" id="Procedure_10a1451" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_split_to_array(citext, citext, text)
 RETURNS text[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_split_to_array( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="2003" type="_text" />
		</procedure>
		<procedure name="regexp_split_to_table" id="Procedure_5d66173" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_split_to_table(citext, citext)
 RETURNS SETOF text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_split_to_table( $1::pg_catalog.text, $2::pg_catalog.text, 'i' );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="regexp_split_to_table" id="Procedure_2cb0fc9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.regexp_split_to_table(citext, citext, text)
 RETURNS SETOF text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_split_to_table( $1::pg_catalog.text, $2::pg_catalog.text, CASE WHEN pg_catalog.strpos($3, 'c') = 0 THEN  $3 || 'i' ELSE $3 END );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="removeanalysisfromdataset" id="Procedure_7369a1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removeanalysisfromdataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_remove(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="analysisid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="removereadtablefromrole" id="Procedure_57af46d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removereadtablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_remove(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
			<input_param name="roleid" jt="4" type="int4" />
			<input_param name="tableid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="removerolefromcontact" id="Procedure_28be50d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removerolefromcontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_remove(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
			<input_param name="contactid" jt="4" type="int4" />
			<input_param name="roleid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="removewritetablefromrole" id="Procedure_3cbe90c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removewritetablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_remove(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
			<input_param name="roleid" jt="4" type="int4" />
			<input_param name="tableid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="replace" id="Procedure_2e436d1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.replace(citext, citext, citext)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.regexp_replace( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), $3::pg_catalog.text, 'gi' );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="1111" type="citext" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="setdatawarehouseversion" id="Procedure_1c78bcf" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.setdatawarehouseversion(ver text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
        propId integer;
     BEGIN
     select cv_id into propId from cv where term='version' and cvgroup_id=(select cvgroup_id from cvgroup where name='gobii_datawarehouse' and type=1 );
     update gobiiprop set value=ver
      where type_id=propId
      and rank=1;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="ver" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="split_part" id="Procedure_9e4eef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.split_part(citext, citext, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT (pg_catalog.regexp_split_to_array( $1::pg_catalog.text, pg_catalog.regexp_replace($2::pg_catalog.text, '([^a-zA-Z_0-9])', E'\\\\\\1', 'g'), 'i'))[$3];
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="4" type="int4" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="strpos" id="Procedure_5ddba9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.strpos(citext, citext)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.strpos( pg_catalog.lower( $1::pg_catalog.text ), pg_catalog.lower( $2::pg_catalog.text ) );
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="texticlike" id="Procedure_d20c96" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticlike(citext, citext)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticlike" id="Procedure_588da6e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticlike(citext, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticnlike" id="Procedure_353fd6d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticnlike(citext, citext)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticnlike" id="Procedure_56a514e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticnlike(citext, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticregexeq" id="Procedure_18d1cfc" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticregexeq(citext, citext)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticregexeq" id="Procedure_5a03509" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticregexeq(citext, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticregexne" id="Procedure_2af1e3a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticregexne(citext, citext)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="texticregexne" id="Procedure_2fec59b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.texticregexne(citext, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="12" type="text" />
			<result_param name="returnValue" jt="-7" type="bool" />
		</procedure>
		<procedure name="translate" id="Procedure_5535c43" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.translate(citext, citext, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT pg_catalog.translate( pg_catalog.translate( $1::pg_catalog.text, pg_catalog.lower($2::pg_catalog.text), $3), pg_catalog.upper($2::pg_catalog.text), $3);
$function$
]]></string>
			<input_param name="$1" jt="1111" type="citext" />
			<input_param name="$2" jt="1111" type="citext" />
			<input_param name="$3" jt="12" type="text" />
			<result_param name="returnValue" jt="12" type="text" />
		</procedure>
		<procedure name="updateanalysis" id="Procedure_1d1de03" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="analysisname" jt="12" type="text" />
			<input_param name="analysisdescription" jt="12" type="text" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="analysisprogram" jt="12" type="text" />
			<input_param name="analysisprogramversion" jt="12" type="text" />
			<input_param name="aanalysisalgorithm" jt="12" type="text" />
			<input_param name="analysissourcename" jt="12" type="text" />
			<input_param name="analysissourceversion" jt="12" type="text" />
			<input_param name="analysissourceuri" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="analysisparameters" jt="1111" type="jsonb" />
			<input_param name="analysistimeexecuted" jt="93" type="timestamp" />
			<input_param name="analysisstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateanalysis" id="Procedure_521bccb" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="analysisname" jt="12" type="text" />
			<input_param name="analysisdescription" jt="12" type="text" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="analysisprogram" jt="12" type="text" />
			<input_param name="analysisprogramversion" jt="12" type="text" />
			<input_param name="aanalysisalgorithm" jt="12" type="text" />
			<input_param name="analysissourcename" jt="12" type="text" />
			<input_param name="analysissourceversion" jt="12" type="text" />
			<input_param name="analysissourceuri" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="analysisparameters" jt="1111" type="jsonb" />
			<input_param name="analysistimeexecuted" jt="93" type="timestamp" />
			<input_param name="analysisstatus" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateanalysis" id="Procedure_3e7db9a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="analysisname" jt="12" type="text" />
			<input_param name="analysisdescription" jt="12" type="text" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="analysisprogram" jt="12" type="text" />
			<input_param name="analysisprogramversion" jt="12" type="text" />
			<input_param name="aanalysisalgorithm" jt="12" type="text" />
			<input_param name="analysissourcename" jt="12" type="text" />
			<input_param name="analysissourceversion" jt="12" type="text" />
			<input_param name="analysissourceuri" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="analysistimeexecuted" jt="93" type="timestamp" />
			<input_param name="analysisstatus" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatecontact" id="Procedure_27e482" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecontact(contactid integer, contactlastname text, contactfirstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer, uname text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set lastname=contactLastName, firstname=contactFirstName, code=contactCode, email=contactEmail, roles=contactRoles, created_by=createdBy, created_date=createdDate,
      modified_by=modifiedBy, modified_date=modifiedDate, organization_id=organizationId, username=uname
     where contact_id = contactId;
    END;
$function$
]]></string>
			<input_param name="contactid" jt="4" type="int4" />
			<input_param name="contactlastname" jt="12" type="text" />
			<input_param name="contactfirstname" jt="12" type="text" />
			<input_param name="contactcode" jt="12" type="text" />
			<input_param name="contactemail" jt="12" type="text" />
			<input_param name="contactroles" jt="2003" type="_int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="organizationid" jt="4" type="int4" />
			<input_param name="uname" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatecv" id="Procedure_4f8d928" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecv(pid integer, pcvgroupid integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update cv set cvgroup_id=pcvgroupid, term=pcvterm, definition=pcvdefinition, rank=pcvrank, abbreviation=pabbreviation, dbxref_id=pdbxrefid, status=pstatus
      where cv_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pcvgroupid" jt="4" type="int4" />
			<input_param name="pcvterm" jt="12" type="text" />
			<input_param name="pcvdefinition" jt="12" type="text" />
			<input_param name="pcvrank" jt="4" type="int4" />
			<input_param name="pabbreviation" jt="12" type="text" />
			<input_param name="pdbxrefid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updatecvgroup" id="Procedure_3c07de6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecvgroup(pid integer, pname text, pdefinition text, ptype integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update cvgroup set name=pname, definition=pdefinition, type=ptype
      where cvgroup_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pdefinition" jt="12" type="text" />
			<input_param name="ptype" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updatedataset" id="Procedure_4f63be6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedataset(id integer, datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer, jobid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
   BEGIN
    update dataset set experiment_id=experimentId, callinganalysis_id=callinganalysisId, analyses=datasetAnalyses, data_table=dataTable, data_file=dataFile, quality_table=qualityTable, quality_file=qualityFile, scores='{}'::jsonb, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=datasetStatus, type_id=typeId, name=datasetName, job_id=jobid
     where dataset_id = id;
   END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="datasetname" jt="12" type="text" />
			<input_param name="experimentid" jt="4" type="int4" />
			<input_param name="callinganalysisid" jt="4" type="int4" />
			<input_param name="datasetanalyses" jt="2003" type="_int4" />
			<input_param name="datatable" jt="12" type="text" />
			<input_param name="datafile" jt="12" type="text" />
			<input_param name="qualitytable" jt="12" type="text" />
			<input_param name="qualityfile" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="datasetstatus" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="jobid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatedatasetmarker" id="Procedure_52ef9a7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores=datasetMarkerScores
     where dataset_marker_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="datasetid" jt="4" type="int4" />
			<input_param name="markerid" jt="4" type="int4" />
			<input_param name="callrate" jt="7" type="float4" />
			<input_param name="datasetmarkermaf" jt="7" type="float4" />
			<input_param name="datasetmarkerreproducibility" jt="7" type="float4" />
			<input_param name="datasetmarkerscores" jt="1111" type="jsonb" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatedbxref" id="Procedure_4c588a4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedbxref(pid integer, paccession text, pver text, pdescription text, pdbname text, purl text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update dbxref set accession=paccession, ver=pver, description=pdescription, db_name=pdbname, url=purl
      where dbxref_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="paccession" jt="12" type="text" />
			<input_param name="pver" jt="12" type="text" />
			<input_param name="pdescription" jt="12" type="text" />
			<input_param name="pdbname" jt="12" type="text" />
			<input_param name="purl" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updatedisplay" id="Procedure_3ff87d2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedisplay(id integer, tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update display set table_name=tableName, column_name=columnName, display_name=displayName, created_by=createdBy, created_date=createdDate, 
      modified_by=modifiedBy, modified_date=modifiedDate, rank=displayRank
     where display_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="tablename" jt="12" type="text" />
			<input_param name="columnname" jt="12" type="text" />
			<input_param name="displayname" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="displayrank" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednarun" id="Procedure_8a7448" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarun(id integer, experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnarun set experiment_id=experimentId, dnasample_id=dnasampleId, name=dnarunName, code=dnarunCode
     where dnarun_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="experimentid" jt="4" type="int4" />
			<input_param name="dnasampleid" jt="4" type="int4" />
			<input_param name="dnarunname" jt="12" type="text" />
			<input_param name="dnaruncode" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednarunpropertybyid" id="Procedure_541f54b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnarun_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednarunpropertybyname" id="Procedure_7c9912" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnarun_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednasample" id="Procedure_8ed264" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasample(id integer, dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnasample set name=dnaSampleName, code=dnaSampleCode, platename=dnaSamplePlateName, num=dnaSampleNum, well_row=wellRow, well_col=wellCol, project_id=projectId, germplasm_id=germplasmId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=dnaSampleStatus
     where dnasample_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="dnasamplename" jt="12" type="text" />
			<input_param name="dnasamplecode" jt="12" type="text" />
			<input_param name="dnasampleplatename" jt="12" type="text" />
			<input_param name="dnasamplenum" jt="12" type="text" />
			<input_param name="wellrow" jt="12" type="text" />
			<input_param name="wellcol" jt="12" type="text" />
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="germplasmid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="dnasamplestatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednasamplepropertybyid" id="Procedure_57217f0" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnasample_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatednasamplepropertybyname" id="Procedure_2d6e891" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnasample_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateexperiment" id="Procedure_5ad3178" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateexperiment(pid integer, pname text, pcode text, pprojectid integer, pvendorprotocolid integer, pmanifestid integer, pdatafile text, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
     BEGIN
     update experiment set name=pname, code=pcode, project_id=pprojectid, manifest_id=pmanifestid, data_file=pdatafile,
       created_by=pcreatedby, created_date=pcreateddate, modified_by=pmodifiedby, modified_date=pmodifieddate, status=pstatus, vendor_protocol_id=pvendorprotocolid 
       where experiment_id = pId;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pcode" jt="12" type="text" />
			<input_param name="pprojectid" jt="4" type="int4" />
			<input_param name="pvendorprotocolid" jt="4" type="int4" />
			<input_param name="pmanifestid" jt="4" type="int4" />
			<input_param name="pdatafile" jt="12" type="text" />
			<input_param name="pcreatedby" jt="4" type="int4" />
			<input_param name="pcreateddate" jt="91" type="date" />
			<input_param name="pmodifiedby" jt="4" type="int4" />
			<input_param name="pmodifieddate" jt="91" type="date" />
			<input_param name="pstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updategermplasm" id="Procedure_1b8d0e3" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasm(id integer, germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update germplasm set name=germplasmName, external_code=externalCode, species_id=speciesId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=germplasmStatus, code=germplasmCode
     where germplasm_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="germplasmname" jt="12" type="text" />
			<input_param name="externalcode" jt="12" type="text" />
			<input_param name="speciesid" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="germplasmstatus" jt="4" type="int4" />
			<input_param name="germplasmcode" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updategermplasmpropertybyid" id="Procedure_4ccedad" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where germplasm_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updategermplasmpropertybyname" id="Procedure_6493f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where germplasm_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatejob" id="Procedure_3738947" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatejob(id integer, _name text, _type text, _payload_type text, _status text, _message text, _submitted_by integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    DECLARE
        _type_id integer;
        _payload_type_id integer;
        _status_id integer;
    BEGIN
        select cvid into _type_id from getCvId(_type, 'job_type', 1);
        select cvid into _payload_type_id from getCvId(_payload_type, 'payload_type', 1);
        select cvid into _status_id from getCvId(_status, 'job_status', 1);
        update job set type_id=_type_id, name=_name, payload_type_id=_payload_type_id, status=_status_id, message=_message, submitted_by=_submitted_by where job_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_type" jt="12" type="text" />
			<input_param name="_payload_type" jt="12" type="text" />
			<input_param name="_status" jt="12" type="text" />
			<input_param name="_message" jt="12" type="text" />
			<input_param name="_submitted_by" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatejob" id="Procedure_1866ab6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatejob(id integer, _name text, _type_id integer, _payload_type_id integer, _status integer, _message text, _submitted_by integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update job set type_id=_type_id, payload_type_id=_payload_type_id, status=_status, message=_message, submitted_by=_submitted_by, name=_name where job_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_type_id" jt="4" type="int4" />
			<input_param name="_payload_type_id" jt="4" type="int4" />
			<input_param name="_status" jt="4" type="int4" />
			<input_param name="_message" jt="12" type="text" />
			<input_param name="_submitted_by" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatelinkagegroup" id="Procedure_108a65" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatelinkagegroup(id integer, linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update linkage_group set name=linkageGroupName, start=linkageGroupStart, stop=linkageGroupStop, map_id=mapId, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where linkage_group_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="linkagegroupname" jt="12" type="text" />
			<input_param name="linkagegroupstart" jt="4" type="int4" />
			<input_param name="linkagegroupstop" jt="4" type="int4" />
			<input_param name="mapid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemanifest" id="Procedure_3e6f25b" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemanifest(manifestid integer, manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update manifest set name=manifestName, code=manifestCode, file_path=filePath, created_by=createdBy, 
      created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where manifest_id = manifestId;
    END;
$function$
]]></string>
			<input_param name="manifestid" jt="4" type="int4" />
			<input_param name="manifestname" jt="12" type="text" />
			<input_param name="manifestcode" jt="12" type="text" />
			<input_param name="filepath" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemapset" id="Procedure_8fa64c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapset(id integer, mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update mapset set name=mapsetName, code=mapsetCode, description=mapsetDescription, reference_id=referenceId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=mapsetStatus
     where mapset_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="mapsetname" jt="12" type="text" />
			<input_param name="mapsetcode" jt="12" type="text" />
			<input_param name="mapsetdescription" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="mapsetstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemapsetpropertybyid" id="Procedure_b9a5e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where mapset_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemapsetpropertybyname" id="Procedure_154be" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update mapset
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where mapset_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarker" id="Procedure_4436e04" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers='{}'::jsonb, probsets='{}'::jsonb, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="platformid" jt="4" type="int4" />
			<input_param name="variantid" jt="4" type="int4" />
			<input_param name="markername" jt="12" type="text" />
			<input_param name="markercode" jt="12" type="text" />
			<input_param name="markerref" jt="12" type="text" />
			<input_param name="markeralts" jt="2003" type="_text" />
			<input_param name="markersequence" jt="12" type="text" />
			<input_param name="referenceid" jt="4" type="int4" />
			<input_param name="strandid" jt="4" type="int4" />
			<input_param name="markerstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarkergroup" id="Procedure_35d34a5" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, markergroupmarkers jsonb, germplasmgroup text, createdby integer, createdate date, modifiedby text, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers=markerGroupMarkers, germplasm_group=germplasmGroup, created_by=createdBy, create_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markergroupname" jt="12" type="text" />
			<input_param name="markergroupcode" jt="12" type="text" />
			<input_param name="markergroupmarkers" jt="1111" type="jsonb" />
			<input_param name="germplasmgroup" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createdate" jt="91" type="date" />
			<input_param name="modifiedby" jt="12" type="text" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="markergroupstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarkergroup" id="Procedure_bb7091" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers='{}'::jsonb, germplasm_group=germplasmGroup, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markergroupname" jt="12" type="text" />
			<input_param name="markergroupcode" jt="12" type="text" />
			<input_param name="germplasmgroup" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="markergroupstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarkergroupname" id="Procedure_17c81f2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroupname(_id integer, _name text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
        update marker_group set name=_name
        where marker_group_id = _id;
        GET DIAGNOSTICS i = ROW_COUNT;
        return i;
    END;
$function$
]]></string>
			<input_param name="_id" jt="4" type="int4" />
			<input_param name="_name" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updatemarkerlinkagegroup" id="Procedure_3f17315" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markerid" jt="4" type="int4" />
			<input_param name="markerlinkagegroupstart" jt="2" type="numeric" />
			<input_param name="markerlinkagegroupstop" jt="2" type="numeric" />
			<input_param name="linkagegroupid" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarkerpropertybyid" id="Procedure_16f8e62" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where marker_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatemarkerpropertybyname" id="Procedure_479356d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where marker_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateorganization" id="Procedure_564db7d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateorganization(orgid integer, orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update organization set name=orgName, address=orgAddress, website=orgWebsite, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=orgStatus
     where organization_id = orgId;
    END;
$function$
]]></string>
			<input_param name="orgid" jt="4" type="int4" />
			<input_param name="orgname" jt="12" type="text" />
			<input_param name="orgaddress" jt="12" type="text" />
			<input_param name="orgwebsite" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="orgstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateplatform" id="Procedure_c5aadd" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatform(id integer, platformname text, platformcode text, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update platform set name=platformName, code=platformCode, description=platformDescription, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=platformStatus, type_id=typeId
      where platform_id = id;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
     END;
 $function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="platformname" jt="12" type="text" />
			<input_param name="platformcode" jt="12" type="text" />
			<input_param name="platformdescription" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="platformstatus" jt="4" type="int4" />
			<input_param name="typeid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updateplatformpropertybyid" id="Procedure_aef8e2" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where platform_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateplatformpropertybyname" id="Procedure_5059b09" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where platform_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateproject" id="Procedure_4a99a77" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateproject(pid integer, projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update project set name = projectName, code = projectCode, description = projectDescription, pi_contact = piContact, created_by = createdBy, created_date = createdDate, 
      modified_by = modifiedBy, modified_date = modifiedDate, status = projectStatus where project_id = pId;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="projectname" jt="12" type="text" />
			<input_param name="projectcode" jt="12" type="text" />
			<input_param name="projectdescription" jt="12" type="text" />
			<input_param name="picontact" jt="4" type="int4" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<input_param name="projectstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateprojectpropertybyid" id="Procedure_32bdaef" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyid(projectid integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where project_id=projectId;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateprojectpropertybyname" id="Procedure_14f659d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyname(projectid integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where project_id=projectId;
  END;
$function$
]]></string>
			<input_param name="projectid" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updateprotocol" id="Procedure_30dfc52" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprotocol(pid integer, pname text, pdescription text, ptypeid integer, pplatformid integer, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    update protocol set name=pname, description=pdescription, type_id=ptypeid, platform_id=pplatformid, created_by=pcreatedby, created_date=pcreateddate, modified_by=pmodifiedby, modified_date=pmodifieddate, status=pstatus
     where protocol_id = pid;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pdescription" jt="12" type="text" />
			<input_param name="ptypeid" jt="4" type="int4" />
			<input_param name="pplatformid" jt="4" type="int4" />
			<input_param name="pcreatedby" jt="4" type="int4" />
			<input_param name="pcreateddate" jt="91" type="date" />
			<input_param name="pmodifiedby" jt="4" type="int4" />
			<input_param name="pmodifieddate" jt="91" type="date" />
			<input_param name="pstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="updatereference" id="Procedure_12955e" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatereference(id integer, referencename text, referenceversion text, referencelink text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
        update reference set name=referenceName, version=referenceVersion, link=referenceLink, file_path=filePath, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
        where reference_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="referencename" jt="12" type="text" />
			<input_param name="referenceversion" jt="12" type="text" />
			<input_param name="referencelink" jt="12" type="text" />
			<input_param name="filepath" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updaterole" id="Procedure_5a3e57a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterole(roleid integer, rolename text, rolecode text, readtables integer[], writetables integer[])
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set role_name=roleName, role_code=roleCode, read_tables=readTables, write_tables=writeTables
     where role_id = roleId;
    END;
$function$
]]></string>
			<input_param name="roleid" jt="4" type="int4" />
			<input_param name="rolename" jt="12" type="text" />
			<input_param name="rolecode" jt="12" type="text" />
			<input_param name="readtables" jt="2003" type="_int4" />
			<input_param name="writetables" jt="2003" type="_int4" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatevariant" id="Procedure_57c184d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatevariant(id integer, variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update variant set code=variantCode, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where variant_id = id;
    END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="variantcode" jt="12" type="text" />
			<input_param name="createdby" jt="4" type="int4" />
			<input_param name="createddate" jt="91" type="date" />
			<input_param name="modifiedby" jt="4" type="int4" />
			<input_param name="modifieddate" jt="91" type="date" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="updatevendorprotocol" id="Procedure_396fda7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatevendorprotocol(pid integer, pname text, pvendorid integer, pprotocolid integer, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    update vendor_protocol set name=pname, vendor_id=pvendorid, protocol_id=pprotocolid, status=pstatus
     where vendor_protocol_id = pid;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pname" jt="12" type="text" />
			<input_param name="pvendorid" jt="4" type="int4" />
			<input_param name="pprotocolid" jt="4" type="int4" />
			<input_param name="pstatus" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertanalysisparameter" id="Procedure_42c5673" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertanalysisparameter(id integer, parametername text, parametervalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  DECLARE
    paramCol jsonb;
  BEGIN
    select parameters into paramCol from analysis where analysis_id=id;
    if paramCol is null then
      update analysis set parameters = ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    else
      update analysis set parameters = parameters || ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    end if;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="parametername" jt="12" type="text" />
			<input_param name="parametervalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertdatasetvendorprotocol" id="Procedure_1fb80c6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdatasetvendorprotocol(pid integer, pdatasetid integer, pvendorprotocolid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
	    update marker m set dataset_vendor_protocol = dataset_vendor_protocol || ('{"'||pdatasetid||'": "'||pvendorprotocolid||'"}')::jsonb
		where m.marker_id = pid;
	    GET DIAGNOSTICS i = ROW_COUNT;
	    return i;
    END;
$function$
]]></string>
			<input_param name="pid" jt="4" type="int4" />
			<input_param name="pdatasetid" jt="4" type="int4" />
			<input_param name="pvendorprotocolid" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertdnarunpropertybyid" id="Procedure_3306337" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertdnarunpropertybyname" id="Procedure_4fbcfb4" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnarun set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertdnasamplepropertybyid" id="Procedure_41081c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertdnasamplepropertybyname" id="Procedure_22d2d69" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnasample set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertgermplasmpropertybyid" id="Procedure_232a328" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertgermplasmpropertybyname" id="Procedure_802df1" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update germplasm set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertkvpfromforeigntable" id="Procedure_34705f6" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertkvpfromforeigntable(foreigntable text, sourcekeycol text, sourcevaluecol text, targettable text, targetidcol text, targetjsonbcol text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    declare
        rec distinct_source_keys;
        total integer;
        i integer;
    BEGIN
        total = 0;
        i = 0;
        for rec in
            execute format ('select distinct %I from %I', sourceKeyCol, foreignTable)
        loop
            execute format ('
            update %I t set %I = %I || (''{"''||f.%I||''": "''||f.%I||''"}'')::jsonb
            from %I f
            where t.%I=f.%I::integer
            and f.%I=$1
            and f.%I is not null;
            ', targetTable, targetJsonbCol, targetJsonbCol, sourceKeyCol, sourceValueCol, foreignTable, targetIdCol, targetIdCol, sourceKeyCol, sourceValueCol)
            using rec.key;
            GET DIAGNOSTICS i = ROW_COUNT;
            total = total + i;
        end loop;
        return total;
    END;
$function$
]]></string>
			<input_param name="foreigntable" jt="12" type="text" />
			<input_param name="sourcekeycol" jt="12" type="text" />
			<input_param name="sourcevaluecol" jt="12" type="text" />
			<input_param name="targettable" jt="12" type="text" />
			<input_param name="targetidcol" jt="12" type="text" />
			<input_param name="targetjsonbcol" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertmapsetpropertybyid" id="Procedure_4a679ce" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where mapset_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertmapsetpropertybyname" id="Procedure_1c4c95c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update mapset set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where mapset_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertmarkergroup" id="Procedure_2c0bd9c" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkergroup(_name text, _code text, _markers text, _germplasm_group text, _created_by integer, _created_date date, _modified_by integer, _modified_date date, _status integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into marker_group (name, code, markers, germplasm_group, created_by, created_date, modified_by, modified_date, status)
      values (_name, _code, _markers::jsonb, _germplasm_group, _created_by, _created_date, _modified_by, _modified_date, _status)
      on CONFLICT (name) do UPDATE
      	set name=_name, code=_code, markers=_markers::jsonb, germplasm_group=_germplasm_group, created_by=_created_by, created_date=_created_date, modified_by=_modified_by, modified_date=_modified_date, status=_status;
    select marker_group_id from marker_group where name=_name into id;
   END;
 $function$
]]></string>
			<input_param name="_name" jt="12" type="text" />
			<input_param name="_code" jt="12" type="text" />
			<input_param name="_markers" jt="12" type="text" />
			<input_param name="_germplasm_group" jt="12" type="text" />
			<input_param name="_created_by" jt="4" type="int4" />
			<input_param name="_created_date" jt="91" type="date" />
			<input_param name="_modified_by" jt="4" type="int4" />
			<input_param name="_modified_date" jt="91" type="date" />
			<input_param name="_status" jt="4" type="int4" />
			<input_param name="id" jt="4" type="int4" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertmarkerpropertybyid" id="Procedure_1dbf433" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertmarkerpropertybyname" id="Procedure_b4e538" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update marker set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertmarkertomarkergroupbyid" id="Procedure_43f0054" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyid(id integer, markerid integer, favallele text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markerid" jt="4" type="int4" />
			<input_param name="favallele" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertmarkertomarkergroupbyname" id="Procedure_6c023d" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyname(id integer, markername text, favallele text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    markerId integer;
  BEGIN
    select marker_id into markerId from marker where name=markerName;
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="markername" jt="12" type="text" />
			<input_param name="favallele" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertplatformpropertybyid" id="Procedure_3bfe5d7" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertplatformpropertybyname" id="Procedure_4ed91a" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update platform set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertprojectpropertybyid" id="Procedure_2a79681" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertprojectpropertybyname" id="Procedure_3350030" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update project set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<procedure name="upsertprotocolpropertybyid" id="Procedure_4cd01d9" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprotocolpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update protocol set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where protocol_id=id;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyid" jt="4" type="int4" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="1111" type="void" />
		</procedure>
		<procedure name="upsertprotocolpropertybyname" id="Procedure_d27cda" isSystem="false" params_known="y" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprotocolpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update protocol set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where protocol_id=id;
    return propertyId;
  END;
$function$
]]></string>
			<input_param name="id" jt="4" type="int4" />
			<input_param name="propertyname" jt="12" type="text" />
			<input_param name="propertyvalue" jt="12" type="text" />
			<result_param name="returnValue" jt="4" type="int4" />
		</procedure>
		<function name="addanalysistodataset" id="Function_2ad7a58e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addanalysistodataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_append(analyses, analysisId)
     where dataset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="appendanalysistodataset" id="Function_1d8f9bee" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendanalysistodataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_append(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
		</function>
		<function name="appendreadtabletorole" id="Function_c55f0c8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendreadtabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_append(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="appendroletocontact" id="Function_475cea3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendroletocontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_append(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="appendwritetabletorole" id="Function_153857ad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.appendwritetabletorole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_append(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="createanalysis" id="Function_13407ccb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN	
		insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
		values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, '{}'::jsonb, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
    		select lastval() into id;
	END;
$function$
CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN   
        insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
        values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, analysisparameters, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
            select lastval() into id;
    END;
$function$
]]></string>
		</function>
		<function name="createanalysis" id="Function_1ade4bfb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN	
		insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
		values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, '{}'::jsonb, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
    		select lastval() into id;
	END;
$function$
CREATE OR REPLACE FUNCTION public.createanalysis(analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN   
        insert into analysis (name, description, type_id, program, programversion, algorithm, sourcename, sourceversion, sourceuri, reference_id, parameters, timeexecuted, status,created_by, created_date, modified_by, modified_date)
        values (analysisName, analysisDescription, typeId, analysisProgram, analysisProgramversion, aanalysisAlgorithm, analysisSourcename, analysisSourceversion, analysisSourceuri, referenceId, analysisparameters, analysisTimeexecuted, analysisStatus, createdBy, createdDate, modifiedBy, modifiedDate);
            select lastval() into id;
    END;
$function$
]]></string>
		</function>
		<function name="createcontact" id="Function_20a8605b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcontact(lastname text, firstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into contact (lastname, firstname, code, email, roles, created_by, created_date, modified_by, modified_date, organization_id)
      values (lastName, firstName, contactCode, contactEmail, contactRoles, createdBy, createdDate, modifiedBy, modifiedDate, organizationId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createcv" id="Function_33c3be7c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcv(pcvgroupid integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into cv (cvgroup_id, term, definition, rank, abbreviation, dbxref_id, status)
       values (pcvgroupid, pcvterm, pcvdefinition, pcvrank, pabbreviation, pdbxrefid, pstatus);
     select lastval() into id;
   END;
 $function$
]]></string>
		</function>
		<function name="createcvgroup" id="Function_f56b595" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcvgroup(pname text, pdefinition text, ptype integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into cvgroup (name, definition, type)
       values (pname, pdefinition, ptype);
     select lastval() into id;
   END;
 $function$
]]></string>
		</function>
		<function name="createcvingroup" id="Function_15223ec6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createcvingroup(pgroupname text, pgrouptype integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   DECLARE
    groupId integer;
   BEGIN
     select cvgroup_id into groupId from cvgroup where name=pgroupname and type=pgrouptype;
     insert into cv (cvgroup_id, term, definition, rank, abbreviation, dbxref_id, status)
       values (groupId, pcvterm, pcvdefinition, pcvrank, pabbreviation, pdbxrefid, pstatus);
     select lastval() into id;
   END;
 $function$
]]></string>
		</function>
		<function name="createdataset" id="Function_98cfa4e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdataset(datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset (experiment_id, callinganalysis_id, analyses, data_table, data_file, quality_table, quality_file, scores, created_by, created_date, modified_by, modified_date, status, type_id, name)
      values (experimentId, callinganalysisId, datasetAnalyses, dataTable, dataFile, qualityTable, qualityFile, '{}'::jsonb, createdBy, createdDate, modifiedBy, modifiedDate, datasetStatus, typeId, datasetName); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdatasetmarker" id="Function_36d372cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, datasetMarkerScores); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdatasetmarker" id="Function_10e682b6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdatasetmarker(datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dataset_marker (dataset_id, marker_id, call_rate, maf, reproducibility, scores)
      values (datasetId, markerId, callRate, datasetMarkerMaf, datasetMarkerReproducibility, datasetMarkerScores); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createdbxref" id="Function_2146353d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdbxref(paccession text, pver text, pdescription text, pdbname text, purl text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into dbxref (accession, ver, description, db_name, url)
       values (paccession, pver, pdescription, pdbname, purl);
     select lastval() into id;
   END;
 $function$
]]></string>
		</function>
		<function name="createdisplay" id="Function_8111462" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createdisplay(tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into display (table_name, column_name, display_name, created_by, created_date, modified_by, modified_date, rank)
      values (tableName, columnName, displayName, createdBy, createdDate, modifiedBy, modifiedDate, displayRank); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="creatednarun" id="Function_1925206e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednarun(experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into dnarun (experiment_id, dnasample_id, name, code)
      values (experimentId, dnasampleId, dnarunName, dnarunCode);
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="creatednasample" id="Function_1e7d08c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creatednasample(dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
BEGIN
	insert into dnasample(name, code, platename, num, well_row, well_col, project_id, germplasm_id, created_by, created_date, modified_by, modified_date, status)
	values(dnasamplename, dnasamplecode, dnasampleplatename, dnasamplenum, wellrow, wellcol, projectid, germplasmid, createdby, createddate, modifiedby, modifieddate,dnasamplestatus);
	select lastval() into id;
END;
$function$
]]></string>
		</function>
		<function name="createexperiment" id="Function_33e6a54d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createexperiment(pname text, pcode text, pprojectid integer, pvendorprotocolid integer, pmanifestid integer, pdatafile text, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer, OUT expid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     BEGIN
     insert into experiment (name, code, project_id, manifest_id, data_file, created_by, created_date, modified_by, modified_date, status, vendor_protocol_id)
       values (pname, pcode, pprojectid, pmanifestid, pdatafile, pcreatedby, pcreateddate, pmodifiedby, pmodifieddate, pstatus, pvendorprotocolid);
     select lastval() into expId;
     END;
 $function$
]]></string>
		</function>
		<function name="creategermplasm" id="Function_18c092d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.creategermplasm(germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into germplasm (name, external_code, species_id, type_id, created_by, created_date, modified_by, modified_date, status, code)
      values (germplasmName, externalCode, speciesId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, germplasmStatus, germplasmCode);
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createlinkagegroup" id="Function_1b9d348d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createlinkagegroup(linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN
		insert into linkage_group(name, start, stop, map_id, created_by, created_date,modified_by, modified_date) values(linkageGroupName, linkageGroupStart, linkageGroupStop, mapId, createdBy, createdDate, modifiedBy, modifiedDate);
		select lastval() into id;
	END;
$function$
]]></string>
		</function>
		<function name="createmanifest" id="Function_1847805" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmanifest(manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT mid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into manifest (name, code, file_path, created_by, created_date, modified_by, modified_date)
      values (manifestName, manifestCode, filePath, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into mId;
  END;
$function$
]]></string>
		</function>
		<function name="createmapset" id="Function_389e93fd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmapset(mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into mapset (name, code, description, reference_id, type_id,
created_by, created_date, modified_by, modified_date, status)
      values (mapsetName, mapsetCode, mapsetDescription, referenceId, typeId, createdBy, createdDate, modifiedBy, modifiedDate, mapsetStatus);
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarker" id="Function_cf0449c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, '{}'::jsonb, '{}'::jsonb, strandId, markerStatus);
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarker" id="Function_33139f9e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarker(platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker (platform_id, variant_id, name, code, ref, alts, sequence, reference_id, primers, probsets, strand_id, status)
      values (platformId, variantId, markerName, markerCode, markerRef, markerAlts, markerSequence, referenceId, '{}'::jsonb, '{}'::jsonb, strandId, markerStatus);
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkergroup" id="Function_36bb0b87" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkergroup(markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_group (name, code, markers, germplasm_group, created_by, created_date, modified_by, modified_date, status)
      values (markerGroupName, markerGroupCode, '{}'::jsonb, germplasmGroup, createdBy, createdDate, modifiedBy, modifiedDate, markerGroupStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkerlinkagegroup" id="Function_f4eb142" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createmarkerlinkagegroup" id="Function_3091c0e9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
CREATE OR REPLACE FUNCTION public.createmarkerlinkagegroup(markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into marker_linkage_group (marker_id, start, stop, linkage_group_id)
      values (markerId, markerLinkageGroupStart, markerLinkageGroupStop, linkageGroupId); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createorganization" id="Function_37442826" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createorganization(orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into organization (name, address, website, created_by, created_date, modified_by, modified_date, status)
      values (orgName, orgAddress, orgWebsite, createdBy, createdDate, modifiedBy, modifiedDate, orgStatus); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createplatform" id="Function_a0cc907" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createplatform(platformname text, platformcode text, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
   BEGIN
     insert into platform (name, code, description, created_by, created_date, modified_by, modified_date, status, type_id)
       values (platformName, platformCode, platformDescription, createdBy, createdDate, modifiedBy, modifiedDate, platformStatus, typeId);
     select lastval() into id;
   END;
 $function$
]]></string>
		</function>
		<function name="createproject" id="Function_b8fbf60" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createproject(projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer, OUT projectid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
	    insert into project (name, code, description, pi_contact, created_by, created_date, modified_by, modified_date, status)
	      values (projectName, projectCode, projectDescription, piContact, createdBy, createdDate, modifiedBy, modifiedDate, projectStatus);
	    select lastval() into projectId;
    END;
$function$
]]></string>
		</function>
		<function name="createprotocol" id="Function_7ae2a2a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createprotocol(pname text, pdescription text, ptypeid integer, pplatformid integer, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into protocol (name, description, type_id, platform_id, created_by, created_date, modified_by, modified_date, status)
      values (pname, pdescription, ptypeid, pplatformid, pcreatedby, pcreateddate, pmodifiedby, pmodifieddate, pstatus); 
    select lastval() into id;
    END;
$function$
]]></string>
		</function>
		<function name="createreference" id="Function_274a6214" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createreference(referencename text, referenceversion text, referencelink text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	BEGIN
		insert into reference(name,version,link, file_path, created_by, created_date,modified_by, modified_date) values(referencename, referenceversion, referencelink, filepath, createdBy, createdDate, modifiedBy, modifiedDate);
		select lastval() into id;
	END;
$function$
]]></string>
		</function>
		<function name="createrole" id="Function_2af1e879" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createrole(rolename text, rolecode text, readtables integer[], writetables integer[], OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into role (role_name, role_code, read_tables, write_tables)
      values (roleName, roleCode, readTables, writeTables); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createvariant" id="Function_120cf0ed" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvariant(variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    insert into variant (code, created_by, created_date, modified_by, modified_date)
      values (variantCode, createdBy, createdDate, modifiedBy, modifiedDate); 
    select lastval() into id;
  END;
$function$
]]></string>
		</function>
		<function name="createvendorprotocol" id="Function_2510c1a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.createvendorprotocol(pname text, pvendorid integer, pprotocolid integer, pstatus integer, OUT id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    insert into vendor_protocol (name, vendor_id, protocol_id, status)
      values (pname, pvendorid, pprotocolid, pstatus); 
    select lastval() into id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteanalysis" id="Function_298266a0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysis(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from analysis where analysis_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteanalysisparameter" id="Function_dd6492b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteanalysisparameter(id integer, parametername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update analysis set parameters = parameters - parameterName
      where analysis_id=id;
    return parameterName;
  END;
$function$
]]></string>
		</function>
		<function name="deletecontact" id="Function_1e9ed8fd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecontact(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from contact where contact_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletecv" id="Function_22e6d38b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecv(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from cv where cv_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletecvgroup" id="Function_7d5a770" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletecvgroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
      i integer;
     BEGIN
     delete from cvgroup where cvgroup_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="deletedataset" id="Function_2871f8fb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedataset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dataset where dataset_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletedbxref" id="Function_321da5c5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedbxref(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
      i integer;
     BEGIN
     delete from dbxref where dbxref_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="deletedisplay" id="Function_22bb1735" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletedisplay(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from display where display_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednarun" id="Function_fb57a5d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarun(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnarun where dnarun_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednarunpropertybyid" id="Function_11337260" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun
    set props = props - propertyId::text
    where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletednarunpropertybyname" id="Function_13d7c69e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednarunpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun
      set props = props - property.cv_id::text
      from property
      where dnarun_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletednasample" id="Function_1cc48bac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasample(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from dnasample where dnasample_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletednasamplepropertybyid" id="Function_d66723c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample
    set props = props - propertyId::text
    where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletednasamplepropertybyname" id="Function_380186a8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletednasamplepropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample
      set props = props - property.cv_id::text
      from property
      where dnasample_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteexperiment" id="Function_1e2b663e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteexperiment(eid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from experiment where experiment_id = eId;
    return eId;
    END;
$function$
]]></string>
		</function>
		<function name="deletegermplasm" id="Function_fa33399" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasm(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from germplasm where germplasm_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletegermplasmpropertybyid" id="Function_1bb59e92" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm
    set props = props - propertyId::text
    where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletegermplasmpropertybyname" id="Function_23b8be62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletegermplasmpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm
      set props = props - property.cv_id::text
      from property
      where germplasm_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletelinkagegroup" id="Function_913c3a9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletelinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from linkage_group where linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemanifest" id="Function_26387d8b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemanifest(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from manifest where manifest_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemapset" id="Function_ec2c160" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapset(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from mapset where mapset_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemapsetpropertybyid" id="Function_bfad863" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset
    set props = props - propertyId::text
    where mapset_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletemapsetpropertybyname" id="Function_38e57d8e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemapsetpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update mapset
      set props = props - property.cv_id::text
      from property
      where mapset_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarker" id="Function_2e6b0fbd" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarker(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker where marker_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkergroup" id="Function_a70088b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkergroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_group where marker_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkerinmarkergroupbyid" id="Function_1349cd7f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group 
    set markers = markers - markerId::text
    where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerinmarkergroupbyname" id="Function_18223219" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerinmarkergroupbyname(id integer, markername text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with markerInfo as (select marker_id from marker where name=markerName)
    update marker_group 
      set markers = markers - markerInfo.marker_id::text
      from markerInfo
      where marker_group_id=id;
    return markerName;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerlinkagegroup" id="Function_3216ae77" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerlinkagegroup(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from marker_linkage_group where marker_linkage_group_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletemarkerpropertybyid" id="Function_84b9a39" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker
    set props = props - propertyId::text
    where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deletemarkerpropertybyname" id="Function_3787667a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletemarkerpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker
      set props = props - property.cv_id::text
      from property
      where marker_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteorganization" id="Function_26650a6e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteorganization(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from organization where organization_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleteplatform" id="Function_34877459" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatform(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
 	 DECLARE
 	 	i integer;
     BEGIN
     delete from platform where platform_id = id;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="deleteplatformpropertybyid" id="Function_764f36e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyid(id integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform
    set props = props - propertyId::text
    where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deleteplatformpropertybyname" id="Function_1e4eec00" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteplatformpropertybyname(id integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform
      set props = props - property.cv_id::text
      from property
      where platform_id=id;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteproject" id="Function_49de856" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteproject(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from project where project_id = pId;
    return pId;
    END;
$function$
]]></string>
		</function>
		<function name="deleteprojectpropertybyid" id="Function_3a6e1a68" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project
    set props = props - propertyId::text
    where project_id=projectId;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deleteprojectpropertybyname" id="Function_2eeda5c9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprojectpropertybyname(projectid integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project
      set props = props - property.cv_id::text
      from property
      where project_id=projectId;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deleteprotocol" id="Function_38e4fcc4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocol(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    delete from protocol where protocol_id = pId;
    GET DIAGNOSTICS i = ROW_COUNT;
    return i;
    END;
$function$
]]></string>
		</function>
		<function name="deleteprotocolpropertybyid" id="Function_190fe115" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocolpropertybyid(protocolid integer, propertyid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update protocol 
    set props = props - propertyId::text
    where protocol_id=protocolId;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="deleteprotocolpropertybyname" id="Function_1f96e4a2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleteprotocolpropertybyname(protocolid integer, propertyname text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update protocol 
      set props = props - property.cv_id::text
      from property
      where protocol_id=protocolId;
    return propertyName;
  END;
$function$
]]></string>
		</function>
		<function name="deletereference" id="Function_2ccf0183" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletereference(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from reference where reference_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deleterole" id="Function_3024f79d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deleterole(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from role where role_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletevariant" id="Function_b6732c0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletevariant(id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    BEGIN
    delete from variant where variant_id = id;
    return id;
    END;
$function$
]]></string>
		</function>
		<function name="deletevendorprotocol" id="Function_23e806a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.deletevendorprotocol(pid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
    delete from vendor_protocol where vendor_protocol_id = pId;
    GET DIAGNOSTICS i = ROW_COUNT;
    return i;
    END;
$function$
]]></string>
		</function>
		<function name="file_fdw_handler" id="Function_c36dc5c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_handler()
 RETURNS fdw_handler
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_handler$function$
]]></string>
		</function>
		<function name="file_fdw_validator" id="Function_2318c73b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.file_fdw_validator(text[], oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/file_fdw', $function$file_fdw_validator$function$
]]></string>
		</function>
		<function name="getallanalysisparameters" id="Function_1bd7d19f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallanalysisparameters(id integer)
 RETURNS TABLE(property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select (jsonb_each_text(parameters)).* from analysis where analysis_id=id;
    END;
$function$
]]></string>
		</function>
		<function name="getallchrlenbydataset" id="Function_1b936353" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallchrlenbydataset(datasetid integer)
 RETURNS TABLE(chr_name character varying, length integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select distinct mlp.linkage_group_name, mlp.linkage_group_stop::integer
    from marker m
    left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
    where m.dataset_marker_idx ? datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getallchrlenbydatasetandmap" id="Function_26cb47db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallchrlenbydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(chr_name character varying, length integer)
 LANGUAGE plpgsql
AS $function$
  BEGIN
  return query
  select distinct mlp.linkage_group_name, mlp.linkage_group_stop::integer
  from marker m
  left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
  where m.dataset_marker_idx ? datasetId::text
  and mlp.map_id=mapId;
  END;
$function$
]]></string>
		</function>
		<function name="getallcontacts" id="Function_28582dce" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallcontacts()
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      contacts refcursor;           -- Declare cursor variables                         
    BEGIN
      OPEN contacts FOR 
      SELECT c.contact_id,
					c.lastname ,
					c.firstname ,
					c.code ,
					c.email, 
					null as "roles", 
					c.created_by,
					c.created_date, 
					c.modified_by, 
					c.modified_date 
			from contact c;
      RETURN contacts;
    END;
$function$
]]></string>
		</function>
		<function name="getallcontactsbyrole" id="Function_1cd3698" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallcontactsbyrole(roleid integer)
 RETURNS SETOF contact
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select c.* from contact c, role r where r.role_id = roleId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
		</function>
		<function name="getallmarkermetadatabydataset" id="Function_1ef292d9" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, linkage_group_name character varying, start numeric, stop numeric, mapset_name text, platform_name text, variant_id integer, code text, ref text, alts text, sequence text, reference_name text, primers jsonb, probsets jsonb, strand_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, mlp.linkage_group_name, mlp.start, mlp.stop, mlp.mapset_name, p.name as platform_name, m.variant_id, m.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, r.name as reference_name, m.primers, m.probsets, cv.term as strand_name
	from marker m inner join platform p on m.platform_id = p.platform_id
	left join reference r on m.reference_id = r.reference_id
	left join cv on m.strand_id = cv.cv_id 
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getallmarkermetadatabydatasetandmap" id="Function_3b4885a5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkermetadatabydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_name text, linkage_group_name character varying, start numeric, stop numeric, mapset_name text, platform_name text, variant_id integer, code text, ref text, alts text, sequence text, reference_name text, primers jsonb, probsets jsonb, strand_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, mlp.linkage_group_name, mlp.start, mlp.stop, mlp.mapset_name, p.name as platform_name, m.variant_id, m.code, m.ref, array_to_string(m.alts, ',', '?'), m.sequence, r.name as reference_name, m.primers, m.probsets, cv.term as strand_name
	from marker m inner join platform p on m.platform_id = p.platform_id
	left join reference r on m.reference_id = r.reference_id
	left join cv on m.strand_id = cv.cv_id 
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getallmarkersinmarkergroup" id="Function_1be75574" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallmarkersinmarkergroup(id integer)
 RETURNS TABLE(marker_id integer, marker_name text, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as marker_id, marker.name as marker_name, p1.value as favorable_allele
    from marker, (select (jsonb_each_text(markers)).* from marker_group where marker_group_id=id) as p1
    where marker.marker_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallprojectmetadatabydataset" id="Function_1404e786" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallprojectmetadatabydataset(datasetid integer)
 RETURNS TABLE(project_name text, description text, pi text, experiment_name text, platform_name text, dataset_name text, analysis_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p.name as project_name, p.description, c.firstname || ' ' || c.lastname as PI, e.name as experiment_name, pf.name as platform_name, d.name as dataset_name, a.name as analysis_name
      from dataset d, experiment e, project p, contact c, platform pf, analysis a
      where d.dataset_id = datasetId
      and d.callinganalysis_id = a.analysis_id
      and d.experiment_id = e.experiment_id
      and e.project_id = p.project_id
      and p.pi_contact = c.contact_id
      and e.platform_id = pf.platform_id;
  END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofdnarun" id="Function_230552a2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnarun(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnarun where dnarun_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofdnasample" id="Function_b7f59d6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofdnasample(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from dnasample where dnasample_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofgermplasm" id="Function_2ad5715" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofgermplasm(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from germplasm where germplasm_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofmapset" id="Function_14989fe3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmapset(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from mapset where mapset_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofmarker" id="Function_5cb80e8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofmarker(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from marker where marker_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofplatform" id="Function_29545d9c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofplatform(id integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from platform where platform_id=id) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofproject" id="Function_2a53dff4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofproject(projectid integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from project where project_id=projectId) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallpropertiesofprotocol" id="Function_f6186be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallpropertiesofprotocol(protocolid integer)
 RETURNS TABLE(property_id integer, property_name text, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select p1.key::int as property_id, cv.term as property_name, p1.value as property_value
    from cv, (select (jsonb_each_text(props)).* from protocol where protocol_id=protocolId) as p1
    where cv.cv_id = p1.key::int;
    END;
$function$
]]></string>
		</function>
		<function name="getallsamplemetadatabydataset" id="Function_11df11f0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getallsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, sample_name text, germplasm_name text, external_code text, germplasm_type text, species text, platename text, num text, well_row text, well_col text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select dr.name as dnarun_name, ds.name as sample_name, g.name as germplasm_name, g.external_code, c1.term as germplasm_type, c2.term as species, ds.platename, ds.num, ds.well_row, ds.well_col
	from dnarun dr
	inner join dnasample ds on dr.dnasample_id = ds.dnasample_id 
	inner join germplasm g on ds.germplasm_id = g.germplasm_id 
	left join cv as c1 on g.type_id = c1.cv_id 
	left join cv as c2 on g.species_id = c2.cv_id
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getcontactnamesbyrole" id="Function_129f717a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcontactnamesbyrole(_role_name character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
  DECLARE
    contacts refcursor;           -- Declare cursor variables                         
  BEGIN
    OPEN contacts FOR 
    SELECT c.contact_id,
				c.lastname,
				c.firstname
		from contact c
		join role r on (r.role_id=ANY(c.roles))
		where r.role_name=_role_name;
    RETURN contacts;
  END;
$function$
]]></string>
		</function>
		<function name="getcontactsbyrole" id="Function_c8bacbb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getcontactsbyrole(_role_name character varying)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      contacts refcursor;           -- Declare cursor variables                         
    BEGIN
      OPEN contacts FOR 
      SELECT c.contact_id,
					c.lastname,
					c.firstname,
					c.code,
					c.email,
					r.role_id,
					r.role_name,
					r.role_code
			from contact c
			join role r on (r.role_id=ANY(c.roles))
			where r.role_name=_role_name;
      RETURN contacts;
    END;
$function$
]]></string>
		</function>
		<function name="getdnarunnamesbydataset" id="Function_367ced81" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunnamesbydataset(datasetid integer)
 RETURNS TABLE(dnarun_id integer, dnarun_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select  dr.dnarun_id, dr.name as dnarun_name 
	from dnarun dr
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getdnarunpropertybyid" id="Function_2b33f2f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnarun where dnarun_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getdnarunpropertybyname" id="Function_141b94bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnarunpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnarun, property
      where dnarun_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getdnasamplepropertybyid" id="Function_274ae0ad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from dnasample where dnasample_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getdnasamplepropertybyname" id="Function_2d4d562b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getdnasamplepropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from dnasample, property
      where dnasample_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getexperimentnamesbyprojectid" id="Function_351f0313" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentnamesbyprojectid(projectid integer)
 RETURNS TABLE(id integer, experiment_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select experiment_id, name from experiment where project_id = projectId;
  END;
$function$
]]></string>
		</function>
		<function name="getexperimentsbyprojectid" id="Function_115d0c1b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getexperimentsbyprojectid(projectid integer)
 RETURNS SETOF experiment
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from experiment where project_id = projectId;
  END;
$function$
]]></string>
		</function>
		<function name="getgermplasmpropertybyid" id="Function_13b3191b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from germplasm where germplasm_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getgermplasmpropertybyname" id="Function_23e6c093" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getgermplasmpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from germplasm, property
      where germplasm_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getmanifestbyexperimentid" id="Function_23da40e5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmanifestbyexperimentid(experimentid integer)
 RETURNS SETOF manifest
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select * from manifest where manifest_id in (select manifest_id from experiment where experiment_id = experimentId);
  END;
$function$
]]></string>
		</function>
		<function name="getmapsetpropertybyid" id="Function_2ed91713" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from mapset where mapset_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmapsetpropertybyname" id="Function_323b5835" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmapsetpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from mapset, property
      where mapset_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerinmarkergroupbyid" id="Function_e1be912" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyid(id integer, markerid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select markers->markerId::text into value from marker_group where marker_group_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerinmarkergroupbyname" id="Function_1ba9cf79" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerinmarkergroupbyname(id integer, markername text)
 RETURNS TABLE(marker_id integer, favorable_allele text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    with markerInfo as (select marker_id from marker where name=markerName)
    select markerInfo.marker_id, (props->markerInfo.marker_id::text)::text as favAllele
      from marker_group, markerInfo
      where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkernamesbydataset" id="Function_350cdcaf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkernamesbydataset(datasetid integer)
 RETURNS TABLE(marker_id integer, marker_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id, m.name as marker_name
	from marker m
	where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkernamesbydatasetandmap" id="Function_91818ad" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkernamesbydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_id integer, marker_name text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.marker_id, m.name as marker_name
	from marker m
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerpropertybyid" id="Function_1e1d522c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from marker where marker_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getmarkerpropertybyname" id="Function_a65219d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getmarkerpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from marker, property
      where marker_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getminimalmarkermetadatabydataset" id="Function_2e57acef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalmarkermetadatabydataset(datasetid integer)
 RETURNS TABLE(marker_name text, alleles text, chrom character varying, pos numeric, strand text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select m.name as marker_name, m.ref || '/' || array_to_string(m.alts, ',', '?') as alleles, mlp.linkage_group_name as chrom, mlp.stop as pos, cv.term as strand
    from marker m
    left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
    left join cv on m.strand_id = cv.cv_id
    where m.dataset_marker_idx ? datasetId::text
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getminimalmarkermetadatabydatasetandmap" id="Function_170ee541" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalmarkermetadatabydatasetandmap(datasetid integer, mapid integer)
 RETURNS TABLE(marker_name text, alleles text, chrom character varying, pos numeric, strand text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select m.name as marker_name, m.ref || '/' || array_to_string(m.alts, ',', '?') as alleles, mlp.linkage_group_name as chrom, mlp.stop as pos, cv.term as strand
	from marker m
	left join v_marker_linkage_physical mlp on m.marker_id = mlp.marker_id
	left join cv on m.strand_id = cv.cv_id
	where m.dataset_marker_idx ? datasetId::text
	and mlp.map_id=mapId
	order by m.dataset_marker_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getminimalsamplemetadatabydataset" id="Function_161442e3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getminimalsamplemetadatabydataset(datasetid integer)
 RETURNS TABLE(dnarun_name text, sample_name text, germplasm_name text, external_code text, germplasm_type text, species text, platename text, num text, well_row text, well_col text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
	return query
	select dr.name as dnarun_name, ds.name as sample_name, g.name as germplasm_name, g.external_code, c1.term as germplasm_type, c2.term as species, ds.platename, ds.num, ds.well_row, ds.well_col
	from dnarun dr
	inner join dnasample ds on dr.dnasample_id = ds.dnasample_id 
	inner join germplasm g on ds.germplasm_id = g.germplasm_id 
	left join cv as c1 on g.type_id = c1.cv_id 
	left join cv as c2 on g.species_id = c2.cv_id
	where dr.dataset_dnarun_idx ? datasetId::text
	order by dr.dataset_dnarun_idx->datasetId::text;
  END;
$function$
]]></string>
		</function>
		<function name="getplatformpropertybyid" id="Function_29c40c82" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyid(id integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from platform where platform_id=id;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getplatformpropertybyname" id="Function_b246138" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getplatformpropertybyname(id integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from platform, property
      where platform_id=id);
  END;
$function$
]]></string>
		</function>
		<function name="getprojectnamesbypi" id="Function_118189c7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectnamesbypi(_contact_id integer)
 RETURNS refcursor
 LANGUAGE plpgsql
AS $function$
    DECLARE
      projects refcursor;
    BEGIN
      OPEN projects FOR 
      select p.project_id, 
					p.name 
			from project p
			where p.pi_contact=_contact_id;
      RETURN projects;
    END;
$function$
]]></string>
		</function>
		<function name="getprojectpropertybyid" id="Function_1ef95c00" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyid(projectid integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from project where project_id=projectId;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getprojectpropertybyname" id="Function_2de1f29" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprojectpropertybyname(projectid integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from project, property
      where project_id=projectId);
  END;
$function$
]]></string>
		</function>
		<function name="getprotocolpropertybyid" id="Function_bcab329" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprotocolpropertybyid(protocolid integer, propertyid integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
  DECLARE
    value text;
  BEGIN
    select props->propertyId::text into value from protocol where protocol_id=protocolId;
    return value;
  END;
$function$
]]></string>
		</function>
		<function name="getprotocolpropertybyname" id="Function_1dac2116" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getprotocolpropertybyname(protocolid integer, propertyname text)
 RETURNS TABLE(property_id integer, property_value text)
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    (with property as (select cv_id from cv where term=propertyName)
    select property.cv_id, (props->property.cv_id::text)::text as value
      from protocol, property
      where protocol_id=protocolId);
  END;
$function$
]]></string>
		</function>
		<function name="getrolesofcontact" id="Function_3602848c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.getrolesofcontact(contactid integer)
 RETURNS SETOF role
 LANGUAGE plpgsql
AS $function$
  BEGIN
    return query
    select r.* from contact c, role r where c.contact_id = contactId and r.role_id = any(c.roles);
  END;
$function$
]]></string>
		</function>
		<function name="gettotalprojects" id="Function_1ea7cf0b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettotalprojects()
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    total integer; 
  BEGIN
    select count(*) into total from projects;
    return total;
  END;
$function$
]]></string>
		</function>
		<function name="removeanalysisfromdataset" id="Function_3000bc62" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removeanalysisfromdataset(datasetid integer, analysisid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set analyses=array_remove(analyses, analysisId)
     where dataset_id = datasetId;
    END;
$function$
]]></string>
		</function>
		<function name="removereadtablefromrole" id="Function_36972253" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removereadtablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set read_tables=array_remove(read_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="removerolefromcontact" id="Function_2dd03bd1" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removerolefromcontact(contactid integer, roleid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set roles=array_remove(roles, roleId)
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="removewritetablefromrole" id="Function_ec9c1bf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.removewritetablefromrole(roleid integer, tableid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set write_tables=array_remove(write_tables, tableId)
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="setdatawarehouseversion" id="Function_39f09090" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.setdatawarehouseversion(ver text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
        propId integer;
     BEGIN
     select cv_id into propId from cv where term='version' and cvgroup_id=(select cvgroup_id from cvgroup where name='gobii_datawarehouse' and type=1 );
     update gobiiprop set value=ver
      where type_id=propId
      and rank=1;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updateanalysis" id="Function_1333dc9d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updateanalysis" id="Function_3651cc43" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updateanalysis(id integer, analysisname text, analysisdescription text, typeid integer, analysisprogram text, analysisprogramversion text, aanalysisalgorithm text, analysissourcename text, analysissourceversion text, analysissourceuri text, referenceid integer, analysisparameters jsonb, analysistimeexecuted timestamp without time zone, analysisstatus integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update analysis set name=analysisName, description=analysisDescription, type_id=typeId, program=analysisProgram, programversion=analysisProgramversion, algorithm=aanalysisAlgorithm, sourcename=analysisSourcename, sourceversion=analysisSourceversion, sourceuri=analysisSourceuri, reference_id=referenceId, parameters=analysisParameters, timeexecuted=analysisTimeexecuted, status=analysisStatus, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where analysis_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatecontact" id="Function_5382ab" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecontact(contactid integer, contactlastname text, contactfirstname text, contactcode text, contactemail text, contactroles integer[], createdby integer, createddate date, modifiedby integer, modifieddate date, organizationid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update contact set lastname=contactLastName, firstname=contactFirstName, code=contactCode, email=contactEmail, roles=contactRoles, created_by=createdBy, created_date=createdDate, 
      modified_by=modifiedBy, modified_date=modifiedDate, organization_id=organizationId
     where contact_id = contactId;
    END;
$function$
]]></string>
		</function>
		<function name="updatecv" id="Function_1e498221" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecv(pid integer, pcvgroupid integer, pcvterm text, pcvdefinition text, pcvrank integer, pabbreviation text, pdbxrefid integer, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update cv set cvgroup_id=pcvgroupid, term=pcvterm, definition=pcvdefinition, rank=pcvrank, abbreviation=pabbreviation, dbxref_id=pdbxrefid, status=pstatus
      where cv_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updatecvgroup" id="Function_10dfe3be" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatecvgroup(pid integer, pname text, pdefinition text, ptype integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update cvgroup set name=pname, definition=pdefinition, type=ptype
      where cvgroup_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updatedataset" id="Function_1c882572" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedataset(id integer, datasetname text, experimentid integer, callinganalysisid integer, datasetanalyses integer[], datatable text, datafile text, qualitytable text, qualityfile text, createdby integer, createddate date, modifiedby integer, modifieddate date, datasetstatus integer, typeid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset set experiment_id=experimentId, callinganalysis_id=callinganalysisId, analyses=datasetAnalyses, data_table=dataTable, data_file=dataFile, quality_table=qualityTable, quality_file=qualityFile, scores='{}'::jsonb, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=datasetStatus, type_id=typeId, name=datasetName
     where dataset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedatasetmarker" id="Function_26d294c3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores=datasetMarkerScores
     where dataset_marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedatasetmarker" id="Function_296d3bf6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedatasetmarker(id integer, datasetid integer, markerid integer, callrate real, datasetmarkermaf real, datasetmarkerreproducibility real, datasetmarkerscores jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dataset_marker set dataset_id=datasetId, marker_id=markerId, call_rate=callRate, maf=datasetMarkerMaf, reproducibility=datasetMarkerReproducibility, scores=datasetMarkerScores
     where dataset_marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatedbxref" id="Function_6acd631" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedbxref(pid integer, paccession text, pver text, pdescription text, pdbname text, purl text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
     DECLARE
        i integer;
     BEGIN
     update dbxref set accession=paccession, ver=pver, description=pdescription, db_name=pdbname, url=purl
      where dbxref_id = pid;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updatedisplay" id="Function_dfe1a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatedisplay(id integer, tablename text, columnname text, displayname text, createdby integer, createddate date, modifiedby integer, modifieddate date, displayrank integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update display set table_name=tableName, column_name=columnName, display_name=displayName, created_by=createdBy, created_date=createdDate, 
      modified_by=modifiedBy, modified_date=modifiedDate, rank=displayRank
     where display_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednarun" id="Function_d7b2153" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarun(id integer, experimentid integer, dnasampleid integer, dnarunname text, dnaruncode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnarun set experiment_id=experimentId, dnasample_id=dnasampleId, name=dnarunName, code=dnarunCode
     where dnarun_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednarunpropertybyid" id="Function_72d3660" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednarunpropertybyname" id="Function_267153f6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnarun
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednasample" id="Function_346210e0" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasample(id integer, dnasamplename text, dnasamplecode text, dnasampleplatename text, dnasamplenum text, wellrow text, wellcol text, projectid integer, germplasmid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, dnasamplestatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update dnasample set name=dnaSampleName, code=dnaSampleCode, platename=dnaSamplePlateName, num=dnaSampleNum, well_row=wellRow, well_col=wellCol, project_id=projectId, germplasm_id=germplasmId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=dnaSampleStatus
     where dnasample_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatednasamplepropertybyid" id="Function_2f9a6fb5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatednasamplepropertybyname" id="Function_2fe13e0b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatednasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update dnasample
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateexperiment" id="Function_1cbbcb08" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateexperiment(pid integer, pname text, pcode text, pprojectid integer, pvendorprotocolid integer, pmanifestid integer, pdatafile text, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
 	DECLARE
        i integer;
     BEGIN
     update experiment set name=pname, code=pcode, project_id=pprojectid, manifest_id=pmanifestid, data_file=pdatafile,
       created_by=pcreatedby, created_date=pcreateddate, modified_by=pmodifiedby, modified_date=pmodifieddate, status=pstatus, vendor_protocol_id=pvendorprotocolid 
       where experiment_id = pId;
     GET DIAGNOSTICS i = ROW_COUNT;
     return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updategermplasm" id="Function_23b51b59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasm(id integer, germplasmname text, externalcode text, speciesid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, germplasmstatus integer, germplasmcode text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update germplasm set name=germplasmName, external_code=externalCode, species_id=speciesId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=germplasmStatus, code=germplasmCode
     where germplasm_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updategermplasmpropertybyid" id="Function_37c1e71f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updategermplasmpropertybyname" id="Function_250be11e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update germplasm
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatelinkagegroup" id="Function_3b33447" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatelinkagegroup(id integer, linkagegroupname text, linkagegroupstart integer, linkagegroupstop integer, mapid integer, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update linkage_group set name=linkageGroupName, start=linkageGroupStart, stop=linkageGroupStop, map_id=mapId, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     where linkage_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemanifest" id="Function_15b3c2e4" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemanifest(manifestid integer, manifestname text, manifestcode text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update manifest set name=manifestName, code=manifestCode, file_path=filePath, created_by=createdBy, 
      created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where manifest_id = manifestId;
    END;
$function$
]]></string>
		</function>
		<function name="updatemapset" id="Function_3b33491b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapset(id integer, mapsetname text, mapsetcode text, mapsetdescription text, referenceid integer, typeid integer, createdby integer, createddate date, modifiedby integer, modifieddate date, mapsetstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update mapset set name=mapsetName, code=mapsetCode, description=mapsetDescription, reference_id=referenceId, type_id=typeId, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=mapsetStatus
     where mapset_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemapsetpropertybyid" id="Function_157ec38b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where mapset_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemapsetpropertybyname" id="Function_120a6301" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update mapset
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where mapset_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemarker" id="Function_2406ddfc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers='{}'::jsonb, probsets='{}'::jsonb, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarker" id="Function_103ec322" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarker(id integer, platformid integer, variantid integer, markername text, markercode text, markerref text, markeralts text[], markersequence text, referenceid integer, strandid integer, markerstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker set  platform_id=platformId, variant_id=variantId, name=markerName, code=markerCode, ref=markerRef, alts=markerAlts, sequence=markerSequence, reference_id=referenceId, primers='{}'::jsonb, probsets='{}'::jsonb, strand_id=strandId, status=markerStatus
     where marker_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkergroup" id="Function_3302473c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers='{}'::jsonb, germplasm_group=germplasmGroup, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, markergroupmarkers jsonb, germplasmgroup text, createdby integer, createdate date, modifiedby text, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers=markerGroupMarkers, germplasm_group=germplasmGroup, created_by=createdBy, create_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkergroup" id="Function_3581674d" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, germplasmgroup text, createdby integer, createddate date, modifiedby integer, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers='{}'::jsonb, germplasm_group=germplasmGroup, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkergroup(id integer, markergroupname text, markergroupcode text, markergroupmarkers jsonb, germplasmgroup text, createdby integer, createdate date, modifiedby text, modifieddate date, markergroupstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_group set name=markerGroupName, code=markerGroupCode, markers=markerGroupMarkers, germplasm_group=germplasmGroup, created_by=createdBy, create_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=markerGroupStatus
     where marker_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkerlinkagegroup" id="Function_e7f87ef" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkerlinkagegroup" id="Function_135c56eb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart integer, markerlinkagegroupstop integer, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
CREATE OR REPLACE FUNCTION public.updatemarkerlinkagegroup(id integer, markerid integer, markerlinkagegroupstart numeric, markerlinkagegroupstop numeric, linkagegroupid integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update marker_linkage_group set marker_id=markerId, start=markerLinkageGroupStart, stop=markerLinkageGroupStop, linkage_group_id=linkageGroupId
     where marker_linkage_group_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatemarkerpropertybyid" id="Function_39e5e43f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updatemarkerpropertybyname" id="Function_218f6af6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatemarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update marker
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateorganization" id="Function_6b542fa" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateorganization(orgid integer, orgname text, orgaddress text, orgwebsite text, createdby integer, createddate date, modifiedby integer, modifieddate date, orgstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update organization set name=orgName, address=orgAddress, website=orgWebsite, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=orgStatus
     where organization_id = orgId;
    END;
$function$
]]></string>
		</function>
		<function name="updateplatform" id="Function_3ae2a0db" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatform(id integer, platformname text, platformcode text, platformdescription text, createdby integer, createddate date, modifiedby integer, modifieddate date, platformstatus integer, typeid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
 	 DECLARE
 	 	i integer;
     BEGIN
     update platform set name=platformName, code=platformCode, description=platformDescription, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate, status=platformStatus, type_id=typeId
      where platform_id = id;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
     END;
 $function$
]]></string>
		</function>
		<function name="updateplatformpropertybyid" id="Function_91998a7" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateplatformpropertybyname" id="Function_2a05bf4c" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update platform
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="updateproject" id="Function_257e7f8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateproject(pid integer, projectname text, projectcode text, projectdescription text, picontact integer, createdby integer, createddate date, modifiedby integer, modifieddate date, projectstatus integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update project set name = projectName, code = projectCode, description = projectDescription, pi_contact = piContact, created_by = createdBy, created_date = createdDate, 
      modified_by = modifiedBy, modified_date = modifiedDate, status = projectStatus where project_id = pId;
    END;
$function$
]]></string>
		</function>
		<function name="updateprojectpropertybyid" id="Function_e4eb67e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyid(projectid integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project set props = jsonb_set(props, ('{'||propertyId::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      where project_id=projectId;
  END;
$function$
]]></string>
		</function>
		<function name="updateprojectpropertybyname" id="Function_bcff8d8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprojectpropertybyname(projectid integer, propertyname text, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    with property as (select cv_id from cv where term=propertyName)
    update project
      set props = jsonb_set(props, ('{'||property.cv_id::text||'}')::text[], ('"'||propertyValue||'"')::jsonb)
      from property
      where project_id=projectId;
  END;
$function$
]]></string>
		</function>
		<function name="updateprotocol" id="Function_308222b" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updateprotocol(pid integer, pname text, pdescription text, ptypeid integer, pplatformid integer, pcreatedby integer, pcreateddate date, pmodifiedby integer, pmodifieddate date, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	DECLARE
        i integer;
    BEGIN
    update protocol set name=pname, description=pdescription, type_id=ptypeid, platform_id=pplatformid, created_by=pcreatedby, created_date=pcreateddate, modified_by=pmodifiedby, modified_date=pmodifieddate, status=pstatus
     where protocol_id = pid;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
    END;
$function$
]]></string>
		</function>
		<function name="updatereference" id="Function_a5cc8c6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatereference(id integer, referencename text, referenceversion text, referencelink text, filepath text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    	update reference set name=referenceName, version=referenceVersion, link=referenceLink, file_path=filePath, created_by = createdBy, created_date = createdDate, modified_by = modifiedBy, modified_date = modifiedDate
     	where reference_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updaterole" id="Function_12d3301a" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterole(roleid integer, rolename text, rolecode text, readtables integer[], writetables integer[])
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update role set role_name=roleName, role_code=roleCode, read_tables=readTables, write_tables=writeTables
     where role_id = roleId;
    END;
$function$
]]></string>
		</function>
		<function name="updatevariant" id="Function_b3952cb" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatevariant(id integer, variantcode text, createdby integer, createddate date, modifiedby integer, modifieddate date)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
    BEGIN
    update variant set code=variantCode, created_by=createdBy, created_date=createdDate, modified_by=modifiedBy, modified_date=modifiedDate
     where variant_id = id;
    END;
$function$
]]></string>
		</function>
		<function name="updatevendorprotocol" id="Function_175e1ff8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updatevendorprotocol(pid integer, pname text, pvendorid integer, pprotocolid integer, pstatus integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
	DECLARE
        i integer;
    BEGIN
    update vendor_protocol set name=pname, vendor_id=pvendorid, protocol_id=pprotocolid, status=pstatus
     where vendor_protocol_id = pid;
      GET DIAGNOSTICS i = ROW_COUNT;
      return i;
    END;
$function$
]]></string>
		</function>
		<function name="upsertanalysisparameter" id="Function_1a56472e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertanalysisparameter(id integer, parametername text, parametervalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  DECLARE
    paramCol jsonb;
  BEGIN
    select parameters into paramCol from analysis where analysis_id=id;
    if paramCol is null then
      update analysis set parameters = ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    else
      update analysis set parameters = parameters || ('{"'||parameterName||'": "'||parameterValue||'"}')::jsonb
        where analysis_id=id;
    end if;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdatasetvendorprotocol" id="Function_3b99f8fc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdatasetvendorprotocol(pid integer, pdatasetid integer, pvendorprotocolid integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    DECLARE
        i integer;
    BEGIN
	    update marker m set dataset_vendor_protocol = dataset_vendor_protocol || ('{"'||pdatasetid||'": "'||pvendorprotocolid||'"}')::jsonb
		where m.marker_id = pid;
	    GET DIAGNOSTICS i = ROW_COUNT;
	    return i;
    END;
$function$
]]></string>
		</function>
		<function name="upsertdnarunpropertybyid" id="Function_3772ac59" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnarun set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnarunpropertybyname" id="Function_2e25c5cc" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnarunpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnarun set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnarun_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnasamplepropertybyid" id="Function_1d396ec3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update dnasample set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertdnasamplepropertybyname" id="Function_f8af4d2" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertdnasamplepropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update dnasample set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where dnasample_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertgermplasmpropertybyid" id="Function_1d6b3ed6" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update germplasm set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertgermplasmpropertybyname" id="Function_2cf8ca79" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertgermplasmpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update germplasm set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where germplasm_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertkvpfromforeigntable" id="Function_268bc7d5" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertkvpfromforeigntable(foreigntable text, sourcekeycol text, sourcevaluecol text, targettable text, targetidcol text, targetjsonbcol text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
    declare
        rec distinct_source_keys;
        total integer;
        i integer;
    BEGIN
        total = 0;
        i = 0;
        for rec in
            execute format ('select distinct %I from %I', sourceKeyCol, foreignTable)
        loop
            execute format ('
            update %I t set %I = %I || (''{"''||f.%I||''": "''||f.%I||''"}'')::jsonb
            from %I f
            where t.%I=f.%I::integer
            and f.%I=$1
            and f.%I is not null;
            ', targetTable, targetJsonbCol, targetJsonbCol, sourceKeyCol, sourceValueCol, foreignTable, targetIdCol, targetIdCol, sourceKeyCol, sourceValueCol)
            using rec.key;
            GET DIAGNOSTICS i = ROW_COUNT;
            total = total + i;
        end loop;
        return total;
    END;
$function$
]]></string>
		</function>
		<function name="upsertmapsetpropertybyid" id="Function_3abb456e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update mapset set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where mapset_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmapsetpropertybyname" id="Function_37cee538" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmapsetpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update mapset set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where mapset_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkerpropertybyid" id="Function_2d253281" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkerpropertybyname" id="Function_376fabc8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkerpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update marker set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where marker_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkertomarkergroupbyid" id="Function_eddffdf" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyid(id integer, markerid integer, favallele text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertmarkertomarkergroupbyname" id="Function_19591dac" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertmarkertomarkergroupbyname(id integer, markername text, favallele text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    markerId integer;
  BEGIN
    select marker_id into markerId from marker where name=markerName;
    update marker_group set markers = markers || ('{"'||markerId::text||'": "'||favAllele||'"}')::jsonb
      where marker_group_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertplatformpropertybyid" id="Function_763ebb8" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update platform set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertplatformpropertybyname" id="Function_3939558f" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertplatformpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update platform set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where platform_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprojectpropertybyid" id="Function_1b2f7ac3" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update project set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprojectpropertybyname" id="Function_26eef541" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprojectpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update project set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where project_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprotocolpropertybyid" id="Function_c855e51" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprotocolpropertybyid(id integer, propertyid integer, propertyvalue text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
  BEGIN
    update protocol set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where protocol_id=id;
  END;
$function$
]]></string>
		</function>
		<function name="upsertprotocolpropertybyname" id="Function_3106fd0e" isSystem="false" params_known="n" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.upsertprotocolpropertybyname(id integer, propertyname text, propertyvalue text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
  DECLARE
    propertyId integer;
  BEGIN
    select cv_id into propertyId from cv where term=propertyName;
    update protocol set props = props || ('{"'||propertyId::text||'": "'||propertyValue||'"}')::jsonb
      where protocol_id=id;
    return propertyId;
  END;
$function$
]]></string>
		</function>
	</schema>
	<connector name="PostgreSQL" database="PostgreSQL" host="localhost" port="5432" instance="gobii_erd" user="kpalis" passwd="a3BhbGlz" />
	<layout name="Default" id="Layout_300b53b2" show_relation="columns" >
		<entity schema="gobii_rice1.public" name="analysis" color="BFD4F5" x="800" y="928" />
		<entity schema="gobii_rice1.public" name="contact" color="C8F5BF" x="400" y="192" />
		<entity schema="gobii_rice1.public" name="cv" color="BFD4F5" x="1408" y="640" />
		<entity schema="gobii_rice1.public" name="cvgroup" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="databasechangelog" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="databasechangeloglock" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="dataset" color="BFD4F5" x="976" y="640" />
		<entity schema="gobii_rice1.public" name="dbxref" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="display" color="C8F5BF" x="608" y="1456" />
		<entity schema="gobii_rice1.public" name="dnarun" color="C8F5BF" x="608" y="1280" />
		<entity schema="gobii_rice1.public" name="dnasample" color="F5DDBF" x="224" y="1280" />
		<entity schema="gobii_rice1.public" name="experiment" color="BFD4F5" x="800" y="640" />
		<entity schema="gobii_rice1.public" name="germplasm" color="F5DDBF" x="384" y="1280" />
		<entity schema="gobii_rice1.public" name="gobiiprop" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="linkage_group" color="BFBFF5" x="336" y="640" />
		<entity schema="gobii_rice1.public" name="manifest" color="BFBFF5" x="1008" y="240" />
		<entity schema="gobii_rice1.public" name="mapset" color="BFBFF5" x="176" y="640" />
		<entity schema="gobii_rice1.public" name="marker" color="F5DDBF" x="1216" y="1280" />
		<entity schema="gobii_rice1.public" name="marker_group" color="D2BFF5" x="1424" y="48" />
		<entity schema="gobii_rice1.public" name="marker_linkage_group" color="BFBFF5" x="336" y="912" />
		<entity schema="gobii_rice1.public" name="organization" color="C8F5BF" x="48" y="192" />
		<entity schema="gobii_rice1.public" name="platform" color="BFD4F5" x="1552" y="640" />
		<entity schema="gobii_rice1.public" name="project" color="C8F5BF" x="240" y="192" />
		<entity schema="gobii_rice1.public" name="protocol" color="B7C8E3" x="976" y="1456" />
		<entity schema="gobii_rice1.public" name="reference" color="BFBFF5" x="848" y="240" />
		<entity schema="gobii_rice1.public" name="role" color="D2BFF5" x="1616" y="48" />
		<entity schema="gobii_rice1.public" name="v_marker_linkage_genetic" color="D2BFF5" x="1216" y="304" />
		<entity schema="gobii_rice1.public" name="variant" color="F5DDBF" x="1376" y="1280" />
		<entity schema="gobii_rice1.public" name="vendor_protocol" color="B7C8E3" x="976" y="1456" />
		<browser id="Browse_30b5623f" name="cv" confirm_updates="y" >
			<browse_table schema="gobii_rice1.public" entity="cv" x="10" y="10" width="940" height="362" />
		</browser>
		<browser id="Browse_10db0ac4" name="marker" confirm_updates="y" confirmed="y" >
			<browse_table schema="gobii_rice1.public" entity="marker" x="10" y="10" width="400" height="300" >
				<browse_table schema="gobii_rice1.public" entity="cv" fk="marker_strand_id_fkey" x="420" y="10" width="400" height="300" record_view="y" />
			</browse_table>
		</browser>
	</layout>
	<layout name="Default With Groups" id="Layout_12e53834" show_relation="columns" >
		<entity schema="gobii_rice1.public" name="analysis" color="BFD4F5" x="1056" y="1184" />
		<entity schema="gobii_rice1.public" name="contact" color="C8F5BF" x="1216" y="336" />
		<entity schema="gobii_rice1.public" name="cv" color="BFD4F5" x="1472" y="896" />
		<entity schema="gobii_rice1.public" name="cvgroup" color="B7C8E3" x="432" y="512" />
		<entity schema="gobii_rice1.public" name="databasechangelog" color="B7C8E3" x="80" y="512" />
		<entity schema="gobii_rice1.public" name="databasechangeloglock" color="B7C8E3" x="48" y="256" />
		<entity schema="gobii_rice1.public" name="dataset" color="BFD4F5" x="1248" y="896" />
		<entity schema="gobii_rice1.public" name="dbxref" color="B7C8E3" x="256" y="512" />
		<entity schema="gobii_rice1.public" name="display" color="C8F5BF" x="864" y="608" />
		<entity schema="gobii_rice1.public" name="dnarun" color="C8F5BF" x="656" y="608" />
		<entity schema="gobii_rice1.public" name="dnasample" color="F5DDBF" x="1056" y="1600" />
		<entity schema="gobii_rice1.public" name="experiment" color="BFD4F5" x="1056" y="896" />
		<entity schema="gobii_rice1.public" name="germplasm" color="F5DDBF" x="1216" y="1600" />
		<entity schema="gobii_rice1.public" name="gobiiprop" color="B7C8E3" x="96" y="80" />
		<entity schema="gobii_rice1.public" name="linkage_group" color="BFBFF5" x="784" y="1600" />
		<entity schema="gobii_rice1.public" name="manifest" color="BFBFF5" x="800" y="896" />
		<entity schema="gobii_rice1.public" name="mapset" color="BFBFF5" x="624" y="1600" />
		<entity schema="gobii_rice1.public" name="marker" color="F5DDBF" x="1472" y="1600" />
		<entity schema="gobii_rice1.public" name="marker_group" color="D2BFF5" x="1696" y="304" />
		<entity schema="gobii_rice1.public" name="marker_linkage_group" color="BFBFF5" x="784" y="1888" />
		<entity schema="gobii_rice1.public" name="organization" color="C8F5BF" x="1216" y="608" />
		<entity schema="gobii_rice1.public" name="platform" color="BFD4F5" x="1648" y="896" />
		<entity schema="gobii_rice1.public" name="project" color="C8F5BF" x="1056" y="336" />
		<entity schema="gobii_rice1.public" name="protocol" color="B7C8E3" x="256" y="256" />
		<entity schema="gobii_rice1.public" name="reference" color="BFBFF5" x="640" y="896" />
		<entity schema="gobii_rice1.public" name="role" color="D2BFF5" x="1888" y="304" />
		<entity schema="gobii_rice1.public" name="v_marker_linkage_genetic" color="D2BFF5" x="1472" y="560" />
		<entity schema="gobii_rice1.public" name="variant" color="F5DDBF" x="1696" y="1600" />
		<entity schema="gobii_rice1.public" name="vendor_protocol" color="B7C8E3" x="432" y="256" />
		<group name="experiment" color="F0F3F7" >
			<entity schema="gobii_rice1.public" name="experiment" />
			<entity schema="gobii_rice1.public" name="dataset" />
			<entity schema="gobii_rice1.public" name="analysis" />
		</group>
		<group name="cv" color="F0F3F7" >
			<entity schema="gobii_rice1.public" name="cv" />
			<entity schema="gobii_rice1.public" name="platform" />
		</group>
		<group name="marker" color="F7F4F0" >
			<entity schema="gobii_rice1.public" name="marker" />
			<entity schema="gobii_rice1.public" name="variant" />
		</group>
		<group name="dnasample" color="F7F4F0" >
			<entity schema="gobii_rice1.public" name="dnasample" />
			<entity schema="gobii_rice1.public" name="germplasm" />
		</group>
		<group name="mapset" color="F0F0F7" >
			<entity schema="gobii_rice1.public" name="mapset" />
			<entity schema="gobii_rice1.public" name="linkage_group" />
			<entity schema="gobii_rice1.public" name="marker_linkage_group" />
		</group>
		<group name="reference" color="F0F0F7" >
			<entity schema="gobii_rice1.public" name="reference" />
			<entity schema="gobii_rice1.public" name="manifest" />
		</group>
		<group name="dnarun" color="F1F7F0" >
			<entity schema="gobii_rice1.public" name="dnarun" />
			<entity schema="gobii_rice1.public" name="display" />
		</group>
		<group name="project" color="F1F7F0" >
			<entity schema="gobii_rice1.public" name="project" />
			<entity schema="gobii_rice1.public" name="contact" />
			<entity schema="gobii_rice1.public" name="organization" />
		</group>
		<group name="marker_group" color="F3F0F7" >
			<entity schema="gobii_rice1.public" name="marker_group" />
			<entity schema="gobii_rice1.public" name="role" />
			<entity schema="gobii_rice1.public" name="v_marker_linkage_genetic" />
		</group>
	</layout>
	<layout name="GOBII_CROP" id="Layout_78ffbd4" joined_routing="y" show_column_type="y" show_relation="columns" >
		<comment><![CDATA[GOBII_ERD_v1.3.0]]></comment>
		<entity schema="gobii_rice1.public" name="analysis" color="CDDCEE" x="1104" y="576" />
		<entity schema="gobii_rice1.public" name="contact" color="DAFADA" x="80" y="1200" />
		<entity schema="gobii_rice1.public" name="cv" color="DFDFF5" x="528" y="672" />
		<entity schema="gobii_rice1.public" name="cvgroup" color="DFDFF5" x="704" y="672" />
		<entity schema="gobii_rice1.public" name="dataset" color="CDDCEE" x="1296" y="576" />
		<entity schema="gobii_rice1.public" name="dbxref" color="DFDFF5" x="704" y="896" />
		<entity schema="gobii_rice1.public" name="display" color="D2D7D7" x="896" y="1232" />
		<entity schema="gobii_rice1.public" name="dnarun" color="FFDCDC" x="64" y="656" />
		<entity schema="gobii_rice1.public" name="dnasample" color="FFDCDC" x="288" y="656" />
		<entity schema="gobii_rice1.public" name="edge" color="9BFFD0" x="1712" y="1040" />
		<entity schema="gobii_rice1.public" name="experiment" color="CDDCEE" x="1280" y="896" />
		<entity schema="gobii_rice1.public" name="germplasm" color="FFDCDC" x="80" y="864" />
		<entity schema="gobii_rice1.public" name="gobiiprop" color="D2D7D7" x="736" y="1232" />
		<entity schema="gobii_rice1.public" name="job" color="CCFFFF" x="544" y="1232" />
		<entity schema="gobii_rice1.public" name="linkage_group" color="CDF5D8" x="560" y="144" />
		<entity schema="gobii_rice1.public" name="manifest" color="CDDCEE" x="944" y="880" />
		<entity schema="gobii_rice1.public" name="mapset" color="CDF5D8" x="800" y="112" />
		<entity schema="gobii_rice1.public" name="marker" color="F8F3ED" x="48" y="80" />
		<entity schema="gobii_rice1.public" name="marker_group" color="F8F3ED" x="304" y="80" />
		<entity schema="gobii_rice1.public" name="marker_linkage_group" color="F8F3ED" x="272" y="384" />
		<entity schema="gobii_rice1.public" name="organization" color="DAFADA" x="272" y="1168" />
		<entity schema="gobii_rice1.public" name="platform" color="D8FCFC" x="1024" y="96" />
		<entity schema="gobii_rice1.public" name="project" color="CDDCEE" x="928" y="576" />
		<entity schema="gobii_rice1.public" name="protocol" color="D8FCFC" x="1232" y="96" />
		<entity schema="gobii_rice1.public" name="reference" color="FFA5A5" x="576" y="384" />
		<entity schema="gobii_rice1.public" name="role" color="DAFADA" x="272" y="1360" />
		<entity schema="gobii_rice1.public" name="timescoper" color="FFFFCC" x="1552" y="672" />
		<entity schema="gobii_rice1.public" name="transitive_closure" color="9BFFD0" x="1712" y="912" />
		<entity schema="gobii_rice1.public" name="v_dataset_summary" color="CCCCFF" x="1552" y="112" />
		<entity schema="gobii_rice1.public" name="v_marker_group_summary" color="CCCCFF" x="1760" y="112" />
		<entity schema="gobii_rice1.public" name="v_marker_summary" color="CCCCFF" x="1744" y="256" />
		<entity schema="gobii_rice1.public" name="variant" color="F8F3ED" x="80" y="400" />
		<entity schema="gobii_rice1.public" name="vendor_protocol" color="D8FCFC" x="1232" y="352" />
		<entity schema="gobii_rice1.public" name="vertex" color="9BFFD0" x="1568" y="896" />
		<group name="CV" color="DFDFF5" >
			<entity schema="gobii_rice1.public" name="cv" />
			<entity schema="gobii_rice1.public" name="cvgroup" />
			<entity schema="gobii_rice1.public" name="dbxref" />
		</group>
		<group name="Project" color="CDDCEE" >
			<entity schema="gobii_rice1.public" name="analysis" />
			<entity schema="gobii_rice1.public" name="dataset" />
			<entity schema="gobii_rice1.public" name="experiment" />
			<entity schema="gobii_rice1.public" name="manifest" />
			<entity schema="gobii_rice1.public" name="project" />
		</group>
		<group name="Platform-Protocol-Vendor" color="D8FCFC" >
			<entity schema="gobii_rice1.public" name="platform" />
			<entity schema="gobii_rice1.public" name="protocol" />
			<entity schema="gobii_rice1.public" name="vendor_protocol" />
		</group>
		<group name="Samples" color="FFDCDC" >
			<entity schema="gobii_rice1.public" name="dnarun" />
			<entity schema="gobii_rice1.public" name="dnasample" />
			<entity schema="gobii_rice1.public" name="germplasm" />
		</group>
		<group name="Markers" color="F8F3ED" >
			<entity schema="gobii_rice1.public" name="marker" />
			<entity schema="gobii_rice1.public" name="marker_group" />
			<entity schema="gobii_rice1.public" name="marker_linkage_group" />
			<entity schema="gobii_rice1.public" name="variant" />
		</group>
		<group name="Map" color="CDF5D8" >
			<entity schema="gobii_rice1.public" name="linkage_group" />
			<entity schema="gobii_rice1.public" name="mapset" />
		</group>
		<group name="Contacts" color="DAFADA" >
			<entity schema="gobii_rice1.public" name="contact" />
			<entity schema="gobii_rice1.public" name="organization" />
			<entity schema="gobii_rice1.public" name="role" />
		</group>
		<group name="System" color="D2D7D7" >
			<entity schema="gobii_rice1.public" name="display" />
			<entity schema="gobii_rice1.public" name="gobiiprop" />
			<entity schema="gobii_rice1.public" name="job" />
		</group>
		<group name="Views" color="CCCCFF" >
			<entity schema="gobii_rice1.public" name="v_dataset_summary" />
			<entity schema="gobii_rice1.public" name="v_marker_group_summary" />
			<entity schema="gobii_rice1.public" name="v_marker_summary" />
		</group>
		<group name="Graph" color="9BFFD0" >
			<entity schema="gobii_rice1.public" name="edge" />
			<entity schema="gobii_rice1.public" name="transitive_closure" />
			<entity schema="gobii_rice1.public" name="vertex" />
		</group>
		<group name="Timescope" color="FFFFCC" >
			<entity schema="gobii_rice1.public" name="timescoper" />
		</group>
	</layout>
</project>